{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"School of SRE","text":"<p>Site Reliability Engineers (SREs) sits at the intersection of software engineering and systems engineering. While there are potentially infinite permutations and combinations of how infrastructure and software components can be put together to achieve an objective, focusing on foundational skills allows SREs to work with complex systems and software, regardless of whether these systems are proprietary, 3rd party, open systems, run on cloud/on-prem infrastructure, etc. Particularly, it is important to gain a deep understanding of how these areas of systems and infrastructure relate to each other and interact with each other. The combination of software and systems engineering skills is rare and is generally built over time with exposure to a wide variety of infrastructure, systems, and software. </p> <p>SREs bring in engineering practices to keep the site up. Each distributed system is an agglomeration of many components. SREs validate business requirements, convert them to SLAs for each of the components that constitute the distributed system, monitor and measure adherence to SLAs, re-architect or scale out to mitigate or avoid SLA breaches, add these learnings as feedback to new systems or projects and thereby reduce operational toil. Hence SREs play a vital role right from the day 0 design of the system. </p> <p>In early 2019, we started visiting campuses across India to recruit the best and brightest minds to make sure LinkedIn and all the services that make up its complex technology stack are always available for everyone. This critical function at LinkedIn falls under the purview of the Site Engineering team and Site Reliability Engineers (SREs) who are Software Engineers, specialized in reliability. </p> <p>As we continued on this journey, we started getting a lot of questions from these campuses on what exactly the site reliability engineering role entails? And, how could someone learn the skills and the disciplines involved to become a successful site reliability engineer? Fast forward a few months, and a few of these campus students had joined LinkedIn either as interns or as full-time engineers to become a part of the Site Engineering team; we also had a few lateral hires who joined our organization who were not from a traditional SRE background. That's when a few of us got together and started to think about how we can onboard new graduate engineers to the Site Engineering team.</p> <p>There are very few resources out there guiding someone on the basic skill sets one has to acquire as a beginner SRE. Because of the lack of these resources, we felt that individuals have a tough time getting into open positions in the industry. We created the School Of SRE as a starting point for anyone wanting to build their career as an SRE. In this course, we are focusing on building strong foundational skills. The course is structured in a way to provide more real life examples and how learning each of these topics can play an important role in day-to-day job responsibilities of an SRE. Currently, we are covering the following topics under the School Of SRE:</p> <ul> <li> <p>Level 101</p> <ul> <li>Fundamentals Series<ul> <li>Linux Basics</li> <li>Git</li> <li>Linux Networking</li> </ul> </li> <li>Python and Web</li> <li>Data<ul> <li>Relational Databases (MySQL)</li> <li>NoSQL Concepts</li> <li>Big Data</li> </ul> </li> <li>Systems Design</li> <li>Metrics and Monitoring</li> <li>Security</li> </ul> </li> <li> <p>Level 102</p> <ul> <li>Linux Intermediate</li> <li>Linux Advanced<ul> <li>Containers and Orchestration</li> <li>System Calls and Signals</li> </ul> </li> <li>Networking</li> <li>System Design</li> <li>System Troubleshooting and Performance Improvements </li> <li>Continuous Integration and Continuous Delivery</li> </ul> </li> </ul> <p>We believe continuous learning will help in acquiring deeper knowledge and competencies in order to expand your skill sets, every module has added references that could be a guide for further learning. Our hope is that by going through these modules we should be able to build the essential skills required for a Site Reliability Engineer.</p> <p>At LinkedIn, we are using this curriculum for onboarding our non-traditional hires and new college grads into the SRE role. We had multiple rounds of successful onboarding experiences with new employees and the course helped them be productive in a very short period of time. This motivated us to open source the content for helping other organizations in onboarding new engineers into the role and provide guidance for aspiring individuals to get into the role. We realize that the initial content we created is just a starting point and we hope that the community can help in the journey of refining and expanding the content. Check out the contributing guide to get started.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Code of Conduct","text":"<p>This code of conduct outlines expectations for participation in LinkedIn-managed open source communities, as well as steps for reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all. People violating this code of conduct may be banned from the community.</p> <p>Our open source communities strive to:</p> <ul> <li>Be friendly and patient: Remember you might not be communicating in someone else's primary spoken or programming language, and others may not have your level of understanding.</li> <li>Be welcoming: Our communities welcome and support people of all backgrounds and identities. This includes, but is not limited to members of any race, ethnicity, culture, national origin, color, immigration status, social and economic class, educational level, sex, sexual orientation, gender identity and expression, age, size, family status, political belief, religion, and mental and physical ability.</li> <li>Be respectful: We are a world-wide community of professionals, and we conduct ourselves professionally. Disagreement is no excuse for poor behavior and poor manners. Disrespectful and unacceptable behavior includes, but is not limited to:<ul> <li>Violent threats or language.</li> <li>Discriminatory or derogatory jokes and language.</li> <li>Posting sexually explicit or violent material.</li> <li>Posting, or threatening to post, people's personally identifying information (\"doxing\").</li> <li>Insults, especially those using discriminatory terms or slurs.</li> <li>Behavior that could be perceived as sexual attention.</li> <li>Advocating for or encouraging any of the above behaviors.</li> </ul> </li> <li>Understand disagreements: Disagreements, both social and technical, are useful learning opportunities. Seek to understand the other viewpoints and resolve differences constructively.</li> <li>This code is not exhaustive or complete. It serves to capture our common understanding of a productive, collaborative environment. We expect the code to be followed in spirit as much as in the letter.</li> </ul>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This code of conduct applies to all repos and communities for LinkedIn-managed open source projects regardless of whether or not the repo explicitly calls out its use of this code. The code also applies in public spaces when an individual is representing a project or its community. Examples include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p> <p>Note: Some LinkedIn-managed communities have codes of conduct that pre-date this document and issue resolution process. While communities are not required to change their code, they are expected to use the resolution process outlined here. The review team will coordinate with the communities involved to address your concerns.</p>"},{"location":"CODE_OF_CONDUCT/#reporting-code-of-conduct-issues","title":"Reporting Code of Conduct Issues","text":"<p>We encourage all communities to resolve issues on their own whenever possible. This builds a broader and deeper understanding and ultimately a healthier interaction. In the event that an issue cannot be resolved locally, please feel free to report your concerns by contacting oss@linkedin.com.</p> <p>In your report, please include:</p> <ul> <li>Your contact information.</li> <li>Names (real, usernames or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well.</li> <li>Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public chat log), please include a link or attachment.</li> <li>Any additional information that may be helpful.</li> </ul> <p>All reports will be reviewed by a multi-person team and will result in a response that is deemed necessary and appropriate to the circumstances. Where additional perspectives are needed, the team may seek insight from others with relevant expertise or experience. The confidentiality of the person reporting the incident will be kept at all times. Involved parties are never part of the review team.</p> <p>Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the review team may take any action they deem appropriate, including a permanent ban from the community.</p> <p>This code of conduct is based on the Microsoft Open Source Code of Conduct which was based on the template established by the TODO Group and used by numerous other large communities (e.g., Facebook, Yahoo, Twitter, GitHub) and the Scope section from the Contributor Covenant version 1.4.</p>"},{"location":"CONTRIBUTING/","title":"Contribute","text":"<p>We realise that the initial content we created is just a starting point and our hope is that the community can help in the journey refining and extending the contents.</p> <p>As a contributor, you represent that the content you submit is not plagiarised. By submitting the content, you (and, if applicable, your employer) are licensing the submitted content to LinkedIn and the open source community subject to the Creative Commons Attribution 4.0 International Public License.</p> <p>Repository URL: https://github.com/linkedin/school-of-sre</p>"},{"location":"CONTRIBUTING/#contributing-guidelines","title":"Contributing Guidelines","text":"<p>Ensure that you adhere to the following guidelines:</p> <ul> <li>Should be about principles and concepts that can be applied in any company or individual project. Do not focus on particular tools or tech stack (which usually change over time).</li> <li>Adhere to the Code of Conduct.</li> <li>Should be relevant to the roles and responsibilities of an SRE.</li> <li>Should be locally tested (see steps for testing) and well-formatted.</li> <li>It is good practice to open an issue first and discuss your changes before submitting a pull request. This way, you can incorporate ideas from others before you even start.</li> </ul>"},{"location":"CONTRIBUTING/#building-and-testing-locally","title":"Building and testing locally","text":"<p>Run the following commands to build and view the site locally before opening a PR.</p> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\npip install -r requirements.txt\nmkdocs build\nmkdocs serve\n</code></pre>"},{"location":"CONTRIBUTING/#opening-a-pr","title":"Opening a PR","text":"<p>Follow the GitHub PR workflow for your contributions.</p> <p>Fork this repo, create a feature branch, commit your changes and open a PR to this repo.</p>"},{"location":"sre_community/","title":"SRE Community","text":"<p>We are having an active LinkedIn community for School of SRE.</p> <p>Please join the group via: https://www.linkedin.com/groups/12493545/</p> <p>The group has members with different levels of experience in site reliability engineering. There are active conversation on different technical topics centered around site reliability engineering. We encourage everyone to join the conversation and learn from each other and build a successful career in the SRE space.</p>"},{"location":"level101/big_data/evolution/","title":"Evolution of Hadoop","text":""},{"location":"level101/big_data/evolution/#architecture-of-hadoop","title":"Architecture of Hadoop","text":"<ol> <li> <p>HDFS</p> <ol> <li>The Hadoop Distributed File System (HDFS) is a distributed file system designed to run on commodity hardware. It has many similarities with existing distributed file systems. However, the differences from other distributed file systems are significant.</li> <li>HDFS is highly fault-tolerant and is designed to be deployed on low-cost hardware. HDFS provides high throughput access to application data and is suitable for applications that have large datasets.</li> <li>HDFS is part of the Apache Hadoop Core project.</li> </ol> <p></p> <p>The main components of HDFS include: 1. NameNode: is the arbitrator and central repository of file namespace in the cluster. The NameNode executes the operations such as opening, closing, and renaming files and directories. 2. DataNode: manages the storage attached to the node on which it runs. It is responsible for serving all the read and writes requests. It performs operations on instructions on NameNode such as creation, deletion, and replications of blocks. 3. Client: Responsible for getting the required metadata from the NameNode and then communicating with the DataNodes for reads and writes. </p> </li> <li> <p>YARN     YARN stands for \u201cYet Another Resource Negotiator\u201c. It was introduced in Hadoop 2.0 to remove the bottleneck on Job Tracker which was present in Hadoop 1.0. YARN was described as a \u201cRedesigned Resource Manager\u201d at the time of its launching, but it has now evolved to be known as a large-scale distributed operating system used for Big Data processing.</p> <p></p> <p>The main components of YARN architecture include: 1. Client: It submits map-reduce (MR) jobs to the resource manager. 2. Resource Manager: It is the master daemon of YARN and is responsible for resource assignment and management among all the applications. Whenever it receives a processing request, it forwards it to the corresponding node manager and allocates resources for the completion of the request accordingly. It has two major components:     1. Scheduler: It performs scheduling based on the allocated application and available resources. It is a pure scheduler, which means that it does not perform other tasks such as monitoring or tracking and does not guarantee a restart if a task fails. The YARN scheduler supports plugins such as Capacity Scheduler and Fair Scheduler to partition the cluster resources.     2. Application manager: It is responsible for accepting the application and negotiating the first container from the resource manager. It also restarts the Application Manager container if a task fails. 3. Node Manager: It takes care of individual nodes on the Hadoop cluster and manages application and workflow and that particular node. Its primary job is to keep up with the Node Manager. It monitors resource usage, performs log management, and also kills a container based on directions from the resource manager. It is also responsible for creating the container process and starting it at the request of the Application master. 4. Application Master: An application is a single job submitted to a framework. The application manager is responsible for negotiating resources with the resource manager, tracking the status, and monitoring the progress of a single application. The application master requests the container from the node manager by sending a Container Launch Context (CLC) which includes everything an application needs to run. Once the application is started, it sends the health report to the resource manager from time-to-time. 5. Container: It is a collection of physical resources such as RAM, CPU cores, and disk on a single node. The containers are invoked by Container Launch Context (CLC) which is a record that contains information such as environment variables, security tokens, dependencies, etc.</p> </li> </ol>"},{"location":"level101/big_data/evolution/#mapreduce-framework","title":"MapReduce framework","text":"<ol> <li>The term MapReduce represents two separate and distinct tasks Hadoop programs perform\u2014Map Job and Reduce Job. Map jobs take datasets as input and process them to produce key-value pairs. Reduce job takes the output of the Map job i.e. the key-value pairs and aggregates them to produce desired results.</li> <li>Hadoop MapReduce (Hadoop Map/Reduce) is a software framework for distributed processing of large datasets on computing clusters. MapReduce helps to split the input dataset into a number of parts and run a program on all data parts parallel at once.</li> <li>Please find the below Word count example demonstrating the usage of the MapReduce framework:</li> </ol>"},{"location":"level101/big_data/evolution/#other-tooling-around-hadoop","title":"Other tooling around Hadoop","text":"<ol> <li>Hive<ol> <li>Uses a language called HQL which is very SQL like. Gives non-programmers the ability to query and analyze data in Hadoop. Is basically an abstraction layer on top of map-reduce.</li> <li>Ex. HQL query:<ol> <li><code>SELECT pet.name, comment FROM pet JOIN event ON (pet.name = event.name);</code></li> </ol> </li> <li>In mysql:<ol> <li><code>SELECT pet.name, comment FROM pet, event WHERE pet.name = event.name;</code></li> </ol> </li> </ol> </li> <li> <p>Pig</p> <ol> <li>Uses a scripting language called Pig Latin, which is more workflow driven. Don't need to be an expert Java programmer but need a few coding skills. Is also an abstraction layer on top of map-reduce.</li> <li>Here is a quick question for you: What is the output of running the Pig queries in the right column against the data present in the left column in the below image?</li> </ol> <p></p> <p>Output: <pre><code>\n7,Komal,Nayak,24,9848022334,trivendram\n8,Bharathi,Nambiayar,24,9848022333,Chennai\n5,Trupthi,Mohanthy,23,9848022336,Bhuwaneshwar\n6,Archana,Mishra,23,9848022335,Chennai\n</code></pre></p> </li> <li> <p>Spark</p> <ol> <li>Spark provides primitives for in-memory cluster computing that allows user programs to load data into a cluster\u2019s memory and query it repeatedly, making it well-suited to machine learning algorithms.</li> </ol> </li> <li>Presto<ol> <li>Presto is a high performance, distributed SQL query engine for Big Data.</li> <li>Its architecture allows users to query a variety of data sources such as Hadoop, AWS S3, Alluxio, MySQL, Cassandra, Kafka, and MongoDB.</li> <li>Example Presto query: <pre><code>\nUSE studentDB;\nSHOW TABLES;\nSELECT roll_no, name FROM studentDB.studentDetails WHERE section=\u2019A\u2019 LIMIT 5;\n</code></pre> </li> </ol> </li> </ol> <p></p>"},{"location":"level101/big_data/evolution/#data-serialisation-and-storage","title":"Data Serialisation and storage","text":"<ol> <li>In order to transport the data over the network or to store on some persistent storage, we use the process of translating data structures or objects state into binary or textual form. We call this process serialization.</li> <li>Avro data is stored in a container file (a <code>.avro</code> file) and its schema (the <code>.avsc</code> file) is stored with the data file.</li> <li>Apache Hive provides support to store a table as Avro and can also query data in this serialisation format.</li> </ol>"},{"location":"level101/big_data/intro/","title":"Big Data","text":""},{"location":"level101/big_data/intro/#prerequisites","title":"Prerequisites","text":"<ul> <li>Basics of Linux File systems.</li> <li>Basic understanding of System Design.</li> </ul>"},{"location":"level101/big_data/intro/#what-to-expect-from-this-course","title":"What to expect from this course","text":"<p>This course covers the basics of Big Data and how it has evolved to become what it is today. We will take a look at a few realistic scenarios where Big Data would be a perfect fit. An interesting assignment on designing a Big Data system is followed by understanding the architecture of Hadoop and the tooling around it.</p>"},{"location":"level101/big_data/intro/#what-is-not-covered-under-this-course","title":"What is not covered under this course","text":"<p>Writing programs to draw analytics from data.</p>"},{"location":"level101/big_data/intro/#course-contents","title":"Course Contents","text":"<ol> <li>Overview of Big Data</li> <li>Usage of Big Data Techniques</li> <li>Evolution of Hadoop</li> <li>Architecture of Hadoop<ol> <li>HDFS</li> <li>Yarn</li> </ol> </li> <li>MapReduce Framework</li> <li>Other Tooling Around Hadoop<ol> <li>Hive</li> <li>Pig</li> <li>Spark</li> <li>Presto</li> </ol> </li> <li>Data Serialization and Storage</li> </ol>"},{"location":"level101/big_data/intro/#overview-of-big-data","title":"Overview of Big Data","text":"<ol> <li>Big Data is a collection of large datasets that cannot be processed using traditional computing techniques. It is not a single technique or a tool, rather it has become a complete subject, which involves various tools, techniques, and frameworks.</li> <li>Big Data could consist of<ol> <li>Structured data</li> <li>Unstructured data</li> <li>Semi-structured data</li> </ol> </li> <li>Characteristics of Big Data:<ol> <li>Volume</li> <li>Variety</li> <li>Velocity</li> <li>Variability</li> </ol> </li> <li>Examples of Big Data generation include stock exchanges, social media sites, jet engines, etc.</li> </ol>"},{"location":"level101/big_data/intro/#usage-of-big-data-techniques","title":"Usage of Big Data Techniques","text":"<ol> <li>Take the example of the traffic lights problem.<ol> <li>There are more than 300,000 traffic lights in the US as of 2018.</li> <li>Let us assume that we placed a device on each of them to collect metrics and send it to a central metrics collection system.</li> <li>If each of the IoT devices sends 10 events per minute, we have <code>300000 x 10 x 60 x 24 = 432 x 10 ^ 7</code> events per day.</li> <li>How would you go about processing that and telling me how many of the signals were \u201cgreen\u201d at 10:45 am on a particular day?</li> </ol> </li> <li>Consider the next example on Unified Payments Interface (UPI) transactions:<ol> <li>We had about 1.15 billion UPI transactions in the month of October 2019 in India.</li> <li>If we try to extrapolate this data to about a year and try to find out some common payments that were happening through a particular UPI ID, how do you suggest we go about that?</li> </ol> </li> </ol>"},{"location":"level101/big_data/tasks/","title":"Tasks and conclusion","text":""},{"location":"level101/big_data/tasks/#post-training-tasks","title":"Post-training tasks:","text":"<ol> <li>Try setting up your own three-node Hadoop cluster. <ol> <li>A VM-based solution can be found here</li> </ol> </li> <li>Write a simple Spark/MR job of your choice and understand how to generate analytics from data.<ol> <li>Sample dataset can be found here</li> </ol> </li> </ol>"},{"location":"level101/big_data/tasks/#references","title":"References:","text":"<ol> <li>Hadoop documentation</li> <li>HDFS Architecture</li> <li>YARN Architecture</li> <li>Google GFS paper</li> </ol>"},{"location":"level101/databases_nosql/further_reading/","title":"Conclusion","text":"<p>We have covered basic concepts of NoSQL databases. There is much more to learn and do. We hope this course gives you a good start and inspires you to explore further.</p>"},{"location":"level101/databases_nosql/further_reading/#further-reading","title":"Further reading","text":"<p>NoSQL:</p> <p>https://hostingdata.co.uk/nosql-database/</p> <p>https://www.mongodb.com/nosql-explained</p> <p>https://www.mongodb.com/nosql-explained/nosql-vs-sql</p> <p>Cap Theorem</p> <p>http://www.julianbrowne.com/article/brewers-cap-theorem</p> <p>Scalability</p> <p>http://www.slideshare.net/jboner/scalability-availability-stability-patterns</p> <p>Eventual Consistency</p> <p>https://www.allthingsdistributed.com/2008/12/eventually_consistent.html</p> <p>https://www.toptal.com/big-data/consistent-hashing</p> <p>https://web.stanford.edu/class/cs244/papers/chord_TON_2003.pdf</p>"},{"location":"level101/databases_nosql/intro/","title":"NoSQL Concepts","text":""},{"location":"level101/databases_nosql/intro/#prerequisites","title":"Prerequisites","text":"<ul> <li>Relational Databases</li> </ul>"},{"location":"level101/databases_nosql/intro/#what-to-expect-from-this-course","title":"What to expect from this course","text":"<p>At the end of training, you will have an understanding of what a NoSQL database is, what kind of advantages or disadvantages it has over traditional RDBMS, learn about different types of NoSQL databases and understand some of the underlying concepts &amp; trade-offs w.r.t to NoSQL.</p>"},{"location":"level101/databases_nosql/intro/#what-is-not-covered-under-this-course","title":"What is not covered under this course","text":"<p>We will not be deep diving into any specific NoSQL database. </p>"},{"location":"level101/databases_nosql/intro/#course-contents","title":"Course Contents","text":"<ul> <li>Introduction to NoSQL</li> <li>CAP Theorem</li> <li>Data versioning</li> <li>Partitioning</li> <li>Hashing</li> <li>Quorum</li> </ul>"},{"location":"level101/databases_nosql/intro/#introduction","title":"Introduction","text":"<p>When people use the term \u201cNoSQL database\u201d, they typically use it to refer to any non-relational database. Some say the term \u201cNoSQL\u201d stands for \u201cnon SQL\u201d while others say it stands for \u201cnot only SQL.\u201d Either way, most agree that NoSQL databases are databases that store data in a format other than relational tables.</p> <p>A common misconception is that NoSQL databases or non-relational databases don\u2019t store relationship data well. NoSQL databases can store relationship data\u2014they just store it differently than relational databases do. In fact, when compared with SQL databases, many find modeling relationship data in NoSQL databases to be easier, because related data doesn\u2019t have to be split between tables.</p> <p>Such databases have existed since the late 1960s, but the name \"NoSQL\" was only coined in the early 21st century. NASA used a NoSQL database to track inventory for the Apollo mission. NoSQL databases emerged in the late 2000s as the cost of storage dramatically decreased. Gone were the days of needing to create a complex, difficult-to-manage data model simply for the purposes of reducing data duplication. Developers (rather than storage) were becoming the primary cost of software development, so NoSQL databases optimized for developer productivity. With the rise of Agile development methodology, NoSQL databases were developed with a focus on scaling, fast performance and at the same time allowed for frequent application changes and made programming easier.</p>"},{"location":"level101/databases_nosql/intro/#types-of-nosql-databases","title":"Types of NoSQL databases:","text":"<p>Over time due to the way these NoSQL databases were developed to suit requirements at different companies, we ended up with quite a few types of them. However, they can be broadly classified into 4 types. Some of the databases can overlap between different types. They are:</p> <ol> <li> <p>Document databases: They store data in documents similar to JSON (JavaScript Object Notation) objects. Each document contains pairs of fields and values. The values can typically be a variety of types including things like strings, numbers, booleans, arrays, or objects, and their structures typically align with objects developers are working with in code. The advantages include intuitive data model &amp; flexible schemas. Because of their variety of field value types and powerful query languages, document databases are great for a wide variety of use cases and can be used as a general purpose database. They can horizontally scale-out to accomodate large data volumes. Ex: MongoDB, Couchbase</p> </li> <li> <p>Key-Value databases: These are a simpler type of databases where each item contains keys and values. A value can typically only be retrieved by referencing its key, so learning how to query for a specific key-value pair is typically simple. Key-value databases are great for use cases where you need to store large amounts of data but you don\u2019t need to perform complex queries to retrieve it. Common use cases include storing user preferences or caching. Ex: Redis, DynamoDB, Voldemort/Venice (Linkedin).</p> </li> <li> <p>Wide-Column stores: They store data in tables, rows, and dynamic columns. Wide-column stores provide a lot of flexibility over relational databases because each row is not required to have the same columns. Many consider wide-column stores to be two-dimensional key-value databases. Wide-column stores are great for when you need to store large amounts of data and you can predict what your query patterns will be. Wide-column stores are commonly used for storing Internet of Things data and user profile data. Cassandra and HBase are two of the most popular wide-column stores.</p> </li> <li>Graph Databases: These databases store data in nodes and edges. Nodes typically store information about people, places, and things while edges store information about the relationships between the nodes. The underlying storage mechanism of graph databases can vary. Some depend on a relational engine and \u201cstore\u201d the graph data in a table (although a table is a logical element, therefore this approach imposes another level of abstraction between the graph database, the graph database management system and the physical devices where the data is actually stored). Others use a key-value store or document-oriented database for storage, making them inherently NoSQL structures. Graph databases excel in use cases where you need to traverse relationships to look for patterns such as social networks, fraud detection, and recommendation engines. Ex: Neo4j </li> </ol>"},{"location":"level101/databases_nosql/intro/#comparison","title":"Comparison","text":"Performance     Scalability     Flexibility     Complexity     Functionality     Key Value     high     high     high     none     Variable     Document stores     high     Variable (high)     high     low     Variable (low)     Column DB     high     high     moderate     low     minimal     Graph     Variable     Variable     high     high     Graph theory"},{"location":"level101/databases_nosql/intro/#differences-between-sql-and-nosql","title":"Differences between SQL and NoSQL","text":"<p>The table below summarizes the main differences between SQL and NoSQL databases.</p> SQL Databases     NoSQL Databases     Data Storage Model     Tables with fixed rows and columns     Document: JSON documents, Key-value: key-value pairs, Wide-column: tables with rows and dynamic columns, Graph: nodes and edges     Primary Purpose     General purpose     Document: general purpose, Key-value: large amounts of data with simple lookup queries, Wide-column: large amounts of data with predictable query patterns, Graph: analyzing and traversing relationships between connected data     Schemas     Rigid     Flexible     Scaling     Vertical (scale-up with a larger server)     Horizontal (scale-out across commodity servers)     Multi-Record ACID Transactions     Supported     Most do not support multi-record ACID transactions. However, some like MongoDB do.     Joins     Typically required     Typically not required     Data to Object Mapping     Requires ORM (object-relational mapping)     Many do not require ORMs. Document DB documents map directly to data structures in most popular programming languages."},{"location":"level101/databases_nosql/intro/#advantages","title":"Advantages","text":"<ul> <li> <p>Flexible Data Models</p> <p>Most NoSQL systems feature flexible schemas. A flexible schema means you can easily modify your database schema to add or remove fields to support for evolving application requirements. This facilitates with continuous application development of new features without database operation overhead.</p> </li> <li> <p>Horizontal Scaling</p> <p>Most NoSQL systems allow you to scale horizontally, which means you can add in cheaper &amp; commodity hardware, whenever you want to scale a system. On the other hand, SQL systems generally scale Vertically (a more powerful server). NoSQL systems can also host huge datasets when compared to traditional SQL systems.</p> </li> <li> <p>Fast Queries</p> <p>NoSQL can generally be a lot faster than traditional SQL systems due to data denormalization and horizontal scaling. Most NoSQL systems also tend to store similar data together facilitating faster query responses. </p> </li> <li> <p>Developer productivity</p> <p>NoSQL systems tend to map data based on the programming data structures. As a result, developers need to perform fewer data transformations leading to increased productivity &amp; fewer bugs.</p> </li> </ul>"},{"location":"level101/databases_nosql/key_concepts/","title":"Key Concepts","text":"<p>Lets looks at some of the key concepts when we talk about NoSQL or distributed systems.</p>"},{"location":"level101/databases_nosql/key_concepts/#cap-theorem","title":"CAP Theorem","text":"<p>In a keynote titled \u201cTowards Robust Distributed Systems\u201d at ACM\u2019s PODC symposium in 2000, Eric Brewer came up with the so-called CAP-theorem which is widely adopted today by large web companies as well as in the NoSQL community. The CAP acronym stands for Consistency, Availability &amp; Partition Tolerance.</p> <ul> <li> <p>Consistency</p> <p>It refers to how consistent a system is after an execution. A distributed system is called consistent when a write made by a source is available for all readers of that shared data. Different NoSQL systems support different levels of consistency.</p> </li> <li> <p>Availability</p> <p>It refers to how a system responds to loss of functionality of different systems due to hardware and software failures. A high availability implies that a system is still available to handle operations (reads and writes) when a certain part of the system is down due to a failure or upgrade.</p> </li> <li> <p>Partition Tolerance</p> <p>It is the ability of the system to continue operations in the event of a network partition. A network partition occurs when a failure causes two or more islands of networks where the systems can\u2019t talk to each other across the islands temporarily or permanently. </p> </li> </ul> <p>Brewer alleges that one can at most choose two of these three characteristics in a shared-data system. The CAP-theorem states that a choice can only be made for two options out of consistency, availability and partition tolerance. A growing number of use cases in large scale applications tend to value reliability implying that availability &amp; redundancy are more valuable than consistency. As a result these systems struggle to meet ACID properties. They attain this by loosening on the consistency requirement,  i.e Eventual Consistency.                     </p> <p>Eventual Consistency means that all readers will see writes, as time goes on: \u201cIn a steady state, the system will eventually return the last written value\u201d. Clients therefore may face an inconsistent state of data as updates are in progress. For instance, in a replicated database updates may go to one node which replicates the latest version to all other nodes that contain a replica of the modified dataset so that the replica nodes eventually will have the latest version. </p> <p>NoSQL systems support different levels of eventual consistency models. For example:</p> <ul> <li> <p>Read Your Own Writes Consistency</p> <p>Clients will see their updates immediately after they are written. The reads can hit nodes other than the one where it was written. However, they might not see updates by other clients immediately.</p> </li> <li> <p>Session Consistency</p> <p>Clients will see the updates to their data within a session scope. This generally indicates that reads &amp; writes occur on the same server. Other clients using the same nodes will receive the same updates.</p> </li> <li> <p>Casual Consistency</p> <p>A system provides causal consistency if the following condition holds: write operations that are related by potential causality are seen by each process of the system in order. Different processes may observe concurrent writes in different orders </p> </li> </ul> <p>Eventual consistency is useful if concurrent updates of the same partitions of data are unlikely and if clients do not immediately depend on reading updates issued by themselves or by other clients.</p> <p>Depending on what consistency model was chosen for the system (or parts of it), determines where the requests are routed, ex: replicas. </p> <p>CAP alternatives illustration</p> Choice     Traits     Examples     Consistency + Availability <p> (Forfeit Partitions)     2-phase commits <p> Cache invalidation protocols     Single-site databases Cluster databases  <p> LDAP <p> xFS file system      Consistency + Partition tolerance <p>  (Forfeit Availability)     Pessimistic locking <p> Make minority partitions unavailable     Distributed databases Distributed locking Majority protocols     Availability + Partition tolerance (Forfeit Consistency)     expirations/leases  <p> conflict resolution optimistic     DNS <p> Web caching"},{"location":"level101/databases_nosql/key_concepts/#versioning-of-data-in-distributed-systems","title":"Versioning of Data in distributed systems","text":"<p>When data is distributed across nodes, it can be modified on different nodes at the same time (assuming strict consistency is enforced). Questions arise on conflict resolution for concurrent updates. Some of the popular conflict resolution mechanism are</p> <ul> <li> <p>Timestamps</p> <p>This is the most obvious solution. You sort updates based on chronological order and choose the latest update. However, this relies on clock synchronization across different parts of the infrastructure. This gets even more complicated when parts of systems are spread across different geographic locations. </p> </li> <li> <p>Optimistic Locking</p> <p>You associate a unique value like a clock or counter with every data update. When a client wants to update data, it has to specify which version of data needs to be updated. This would mean you need to keep track of history of the data versions. </p> </li> <li> <p>Vector Clocks</p> <p>A vector clock is defined as a tuple of clock values from each node. In a distributed environment, each node maintains a tuple of such clock values which represent the state of the nodes itself and its peers/replicas. A clock value may be real timestamps derived from local clock or version no.  </p> </li> </ul> <p> </p> <p></p> <p>Vector clocks illustration</p> <p>Vector clocks have the following advantages over other conflict resolution mechanism:</p> <ol> <li>No dependency on synchronized clocks</li> <li>No total ordering of revision nos required for casual reasoning </li> </ol> <p>No need to store and maintain multiple versions of the data on different nodes.**     **</p>"},{"location":"level101/databases_nosql/key_concepts/#partitioning","title":"Partitioning","text":"<p>When the amount of data crosses the capacity of a single node, we need to think of splitting data, creating replicas for load balancing &amp; disaster recovery. Depending on how dynamic the infrastructure is, we have a few approaches that we can take.</p> <ol> <li> <p>Memory cached</p> <p>These are partitioned in-memory databases that are primarily used for transient data. These databases are generally used as a front for traditional RDBMS. Most frequently used data is replicated from a RDBMS into a memory database to facilitate fast queries and to take the load off from backend DB\u2019s. A very common example is Memcached or Couchbase. </p> </li> <li> <p>Clustering</p> <p>Traditional cluster mechanisms abstract away the cluster topology from clients. A client need not know where the actual data is residing and which node it is talking to. Clustering is very commonly used in traditional RDBMS where it can help scaling the persistent layer to a certain extent. </p> </li> <li> <p>Separating reads from writes</p> <p>In this method, you will have multiple replicas hosting the same data. The incoming writes are typically sent to a single node (Leader) or multiple nodes (multi-Leader), while the rest of the replicas (Follower) handle reads requests. The leader replicates writes asynchronously to all followers. However, the write lag can\u2019t be completely avoided. Sometimes a leader can crash before it replicates all the data to a follower. When this happens, a follower with the most consistent data can be turned into a leader. As you can realize now, it is hard to enforce full consistency in this model. You also need to consider the ratio of read vs write traffic. This model won\u2019t make sense when writes are higher than reads. The replication methods can also vary widely. Some systems do a complete transfer of state periodically, while others use a delta state transfer approach. You could also transfer the state by transferring the operations in order. The followers can then apply the same operations as the leader to catch up.</p> </li> <li> <p>Sharding</p> <p>Sharing refers to dividing data in such a way that data is distributed evenly (both in terms of storage &amp; processing power) across a cluster of nodes. It can also imply data locality, which means similar &amp; related data is stored together to facilitate faster access. A shard in turn can be further replicated to meet load balancing or disaster recovery requirements. A single shard replica might take in all writes (single leader) or multiple replicas can take writes (multi-leader). Reads can be distributed across multiple replicas. Since data is now distributed across multiple nodes, clients should be able to consistently figure out where data is hosted. We will look at some of the common techniques below. The downside of sharding is that joins between shards is not possible. So an upstream/downstream application has to aggregate the results from multiple shards.</p> </li> </ol> <p></p> <p></p> <p>Sharding example </p>"},{"location":"level101/databases_nosql/key_concepts/#hashing","title":"Hashing","text":"<p>A hash function is a function that maps one piece of data\u2014typically describing some kind of object, often of arbitrary size\u2014to another piece of data, typically an integer, known as hash code, or simply hash. In a partitioned database, it is important to consistently map a key to a server/replica. </p> <p>For ex: you can use a very simple hash as a modulo function.</p> <pre><code>_p = k mod n_\n</code></pre> <p>Where </p> <pre><code>p -&gt; partition,\n\n\nk -&gt; primary key\n\n\nn -&gt; no of nodes\n</code></pre> <p>The downside of this simple hash is that, whenever the cluster topology changes, the data distribution also changes. When you are dealing with memory caches, it will be easy to distribute partitions around. Whenever a node joins/leaves a topology, partitions can reorder themselves, a cache miss can be re-populated from backend DB. However, when you look at persistent data, it is not possible as the new node doesn\u2019t have the data needed to serve it. This brings us to consistent hashing.</p>"},{"location":"level101/databases_nosql/key_concepts/#consistent-hashing","title":"Consistent Hashing","text":"<p>Consistent hashing is a distributed hashing scheme that operates independently of the number of servers or objects in a distributed hash table by assigning them a position on an abstract circle, or hash ring. This allows servers and objects to scale without affecting the overall system.</p> <p>Say that our hash function h() generates a 32-bit integer. Then, to determine to which server we will send a key k, we find the server s whose hash h(s) is the smallest integer that is larger than h(k). To make the process simpler, we assume the table is circular, which means that if we cannot find a server with a hash larger than h(k), we wrap around and start looking from the beginning of the array.</p> <p> </p> <p></p> <p>Consistent hashing illustration</p> <p>In consistent hashing, when a server is removed or added, then only the keys from that server are relocated. For example, if server S<sub>3</sub> is removed then, all keys from server S<sub>3</sub> will be moved to server S<sub>4</sub> but keys stored on server S<sub>4</sub> and S<sub>2</sub> are not relocated. But there is one problem, when server S<sub>3</sub> is removed then keys from S<sub>3</sub> are not equally distributed among remaining servers S<sub>4</sub> and S<sub>2</sub>. They are only assigned to server S<sub>4</sub> which increases the load on server S<sub>4</sub>.</p> <p>To evenly distribute the load among servers when a server is added or removed, it creates a fixed number of replicas (known as virtual nodes) of each server and distributes it along the circle. So instead of server labels S<sub>1</sub>, S<sub>2</sub> and S<sub>3</sub>, we will have S<sub>10</sub>,S<sub>11</sub>,\u2026,S<sub>19</sub>, S<sub>20</sub>,S<sub>21</sub>,\u2026,S<sub>29</sub> and S<sub>30</sub>,S<sub>31</sub>,\u2026,S<sub>39</sub>. The factor for a number of replicas is also known as weight, depending on the situation.</p> <p>All keys which are mapped to replicas S<sub>ij</sub> are stored on server S<sub>i</sub>. To find a key, we do the same thing, find the position of the key on the circle and then move forward until you find a server replica. If the server replica is S<sub>ij</sub>, then the key is stored in server S<sub>i</sub>.</p> <p>Suppose server S<sub>3</sub> is removed, then all S<sub>3</sub> replicas with labels S<sub>30</sub>,S<sub>31</sub>,\u2026,S<sub>39</sub> must be removed. Now, the objects keys adjacent to S<sub>3X</sub> labels will be automatically re-assigned to S<sub>1X</sub>, S<sub>2X</sub> and S<sub>4X</sub>. All keys originally assigned to S<sub>1</sub>, S<sub>2</sub> &amp; S<sub>4</sub> will not be moved.   </p> <p>Similar things happen if we add a server. Suppose we want to add a server S<sub>5</sub> as a replacement of S<sub>3</sub>, then we need to add labels S<sub>50</sub>,S<sub>51</sub>,\u2026,S<sub>59</sub>. In the ideal case, one-fourth of keys from S<sub>1</sub>, S<sub>2</sub> and S<sub>4</sub> will be reassigned to S<sub>5</sub>.</p> <p>When applied to persistent storages, further issues arise: if a node has left the scene, data stored on this node becomes unavailable, unless it has been replicated to other nodes before; in the opposite case of a new node joining the others, adjacent nodes are no longer responsible for some pieces of data which they still store but not get asked for anymore as the corresponding objects are no longer hashed to them by requesting clients. In order to address this issue, a replication factor (r) can be introduced.         </p> <p>Introducing replicas in a partitioning scheme\u2014besides reliability benefits\u2014also makes it possible to spread workload for read requests that can go to any physical node responsible for a requested piece of data. Scalability doesn\u2019t work if the clients have to decide between multiple versions of the dataset, because they need to read from a quorum of servers which in turn reduces the efficiency of load balancing. </p>"},{"location":"level101/databases_nosql/key_concepts/#quorum","title":"Quorum","text":"<p>Quorum is the minimum number of nodes in a cluster that must be online and be able to communicate with each other. If any additional node failure occurs beyond this threshold, the cluster will stop running.</p> <p>To attain a quorum, you need a majority of the nodes. Commonly, it is (N/2 + 1), where N is the total no of nodes in the system. For example, </p> <ul> <li> <p>In a 3-node cluster, you need 2 nodes for a majority.</p> </li> <li> <p>In a 5-node cluster, you need 3 nodes for a majority.</p> </li> <li> <p>In a 6-node cluster, you need 4 nodes for a majority. </p> </li> </ul> <p> </p> <p></p> <p> Quorum example </p> <p>Network problems can cause communication failures among cluster nodes. One set of nodes might be able to communicate together across a functioning part of a network but not be able to communicate with a different set of nodes in another part of the network. This is known as split brain in cluster or cluster partitioning.</p> <p>Now the partition which has quorum is allowed to continue running the application. The other partitions are removed from the cluster.</p> <p>Eg: In a 5-node cluster, consider what happens if nodes 1, 2, and 3 can communicate with each other but not with nodes 4 and 5. Nodes 1, 2, and 3 constitute a majority, and they continue running as a cluster. Nodes 4 and 5, being a minority, stop running as a cluster. If node 3 loses communication with other nodes, all nodes stop running as a cluster. However, all functioning nodes will continue to listen for communication, so that when the network begins working again, the cluster can form and begin to run.</p> <p>Below diagram demonstrates Quorum selection on a cluster partitioned into two sets.</p> <p> </p> <p></p> <p><p>Cluster Quorum example</p></p>"},{"location":"level101/databases_sql/backup_recovery/","title":"Backup and Recovery","text":""},{"location":"level101/databases_sql/backup_recovery/#backup-and-recovery","title":"Backup and Recovery","text":"<p>Backups are a very crucial part of any database setup. They are generally a copy of the data that can be used to reconstruct the data in case of any major or minor crisis with the database. In general terms, backups can be of two types:</p> <ul> <li>Physical Backup - the data directory as it is on the disk</li> <li>Logical Backup - the table structure and records in it</li> </ul> <p>Both the above kinds of backups are supported by MySQL with different tools. It is the job of the SRE to identify which should be used when.</p>"},{"location":"level101/databases_sql/backup_recovery/#mysqldump","title":"Mysqldump","text":"<p>This utility is available with MySQL installation. It helps in getting the logical backup of the database. It outputs a set of SQL statements to reconstruct the data. It is not recommended to use <code>mysqldump</code> for large tables as it might take a lot of time and the file size will be huge. However, for small tables it is the best and the quickest option.</p> <pre><code>mysqldump [options] &gt; dump_output.sql\n</code></pre> <p>There are certain options that can be used with <code>mysqldump</code> to get an appropriate dump of the database.</p> <p>To dump all the databases:</p> <pre><code>mysqldump -u&lt;user&gt; -p&lt;pwd&gt; --all-databases &gt; all_dbs.sql\n</code></pre> <p>To dump specific databases:</p> <pre><code>mysqldump -u&lt;user&gt; -p&lt;pwd&gt; --databases db1 db2 db3 &gt; dbs.sql\n</code></pre> <p>To dump a single database:</p> <pre><code>mysqldump -u&lt;user&gt; -p&lt;pwd&gt; --databases db1 &gt; db1.sql\n</code></pre> <p>OR</p> <pre><code>mysqldump -u&lt;user&gt; -p&lt;pwd&gt; db1 &gt; db1.sql\n</code></pre> <p>The difference between the above two commands is that the latter one does not contain the <code>CREATE DATABASE</code> command in the backup output. </p> <p>To dump specific tables in a database:</p> <pre><code>mysqldump -u&lt;user&gt; -p&lt;pwd&gt; db1 table1 table2 &gt; db1_tables.sql\n</code></pre> <p>To dump only table structures and no data:</p> <pre><code>mysqldump -u&lt;user&gt; -p&lt;pwd&gt; --no-data db1 &gt; db1_structure.sql\n</code></pre> <p>To dump only table data and no <code>CREATE</code> statements:</p> <pre><code>mysqldump -u&lt;user&gt; -p&lt;pwd&gt; --no-create-info db1 &gt; db1_data.sql\n</code></pre> <p>To dump only specific records from a table:</p> <pre><code>mysqldump -u&lt;user&gt; -p&lt;pwd&gt; --no-create-info db1 table1 --where=\u201dsalary&gt;80000\u201d &gt; db1_table1_80000.sql\n</code></pre> <p><code>mysqldump</code> can also provide output in CSV, other delimited text or XML format to support use-cases if any. The backup from <code>mysqldump</code> utility is offline, i.e. when the backup finishes it will not have the changes to the database which were made when the backup was going on. For example, if the backup started at 3:00 pm and finished at 4:00 pm, it will not have the changes made to the database between 3:00 and 4:00 pm.</p> <p>Restoring from <code>mysqldump</code> can be done in the following two ways:</p> <p>From shell</p> <pre><code>mysql -u&lt;user&gt; -p&lt;pwd&gt; &lt; all_dbs.sql\n</code></pre> <p>OR</p> <p>From shell, if the database is already created:</p> <pre><code>mysql -u&lt;user&gt; -p&lt;pwd&gt; db1 &lt; db1.sql\n</code></pre> <p>From within MySQL shell:</p> <pre><code>mysql&gt; source all_dbs.sql\n</code></pre>"},{"location":"level101/databases_sql/backup_recovery/#percona-xtrabackup","title":"Percona XtraBackup","text":"<p>This utility is installed separately from the MySQL server and is open source, provided by Percona. It helps in getting the full or partial physical backup of the database. It provides online backup of the database, i.e. it will have the changes made to the database when the backup was going on as explained at the end of the previous section.</p> <ul> <li>Full Backup - the complete backup of the database. </li> <li>Partial Backup - Incremental </li> <li>Cumulative - After one full backup, the next backups will have changes post the full backup. For example, we took a full backup on Sunday, from Monday onwards every backup will have changes after Sunday; so, Tuesday\u2019s backup will have Monday\u2019s changes as well, Wednesday\u2019s backup will have changes of Monday and Tuesday as well and so on.</li> <li>Differential - After one full backup, the next backups will have changes post the previous incremental backup. For example, we took a full backup on Sunday, Monday will have changes done after Sunday, Tuesday will have changes done after Monday, and so on.</li> </ul> <p></p> <p>Percona XtraBackup allows us to get both full and incremental backups as we desire. However, incremental backups take less space than a full backup (if taken per day) but the restore time of incremental backups is more than that of full backups.</p> <p>Creating a full backup</p> <pre><code>xtrabackup --defaults-file=&lt;location to my.cnf&gt; --user=&lt;mysql user&gt; --password=&lt;mysql password&gt; --backup --target-dir=&lt;location of target directory&gt;\n</code></pre> <p>Example:</p> <pre><code>xtrabackup --defaults-file=/etc/my.cnf --user=some_user --password=XXXX --backup --target-dir=/mnt/data/backup/\n</code></pre> <p>Some other options</p> <ul> <li><code>--stream</code> - can be used to stream the backup files to standard output in a specified format. <code>xbstream</code> is the only option for now.</li> <li><code>--tmp-dir</code> - set this to a <code>tmp</code> directory to be used for temporary files while taking backups.</li> <li><code>--parallel</code> - set this to the number of threads that can be used to parallely copy data files to target directory.</li> <li><code>--compress</code> - by default - <code>quicklz</code> is used. Set this to have the backup in compressed format. Each file is a <code>.qp</code> compressed file and can be extracted by <code>qpress</code> file archiver.</li> <li><code>--decompress</code> - decompresses all the files which were compressed with the <code>.qp</code> extension. It will not delete the <code>.qp</code> files after decompression. To do that, use <code>--remove-original</code> along with this. Please note that the <code>decompress</code> option should be run separately from the <code>xtrabackup</code> command that used the compress option.</li> </ul> <p>Preparing a backup</p> <p>Once the backup is done with the <code>--backup</code> option, we need to prepare it in order to restore it. This is done to make the data files consistent with point-in-time. There might have been some transactions going on while the backup was being executed and those have changed the data files. When we prepare a backup, all those transactions are applied to the data files.</p> <pre><code>xtrabackup --prepare --target-dir=&lt;where backup is taken&gt;\n</code></pre> <p>Example:</p> <pre><code>xtrabackup --prepare --target-dir=/mnt/data/backup/\n</code></pre> <p>It is not recommended to halt a process which is preparing the backup as that might cause data file corruption and backup cannot be used further. The backup will have to be taken again.</p> <p>Restoring a Full Backup</p> <p>To restore the backup which is created and prepared from above commands, just copy everything from the backup <code>target-dir</code> to the <code>data-dir</code> of MySQL server, change the ownership of all files to MySQL user (the Linux user used by MySQL server) and start MySQL.</p> <p>Or the below command can be used as well,</p> <pre><code>xtrabackup --defaults-file=/etc/my.cnf --copy-back --target-dir=/mnt/data/backups/\n</code></pre> <p>Note - the backup has to be prepared in order to restore it.</p> <p>Creating Incremental backups</p> <p>Percona XtraBackup helps create incremental backups, i.e, only the changes can be backed up since the last backup. Every InnoDB page contains a log sequence number or LSN that is also mentioned as one of the last lines of backup and prepare commands.</p> <pre><code>xtrabackup: Transaction log of lsn &lt;LSN&gt; to &lt;LSN&gt; was copied.\n</code></pre> <p>OR</p> <pre><code>InnoDB: Shutdown completed; log sequence number &lt;LSN&gt;\n&lt;timestamp&gt; completed OK!\n</code></pre> <p>This indicates that the backup has been taken till the log sequence number mentioned. This is a key information in understanding incremental backups and working towards automating one. Incremental backups do not compare data files for changes, instead, they go through the InnoDB pages and compare their LSN to the last backup\u2019s LSN. So, without one full backup, the incremental backups are useless.</p> <p>The <code>xtrabackup</code> command creates a <code>xtrabackup_checkpoint</code> file which has the information about the LSN of the backup. Below are the key contents of the file:</p> <pre><code>backup_type = full-backuped | incremental\nfrom_lsn = 0 (full backup) | to_lsn of last backup &lt;LSN&gt;\nto_lsn = &lt;LSN&gt;\nlast_lsn = &lt;LSN&gt;\n</code></pre> <p>There is a difference between <code>to_lsn</code> and <code>last_lsn</code>. When the <code>last_lsn</code> is more than <code>to_lsn</code> that means there are transactions that ran while we took the backup and are yet to be applied. That is what <code>--prepare</code> is used for.</p> <p>To take incremental backups, first, we require one full backup.</p> <pre><code>xtrabackup --defaults-file=/etc/my.cnf --user=some_user --password=XXXX --backup --target-dir=/mnt/data/backup/full/\n</code></pre> <p>Let\u2019s assume the contents of the <code>xtrabackup_checkpoint</code> file to be as follows:</p> <pre><code>backup_type = full-backuped\nfrom_lsn = 0\nto_lsn = 1000\nlast_lsn = 1000\n</code></pre> <p>Now that we have one full backup, we can have an incremental backup that takes the changes. We will go with differential incremental backups.</p> <pre><code>xtrabackup --defaults-file=/etc/my.cnf --user=some_user --password=XXXX --backup --target-dir=/mnt/data/backup/incr1/ --incremental-basedir=/mnt/data/backup/full/\n</code></pre> <p>There are delta files created in the <code>incr1</code> directory like, <code>ibdata1.delta</code>, <code>db1/tbl1.ibd.delta</code> with the changes from the full directory. The <code>xtrabackup_checkpoint</code> file will thus have the following contents.</p> <pre><code>backup_type = incremental\nfrom_lsn = 1000\nto_lsn = 1500\nlast_lsn = 1500\n</code></pre> <p>Hence, the <code>from_lsn</code> here is equal to the <code>to_lsn</code> of the last backup or the <code>basedir</code> provided for the incremental backups. For the next incremental backup, we can use this incremental backup as the <code>basedir</code>.</p> <pre><code>xtrabackup --defaults-file=/etc/my.cnf --user=some_user --password=XXXX --backup --target-dir=/mnt/data/backup/incr2/ --incremental-basedir=/mnt/data/backup/incr1/\n</code></pre> <p>The <code>xtrabackup_checkpoint</code> file will thus have the following contents:</p> <pre><code>backup_type = incremental\nfrom_lsn = 1500\nto_lsn = 2000\nlast_lsn = 2200\n</code></pre> <p>Preparing Incremental backups</p> <p>Preparing incremental backups is not the same as preparing a full backup. When prepare runs, two operations are performed - committed transactions are applied on the data files and uncommitted transactions are rolled back. While preparing incremental backups, we have to skip rollback of uncommitted transactions as it is likely that they might get committed in the next incremental backup. If we rollback uncommitted transactions, the further incremental backups cannot be applied.</p> <p>We use <code>--apply-log-only</code> option along with <code>--prepare</code> to avoid the rollback phase. </p> <p>From the last section, we had the following directories with complete backup:</p> <pre><code>/mnt/data/backup/full\n/mnt/data/backup/incr1\n/mnt/data/backup/incr2\n</code></pre> <p>First, we prepare the full backup, but only with the <code>--apply-log-only</code> option.</p> <pre><code>xtrabackup --prepare --apply-log-only --target-dir=/mnt/data/backup/full\n</code></pre> <p>The output of the command will contain the following at the end.</p> <pre><code>InnoDB: Shutdown complete; log sequence number 1000\n&lt;timestamp&gt; Completed OK!\n</code></pre> <p>Note the LSN mentioned at the end is the same as the <code>to_lsn</code> from the <code>xtrabackup_checkpoint</code> created for full backup.</p> <p>Next, we apply the changes from the first incremental backup to the full backup.</p> <pre><code>xtrabackup --prepare --apply-log-only --target-dir=/mnt/data/backup/full --incremental-dir=/mnt/data/backup/incr1\n</code></pre> <p>This applies the delta files in the incremental directory to the full backup directory. It rolls the data files in the full backup directory forward to the time of incremental backup and applies the redo logs as usual.</p> <p>Lastly, we apply the last incremental backup same as the previous one with just a small change.</p> <pre><code>xtrabackup --prepare --target-dir=/mnt/data/backup/full --incremental-dir=/mnt/data/backup/incr1\n</code></pre> <p>We do not have to use the <code>--apply-log-only</code> option with it. It applies the incr2 delta files to the full backup data files taking them forward, applies redo logs on them and finally rollbacks the uncommitted transactions to produce the final result. The data now present in the full backup directory can now be used to restore.</p> <p>Note: To create cumulative incremental backups, the <code>incremental-basedir</code> should always be the full backup directory for every incremental backup. While preparing, we can start with the full backup with the <code>--apply-log-only</code> option and use just the last incremental backup for the final <code>--prepare</code> as that has all the changes since the full backup. </p> <p>Restoring Incremental backups</p> <p>Once all the above steps are completed, restoring is the same as done for a full backup.</p>"},{"location":"level101/databases_sql/backup_recovery/#further-reading","title":"Further Reading","text":"<ul> <li>MySQL Point-In-Time-Recovery</li> <li>Another MySQL backup tool - mysqlpump</li> <li>Another MySQL backup tool - mydumper</li> <li>A comparison between mysqldump, mysqlpump and mydumper</li> <li>Backup Best Practices</li> </ul>"},{"location":"level101/databases_sql/concepts/","title":"Key Concepts","text":"<ul> <li>Relational DBs are used for data storage. Even a file can be used to store data, but relational DBs are designed with specific goals:<ul> <li>Efficiency</li> <li>Ease of access and management</li> <li>Organized</li> <li>Handle relations between data (represented as tables)</li> </ul> </li> <li>Transaction: a unit of work that can comprise multiple statements, executed together</li> <li> <p>ACID properties</p> <p>Set of properties that guarantee data integrity of DB transactions</p> <ul> <li>Atomicity: Each transaction is atomic (succeeds or fails completely)</li> <li>Consistency: Transactions only result in valid state (which includes rules, constraints, triggers etc.)</li> <li>Isolation: Each transaction is executed independently of others safely within a concurrent system</li> <li>Durability: Completed transactions will not be lost due to any later failures</li> </ul> <p>Let\u2019s take some examples to illustrate the above properties.</p> <ul> <li>Account A has a balance of \u20b9200 &amp; B has \u20b9400. Account A is transferring \u20b9100 to Account B. This transaction has a deduction from sender and an addition into the recipient\u2019s balance. If the first operation passes successfully while the second fails, A\u2019s balance would be \u20b9100 while B would be having \u20b9400 instead of \u20b9500. Atomicity in a DB ensures this partially failed transaction is rolled back.</li> <li>If the second operation above fails, it leaves the DB inconsistent (sum of balance of accounts before and after the operation is not the same). Consistency ensures that this does not happen.</li> <li>There are three operations, one to calculate interest for A\u2019s account,  another to add that to A\u2019s account, then transfer \u20b9100 from B to A. Without isolation guarantees, concurrent execution of these 3 operations may lead to a different outcome every time.</li> <li>What happens if the system crashes before the transactions are written to disk? Durability ensures that the changes are applied correctly during recovery.</li> <li>Relational data</li> <li>Tables represent relations</li> <li>Columns (fields) represent attributes</li> <li>Rows are individual records</li> <li>Schema describes the structure of DB</li> <li>SQL</li> </ul> <p>A query language to interact with and manage data.</p> <p>CRUD operations\u2014create, read, update, delete queries</p> <p>Management operations\u2014create DBs/tables/indexes, backup, import/export, users, access controls, etc</p> <p>Exercise: Classify the below queries into the four types\u2014DDL (definition), DML (manipulation), DCL (control) and TCL (transactions) and explain in detail.</p> <pre><code>insert, create, drop, delete, update, commit, rollback, truncate, alter, grant, revoke\n</code></pre> <p>You can practise these in the lab section.</p> </li> <li> <p>Constraints</p> <p>Rules for data that can be stored. Query fails if you violate any of these defined on a table.</p> <p>Primary key: One or more columns that contain UNIQUE values, and cannot contain NULL values. A table can have only ONE primary key. An index on it is created by default.</p> <p>Foreign key: Links two tables together. Its value(s) match a primary key in a different table</p> <p>Not null: Does not allow null values</p> <p>Unique: Value of column must be unique across all rows</p> <p>Default: Provides a default value for a column if none is specified during insert</p> <p>Check: Allows only particular values (like Balance &gt;= 0)</p> </li> <li> <p>Indexes</p> <p>Most indexes use B+ tree structure.</p> <p>Why use them: Speeds up queries (in large tables that fetch only a few rows, min/max queries, by eliminating rows from consideration, etc)</p> <p>Types of indexes: unique, primary key, fulltext, secondary</p> <p>Write-heavy loads, mostly full table scans or accessing large number of rows, etc. do not benefit from indexes</p> </li> <li> <p>Joins</p> <p>Allows you to fetch related data from multiple tables, linking them together with some common field. Powerful but also resource-intensive and makes scaling databases difficult. This is the cause of many slow performing queries when run at scale, and the solution is almost always to find ways to reduce the joins.</p> </li> <li> <p>Access control</p> <p>DBs have privileged accounts for admin tasks, and regular accounts for clients. There are fine-grained controls on what actions (DDL, DML, etc. discussed earlier) are allowed for these accounts.</p> <p>DB first verifies the user credentials (authentication), and then examines whether this user is permitted to perform the request (authorization) by looking up these information in some internal tables.</p> <p>Other controls include activity auditing that allows examining the history of actions done by a user, and resource limits which define the number of queries, connections, etc. allowed.</p> </li> </ul>"},{"location":"level101/databases_sql/concepts/#popular-databases","title":"Popular databases","text":"<p>Commercial, closed source: Oracle, Microsoft SQL Server, IBM DB2</p> <p>Open source with optional paid support: MySQL, MariaDB, PostgreSQL</p> <p>Individuals and small companies have always preferred open source DBs because of the huge cost associated with commercial software.</p> <p>In recent times, even large organizations have moved away from commercial software to open source alternatives because of the flexibility and cost savings associated with it.</p> <p>Lack of support is no longer a concern because of the paid support available from the developer and third parties.</p> <p>MySQL is the most widely used open source DB, and it is widely supported by hosting providers, making it easy for anyone to use. It is part of the popular Linux-Apache-MySQL-PHP (LAMP) stack that became popular in the 2000s. We have many more choices for a programming language, but the rest of that stack is still widely used.</p>"},{"location":"level101/databases_sql/conclusion/","title":"Conclusion","text":"<p>We have covered basic concepts of SQL databases. We have also covered some of the tasks that an SRE may be responsible for\u2014there is so much more to learn and do. We hope this course gives you a good start and inspires you to explore further.</p>"},{"location":"level101/databases_sql/conclusion/#further-reading","title":"Further reading","text":"<ul> <li>More practice with online resources like this one</li> <li>Normalization</li> <li>Routines, triggers</li> <li>Views</li> <li>Transaction isolation levels</li> <li>Sharding</li> <li>Setting up HA, monitoring, backups</li> </ul>"},{"location":"level101/databases_sql/innodb/","title":"InnoDB","text":""},{"location":"level101/databases_sql/innodb/#why-should-you-use-this","title":"Why should you use this?","text":"<p>General purpose, row level locking, ACID support, transactions, crash recovery and multi-version concurrency control, etc.</p>"},{"location":"level101/databases_sql/innodb/#architecture","title":"Architecture","text":""},{"location":"level101/databases_sql/innodb/#key-components","title":"Key components:","text":"<ul> <li> <p>Memory:</p> <ul> <li>Buffer pool: LRU cache of frequently used data (table and index) to be processed directly from memory, which speeds up processing. Important for tuning performance.</li> <li>Change buffer: Caches changes to secondary index pages when those pages are not in the buffer pool and merges it when they are fetched. Merging may take a long time and impact live queries. It also takes up part of the buffer pool. Avoids the extra I/O to read secondary indexes in.</li> <li>Adaptive hash index: Supplements InnoDB\u2019s B-Tree indexes with fast hash lookup tables like a cache. Slight performance penalty for misses, also adds maintenance overhead of updating it. Hash collisions cause AHI rebuilding for large DBs.</li> <li> <p>Log buffer: Holds log data before flush to disk.</p> <p>Size of each above memory is configurable, and impacts performance a lot. Requires careful analysis of workload, available resources, benchmarking and tuning for optimal performance.</p> </li> </ul> </li> <li> <p>Disk:</p> <ul> <li>Tables: Stores data within rows and columns.</li> <li>Indexes: Helps find rows with specific column values quickly, avoids full table scans.</li> <li>Redo Logs: all transactions are written to them, and after a crash, the recovery process corrects data written by incomplete transactions and replays any pending ones.</li> <li>Undo Logs: Records associated with a single transaction that contains information about how to undo the latest change by a transaction.</li> </ul> </li> </ul>"},{"location":"level101/databases_sql/intro/","title":"Relational Databases","text":""},{"location":"level101/databases_sql/intro/#prerequisites","title":"Prerequisites","text":"<ul> <li>Complete Linux course</li> <li>Install Docker (for lab section)</li> </ul>"},{"location":"level101/databases_sql/intro/#what-to-expect-from-this-course","title":"What to expect from this course","text":"<p>You will have an understanding of what relational databases are, their advantages, and some MySQL specific concepts.</p>"},{"location":"level101/databases_sql/intro/#what-is-not-covered-under-this-course","title":"What is not covered under this course","text":"<ul> <li> <p>In-depth implementation details</p> </li> <li> <p>Advanced topics like normalization, sharding</p> </li> <li> <p>Specific tools for administration</p> </li> </ul>"},{"location":"level101/databases_sql/intro/#introduction","title":"Introduction","text":"<p>The main purpose of database systems is to manage data. This includes storage, adding new data, deleting unused data, updating existing data, retrieving data within a reasonable response time, other maintenance tasks to keep the system running, etc.</p>"},{"location":"level101/databases_sql/intro/#pre-reads","title":"Pre-reads","text":"<p>RDBMS Concepts</p>"},{"location":"level101/databases_sql/intro/#course-contents","title":"Course Contents","text":"<ul> <li>Key Concepts</li> <li>MySQL Architecture</li> <li>InnoDB</li> <li>Backup and Recovery</li> <li>MySQL Replication</li> <li>Operational Concepts<ul> <li>SELECT Query</li> <li>Query Performance</li> </ul> </li> <li>Lab</li> <li>Further Reading</li> </ul>"},{"location":"level101/databases_sql/lab/","title":"Lab","text":"<p>Prerequisites</p> <p>Install Docker</p> <p>Setup</p> <p>Create a working directory named <code>sos</code> or something similar, and <code>cd</code> into it.</p> <p>Enter the following into a file named <code>my.cnf</code> under a directory named <code>custom</code>:</p> <pre><code>sos $ cat custom/my.cnf\n[mysqld]\n\n# These settings apply to MySQL server\n# You can set port, socket path, buffer size etc.\n# Below, we are configuring slow query settings\n\nslow_query_log=1\nslow_query_log_file=/var/log/mysqlslow.log\nlong_query_time=1\n</code></pre> <p>Start a container and enable slow query log with the following:</p> <pre><code>sos $ docker run --name db -v custom:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=realsecret -d mysql:8\nsos $ docker cp custom/my.cnf $(docker ps -qf \"name=db\"):/etc/mysql/conf.d/custom.cnf\nsos $ docker restart $(docker ps -qf \"name=db\")\n</code></pre> <p>Import a sample database:</p> <pre><code>sos $ git clone git@github.com:datacharmer/test_db.git\nsos $ docker cp test_db $(docker ps -qf \"name=db\"):/home/test_db/\nsos $ docker exec -it $(docker ps -qf \"name=db\") bash\nroot@3ab5b18b0c7d:/# cd /home/test_db/\nroot@3ab5b18b0c7d:/# mysql -uroot -prealsecret mysql &lt; employees.sql\nroot@3ab5b18b0c7d:/etc# touch /var/log/mysqlslow.log\nroot@3ab5b18b0c7d:/etc# chown mysql:mysql /var/log/mysqlslow.log\n</code></pre> <p>Workshop 1: Run some sample queries</p> <p>Run the following:</p> <pre><code>$ mysql -uroot -prealsecret mysql\nmysql&gt;\n\n# inspect DBs and tables\n# the last 4 are MySQL internal DBs\n\nmysql&gt; SHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| employees          |\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n\nmysql&gt; USE employees;\nmysql&gt; SHOW TABLES;\n+----------------------+\n| Tables_in_employees  |\n+----------------------+\n| current_dept_emp     |\n| departments          |\n| dept_emp             |\n| dept_emp_latest_date |\n| dept_manager         |\n| employees            |\n| salaries             |\n| titles               |\n+----------------------+\n\n# read a few rows\nmysql&gt; SELECT * FROM employees LIMIT 5;\n\n# filter data by conditions\nmysql&gt; SELECT COUNT(*) FROM employees WHERE gender = 'M' LIMIT 5;\n\n# find count of particular data\nmysql&gt; SELECT COUNT(*) FROM employees WHERE first_name = 'Sachin'; \n</code></pre> <p>Workshop 2: Use explain and explain analyze to profile a query, identify and add indexes required for improving performance</p> <pre><code># View all indexes on table \n# (\\G is to output horizontally, replace it with a ; to get table output)\n\nmysql&gt; SHOW INDEX FROM employees FROM employees\\G\n*************************** 1. row ***************************\n        Table: employees\n   Non_unique: 0\n     Key_name: PRIMARY\n Seq_in_index: 1\n  Column_name: emp_no\n    Collation: A\n  Cardinality: 299113\n     Sub_part: NULL\n       Packed: NULL\n         Null:\n   Index_type: BTREE\n      Comment:\nIndex_comment:\n      Visible: YES\n   Expression: NULL\n\n# This query uses an index, identified by 'key' field\n# By prefixing explain keyword to the command, \n# we get query plan (including key used)\n\nmysql&gt; EXPLAIN SELECT * FROM employees WHERE emp_no &lt; 10005\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: employees\n   partitions: NULL\n         type: range\npossible_keys: PRIMARY\n          key: PRIMARY\n      key_len: 4\n          ref: NULL\n         rows: 4\n     filtered: 100.00\n        Extra: Using where\n\n# Compare that to the next query which does not utilize any index\n\nmysql&gt; EXPLAIN SELECT first_name, last_name FROM employees WHERE first_name = 'Sachin'\\G\n*************************** 1. row ***************************\n           id: 1\n  select_type: SIMPLE\n        table: employees\n   partitions: NULL\n         type: ALL\npossible_keys: NULL\n          key: NULL\n      key_len: NULL\n          ref: NULL\n         rows: 299113\n     filtered: 10.00\n        Extra: Using where\n\n# Let's see how much time this query takes\n\nmysql&gt; EXPLAIN ANALYZE SELECT first_name, last_name FROM employees WHERE first_name = 'Sachin'\\G\n*************************** 1. row ***************************\nEXPLAIN: -&gt; Filter: (employees.first_name = 'Sachin')  (cost=30143.55 rows=29911) (actual time=28.284..3952.428 rows=232 loops=1)\n    -&gt; Table scan on employees  (cost=30143.55 rows=299113) (actual time=0.095..1996.092 rows=300024 loops=1)\n\n\n# Cost (estimated by query planner) is 30143.55\n# actual time=28.284ms for first row, 3952.428 for all rows\n# Now lets try adding an index and running the query again\n\nmysql&gt; CREATE INDEX idx_firstname ON employees(first_name);\nQuery OK, 0 rows affected (1.25 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\nmysql&gt; EXPLAIN ANALYZE SELECT first_name, last_name FROM employees WHERE first_name = 'Sachin';\n+--------------------------------------------------------------------------------------------------------------------------------------------+\n| EXPLAIN                                                                                                                                    |\n+--------------------------------------------------------------------------------------------------------------------------------------------+\n| -&gt; Index lookup on employees using idx_firstname (first_name='Sachin')  (cost=81.20 rows=232) (actual time=0.551..2.934 rows=232 loops=1)\n |\n+--------------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set (0.01 sec)\n\n# Actual time=0.551ms for first row\n# 2.934ms for all rows. A huge improvement!\n# Also notice that the query involves only an index lookup,\n# and no table scan (reading all rows of the table),\n# which vastly reduces load on the DB.\n</code></pre> <p>Workshop 3: Identify slow queries on a MySQL server</p> <pre><code># Run the command below in two terminal tabs to open two shells into the container.\n\n$ docker exec -it $(docker ps -qf \"name=db\") bash\n\n# Open a `mysql` prompt in one of them and execute this command\n# We have configured to log queries that take longer than 1s,\n# so this `sleep(3)` will be logged\n\n$ mysql -uroot -prealsecret mysql\nmysql&gt; select sleep(3);\n\n# Now, in the other terminal, tail the slow log to find details about the query\n\nroot@62c92c89234d:/etc# tail -f /var/log/mysqlslow.log\n/usr/sbin/mysqld, Version: 8.0.21 (MySQL Community Server - GPL). started with:\nTcp port: 3306  Unix socket: /var/run/mysqld/mysqld.sock\nTime                 Id Command    Argument\n\n# Time: 2020-11-26T14:53:44.822348Z\n# User@Host: root[root] @ localhost []  Id:     9\n# Query_time: 5.404938  Lock_time: 0.000000 Rows_sent: 1  Rows_examined: 1\nuse employees;\n# Time: 2020-11-26T14:53:58.015736Z\n# User@Host: root[root] @ localhost []  Id:     9\n# Query_time: 10.000225  Lock_time: 0.000000 Rows_sent: 1  Rows_examined: 1\n\nSET timestamp=1606402428;\nselect sleep(3);\n</code></pre> <p>These were simulated examples with minimal complexity. In real life, the queries would be much more complex and the explain/analyze and slow query logs would have more details.</p>"},{"location":"level101/databases_sql/mysql/","title":"MySQL","text":""},{"location":"level101/databases_sql/mysql/#mysql-architecture","title":"MySQL architecture","text":"<p>MySQL architecture enables you to select the right storage engine for your needs, and abstracts away all implementation details from the end users (application engineers and DBA) who only need to know a consistent stable API.</p> <p>Application layer:</p> <ul> <li>Connection handling: each client gets its own connection which is cached for the duration of access</li> <li>Authentication: server checks (username, password, host) info of client and allows/rejects connection</li> <li>Security: server determines whether the client has privileges to execute each query (check with <code>SHOW PRIVILEGES</code> command)</li> </ul> <p>Server layer:</p> <ul> <li>Services and utilities: backup/restore, replication, cluster, etc</li> <li>SQL interface: clients run queries for data access and manipulation</li> <li>SQL parser: creates a parse tree from the query (lexical/syntactic/semantic analysis and code generation)</li> <li>Optimizer: optimizes queries using various algorithms and data available to it (table-level stats), modifies queries, order of scanning, indexes to use, etc. (check with <code>EXPLAIN</code> command)</li> <li>Caches and buffers: cache stores query results, buffer pool (InnoDB) stores table and index data in LRU fashion</li> </ul> <p>Storage engine options:</p> <ul> <li>InnoDB: most-widely used, transaction support, ACID compliant, supports row-level locking, crash recovery and multi-version concurrency control. Default since MySQL 5.5+.</li> <li>MyISAM: fast, does not support transactions, provides table-level locking, great for read-heavy workloads, mostly in web and data warehousing. Default upto MySQL 5.1.</li> <li>Archive: optimised for high speed inserts, compresses data as it is inserted, does not support transactions, ideal for storing and retrieving large amounts of seldom referenced historical, archived data</li> <li>Memory: tables in memory. Fastest engine, supports table-level locking, does not support transactions, ideal for creating temporary tables or quick lookups, data is lost after a shutdown</li> <li>CSV: stores data in CSV files, great for integrating into other applications that use this format</li> <li>\u2026 etc.</li> </ul> <p>It is possible to migrate from one storage engine to another. But this migration locks tables for all operations and is not online, as it changes the physical layout of the data. It takes a long time and is generally not recommended. Hence, choosing the right storage engine at the beginning is important.</p> <p>General guideline is to use InnoDB unless you have a specific need for one of the other storage engines.</p> <p>Running <code>mysql&gt; SHOW ENGINES;</code> shows you the supported engines on your MySQL server.</p>"},{"location":"level101/databases_sql/operations/","title":"Operational Concepts","text":"<ul> <li> <p>Explain and explain+analyze</p> <p><code>EXPLAIN &lt;query&gt;</code> analyzes query plans from the optimizer, including how tables are joined, which tables/rows are scanned, etc.</p> <p><code>EXPLAIN ANALYZE</code> shows the above and additional info like execution cost, number of rows returned, time taken, etc.</p> <p>This knowledge is useful to tweak queries and add indexes.</p> <p>Watch this performance tuning tutorial video.</p> <p>Checkout the lab section for a hands-on about indexes.</p> </li> <li> <p>Slow query logs</p> <p>Used to identify slow queries (configurable threshold), enabled in config or dynamically with a query.</p> <p>Checkout the lab section about identifying slow queries.</p> </li> <li> <p>User management</p> <p>This includes creation and changes to users, like managing privileges, changing password etc.</p> </li> <li> <p>Backup and restore strategies, pros and cons</p> <ul> <li> <p>Logical backup using <code>mysqldump</code> - slower but can be done online</p> </li> <li> <p>Physical backup (copy data directory or use XtraBackup) -  quick backup/recovery. Copying data directory requires locking or shut down. XtraBackup is an improvement because it supports backups without shutting down (hot backup).</p> </li> <li> <p>Others - PITR, snapshots etc.</p> </li> </ul> </li> <li> <p>Crash recovery process using redo logs</p> <p>After a crash, when you restart server, it reads redo logs and replays modifications to recover</p> </li> <li> <p>Monitoring MySQL</p> <ul> <li> <p>Key MySQL metrics: reads, writes, query runtime, errors, slow queries, connections, running threads, InnoDB metrics</p> </li> <li> <p>Key OS metrics: CPU, load, memory, disk I/O, network</p> </li> </ul> </li> <li> <p>Replication</p> <p>Copies data from one instance to one or more instances. Helps in horizontal scaling, data protection, analytics and performance. Binlog dump thread on primary, replication I/O and SQL threads on secondary. Strategies include the standard async, semi async or group replication.</p> </li> <li> <p>High Availability</p> <p>Ability to cope with failure at software, hardware and network level. Essential for anyone who needs 99.9%+ uptime. Can be implemented with replication or clustering solutions from MySQL, Percona, Oracle, etc. Requires expertise to setup and maintain. Failover can be manual, scripted or using tools like Orchestrator.</p> </li> <li> <p>Data directory</p> <p>Data is stored in a particular directory, with nested directories for the data contained in each database. There are also MySQL log files, InnoDB log files, server process ID file and some other configs. The data directory is configurable.</p> </li> <li> <p>MySQL configuration</p> <p>This can be done by passing parameters during startup, or in a file. There are a few standard paths where MySQL looks for config files, <code>/etc/my.cnf</code> is one of the commonly used paths. These options are organized under headers (<code>mysqld</code> for server and <code>mysql</code> for client), you can explore them more in the lab that follows.</p> </li> <li> <p>Logs</p> <p>MySQL has logs for various purposes - general query log, errors, binary logs (for replication), slow query log. Only error log is enabled by default (to reduce I/O and storage requirement), the others can be enabled when required - by specifying config parameters at startup or running commands at runtime. Log destination can also be tweaked with config parameters.</p> </li> </ul>"},{"location":"level101/databases_sql/query_performance/","title":"Query Performance","text":""},{"location":"level101/databases_sql/query_performance/#query-performance-improvement","title":"Query Performance Improvement","text":"<p>Query Performance is a very crucial aspect of relational databases. If not tuned correctly, the select queries can become slow and painful for the application, and for the MySQL server as well. The important task is to identify the slow queries and try to improve their performance by either rewriting them or creating proper indexes on the tables involved in it.</p>"},{"location":"level101/databases_sql/query_performance/#the-slow-query-log","title":"The Slow Query Log","text":"<p>The slow query log contains SQL statements that take a longer time to execute than set in the config parameter <code>long_query_time</code>. These queries are the candidates for optimization. There are some good utilities to summarize the slow query logs like, <code>mysqldumpslow</code> (provided by MySQL itself), <code>pt-query-digest</code> (provided by Percona), etc. Following are the config parameters that are used to enable and effectively catch slow queries</p> Variable Explanation Example value slow_query_log Enables or disables slow query logs ON slow_query_log_file The location of the slow query log /var/lib/mysql/mysql-slow.log long_query_time Threshold time. The query that takes longer than this time is logged in slow query log 5 log_queries_not_using_indexes When enabled with the slow query log, the queries which do not make use of any index are also logged in the slow query log even though they take less time than long_query_time. ON <p>So, for this section, we will be enabling <code>slow_query_log</code>, <code>long_query_time</code> will be kept to 0.3 (300 ms), and <code>log_queries_not_using</code> index will be enabled as well.</p> <p>Below are the queries that we will execute on the <code>employees</code> database.</p> <ol> <li> <p><code>SELECT * FROM employees WHERE last_name = 'Koblick'</code></p> </li> <li> <p><code>SELECT * FROM salaries WHERE salary &gt;= 100000</code></p> </li> <li> <p><code>SELECT * FROM titles WHERE title = 'Manager'</code></p> </li> <li> <p><code>SELECT * FROM employees WHERE year(hire_date) = 1995</code></p> </li> <li> <p><code>SELECT year(e.hire_date), max(s.salary) FROM employees e JOIN salaries s ON e.emp_no=s.emp_no GROUP BY year(e.hire_date)</code></p> </li> </ol> <p>Now, queries 1, 3 and 4 executed under 300ms but if we check the slow query logs, we will find these queries logged as they are not using any of the index. Queries 2 and 5 are taking longer than 300ms and also not using any index.</p> <p>Use the following command to get the summary of the slow query log:</p> <pre><code>mysqldumpslow /var/lib/mysql/mysql-slow.log\n</code></pre> <p></p> <p>There are some more queries in the snapshot that were along with the queries mentioned. <code>mysqldumpslow</code> replaces actual values that were used by N (in case of numbers) and S (in case of strings). That can be overridden by <code>-a</code> option, however, that will increase the output lines if different values are used in similar queries.</p>"},{"location":"level101/databases_sql/query_performance/#the-explain-plan","title":"The EXPLAIN Plan","text":"<p>The <code>EXPLAIN</code> command is used with any query that we want to analyze. It describes the query execution plan, how MySQL sees and executes the query. <code>EXPLAIN</code> works with <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code> and <code>DELETE</code> statements. It tells about different aspects of the query like, how tables are joined, indexes used or not, etc. The important thing here is to understand the basic <code>EXPLAIN</code> plan output of a query to determine its performance. </p> <p>Let's take the following query as an example,</p> <pre><code>mysql&gt; EXPLAIN SELECT * FROM salaries WHERE salary = 100000;\n+----+-------------+----------+------------+------+---------------+------+---------+------+---------+----------+-------------+\n| id | select_type | table    | partitions | type | possible_keys | key  | key_len | ref  | rows    | filtered | Extra       |\n+----+-------------+----------+------------+------+---------------+------+---------+------+---------+----------+-------------+\n|  1 | SIMPLE      | salaries | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 2838426 |    10.00 | Using where |\n+----+-------------+----------+------------+------+---------------+------+---------+------+---------+----------+-------------+\n1 row in set, 1 warning (0.00 sec)\n</code></pre> <p>The key aspects to understand in the above output are:</p> <ul> <li>Partitions - the number of partitions considered while executing the query. It is only valid if the table is partitioned.</li> <li>Possible_keys - the list of indexes that were considered during creation of the execution plan.</li> <li>Key - the index that will be used while executing the query.</li> <li>Rows - the number of rows examined during the execution.</li> <li>Filtered - the percentage of rows that were filtered out of the rows examined. The maximum and most optimized result will have 100 in this field. </li> <li>Extra - this tells some extra information on how MySQL evaluates, whether the query is using only <code>WHERE</code> clause to match target rows, any index or temporary table, etc.</li> </ul> <p>So, for the above query, we can determine that there are no partitions, there are no candidate indexes to be used and so no index is used at all, over 2M rows are examined and only 10% of them are included in the result, and lastly, only a <code>WHERE</code> clause is used to match the target rows.</p>"},{"location":"level101/databases_sql/query_performance/#creating-an-index","title":"Creating an Index","text":"<p>Indexes are used to speed up selecting relevant rows for a given column value. Without an index, MySQL starts with the first row and goes through the entire table to find matching rows. If the table has too many rows, the operation becomes costly. With indexes, MySQL determines the position to start looking for the data without reading the full table.</p> <p>A primary key is also an index which is also the fastest and is stored along with the table data. Secondary indexes are stored outside of the table data and are used to further enhance the performance of SQL statements. Indexes are mostly stored as B-Trees, with some exceptions like spatial indexes use R-Trees and memory tables use hash indexes.</p> <p>There are 2 ways to create indexes:</p> <ul> <li>While creating a table - if we know beforehand the columns that will drive the most number of <code>WHERE</code> clauses in <code>SELECT</code> queries, then we can put an index over them while creating a table.</li> <li>Altering a Table - To improve the performance of a troubling query, we create an index on a table which already has data in it using <code>ALTER</code> or <code>CREATE INDEX</code> command. This operation does not block the table but might take some time to complete depending on the size of the table.</li> </ul> <p>Let\u2019s look at the query that we discussed in the previous section. It\u2019s clear that scanning over 2M records is not a good idea when only 10% of those records are actually in the resultset. </p> <p>Hence, we create an index on the salary column of the salaries table.</p> <pre><code>CREATE INDEX idx_salary ON salaries(salary)\n</code></pre> <p>OR</p> <pre><code>ALTER TABLE salaries ADD INDEX idx_salary(salary)\n</code></pre> <p>And the same explain plan now looks like this:</p> <pre><code>mysql&gt; EXPLAIN SELECT * FROM salaries WHERE salary = 100000;\n+----+-------------+----------+------------+------+---------------+------------+---------+-------+------+----------+-------+\n| id | select_type | table    | partitions | type | possible_keys | key        | key_len | ref   | rows | filtered | Extra |\n+----+-------------+----------+------------+------+---------------+------------+---------+-------+------+----------+-------+\n|  1 | SIMPLE      | salaries | NULL       | ref  | idx_salary    | idx_salary | 4       | const |   13 |   100.00 | NULL  |\n+----+-------------+----------+------------+------+---------------+------------+---------+-------+------+----------+-------+\n1 row in set, 1 warning (0.00 sec)\n</code></pre> <p>Now the index used is <code>idx_salary</code>, the one we recently created. The index actually helped examine only 13 records and all of them are in the resultset. Also, the query execution time is also reduced from over 700ms to almost negligible. </p> <p>Let\u2019s look at another example. Here, we are searching for a specific combination of <code>first_name</code> and <code>last_name</code>. But, we might also search based on <code>last_name</code> only.</p> <pre><code>mysql&gt; EXPLAIN SELECT * FROM employees WHERE last_name = 'Dredge' AND first_name = 'Yinghua';\n+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+-------------+\n| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra       |\n+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+-------------+\n|  1 | SIMPLE      | employees | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 299468 |     1.00 | Using where |\n+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+-------------+\n1 row in set, 1 warning (0.00 sec)\n</code></pre> <p>Now only 1% record out of almost 300K is the resultset. Although the query time is particularly quick as we have only 300K records, this will be a pain if the number of records are over millions. In this case, we create an index on <code>last_name</code> and <code>first_name</code>, not separately, but a composite index including both the columns. </p> <pre><code>CREATE INDEX idx_last_first ON employees(last_name, first_name)\n</code></pre> <pre><code>mysql&gt; EXPLAIN SELECT * FROM employees WHERE last_name = 'Dredge' AND first_name = 'Yinghua';\n+----+-------------+-----------+------------+------+----------------+----------------+---------+-------------+------+----------+-------+\n| id | select_type | table     | partitions | type | possible_keys  | key            | key_len | ref         | rows | filtered | Extra |\n+----+-------------+-----------+------------+------+----------------+----------------+---------+-------------+------+----------+-------+\n|  1 | SIMPLE      | employees | NULL       | ref  | idx_last_first | idx_last_first | 124     | const,const |    1 |   100.00 | NULL  |\n+----+-------------+-----------+------------+------+----------------+----------------+---------+-------------+------+----------+-------+\n1 row in set, 1 warning (0.00 sec)\n</code></pre> <p>We chose to put <code>last_name</code> before <code>first_name</code> while creating the index as the optimizer starts from the leftmost prefix of the index while evaluating the query. For example, if we have a 3-column index like <code>idx(c1, c2, c3)</code>, then the search capability of the index follows - (c1), (c1, c2) or (c1, c2, c3) i.e. if your <code>WHERE</code> clause has only <code>first_name</code>, this index won\u2019t work.</p> <pre><code>mysql&gt; EXPLAIN SELECT * FROM employees WHERE first_name = 'Yinghua';\n+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+-------------+\n| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra       |\n+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+-------------+\n|  1 | SIMPLE      | employees | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 299468 |    10.00 | Using where |\n+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+-------------+\n1 row in set, 1 warning (0.00 sec)\n</code></pre> <p>But, if you have only the <code>last_name</code> in the <code>WHERE</code> clause, it will work as expected.</p> <pre><code>mysql&gt; EXPLAIN SELECT * FROM employees WHERE last_name = 'Dredge';\n+----+-------------+-----------+------------+------+----------------+----------------+---------+-------+------+----------+-------+\n| id | select_type | table     | partitions | type | possible_keys  | key            | key_len | ref   | rows | filtered | Extra |\n+----+-------------+-----------+------------+------+----------------+----------------+---------+-------+------+----------+-------+\n|  1 | SIMPLE      | employees | NULL       | ref  | idx_last_first | idx_last_first | 66      | const |  200 |   100.00 | NULL  |\n+----+-------------+-----------+------------+------+----------------+----------------+---------+-------+------+----------+-------+\n1 row in set, 1 warning (0.00 sec)\n</code></pre> <p>For another example, use the following queries:</p> <pre><code>CREATE TABLE employees_2 LIKE employees;\nCREATE TABLE salaries_2 LIKE salaries;\nALTER TABLE salaries_2 DROP PRIMARY KEY;\n</code></pre> <p>We made copies of <code>employees</code> and <code>salaries</code> tables without the Primary Key of <code>salaries</code> table to understand an example of <code>SELECT</code> with <code>JOIN</code>.</p> <p>When you have queries like the below, it becomes tricky to identify the pain point of the query.</p> <pre><code>mysql&gt; SELECT e.first_name, e.last_name, s.salary, e.hire_date FROM employees_2 e JOIN salaries_2 s ON e.emp_no=s.emp_no WHERE e.last_name='Dredge';\n1860 rows in set (4.44 sec)\n</code></pre> <p>This query is taking about 4.5 seconds to complete with 1860 rows in the resultset. Let\u2019s look at the Explain plan. There will be 2 records in the Explain plan as 2 tables are used in the query.</p> <pre><code>mysql&gt; EXPLAIN SELECT e.first_name, e.last_name, s.salary, e.hire_date FROM employees_2 e JOIN salaries_2 s ON e.emp_no=s.emp_no WHERE e.last_name='Dredge';\n+----+-------------+-------+------------+--------+------------------------+---------+---------+--------------------+---------+----------+-------------+\n| id | select_type | table | partitions | type   | possible_keys          | key     | key_len | ref                | rows    | filtered | Extra       |\n+----+-------------+-------+------------+--------+------------------------+---------+---------+--------------------+---------+----------+-------------+\n|  1 | SIMPLE      | s     | NULL       | ALL    | NULL                   | NULL    | NULL    | NULL               | 2837194 |   100.00 | NULL        |\n|  1 | SIMPLE      | e     | NULL       | eq_ref | PRIMARY,idx_last_first | PRIMARY | 4       | employees.s.emp_no |       1 |     5.00 | Using where |\n+----+-------------+-------+------------+--------+------------------------+---------+---------+--------------------+---------+----------+-------------+\n2 rows in set, 1 warning (0.00 sec)\n</code></pre> <p>These are in order of evaluation, i.e. <code>salaries_2</code> will be evaluated first and then <code>employees_2</code> will be joined to it. As it looks like, it scans almost all the rows of <code>salaries_2</code> table and tries to match the <code>employees_2</code> rows as per the <code>JOIN</code> condition. Though <code>WHERE</code> clause is used in fetching the final resultset, but the index corresponding to the <code>WHERE</code> clause is not used for the <code>employees_2</code> table. </p> <p>If the join is done on two indexes which have the same data-types, it will always be faster. So, let\u2019s create an index on the <code>emp_no</code> column of <code>salaries_2</code> table and analyze the query again.</p> <pre><code>CREATE INDEX idx_empno ON salaries_2(emp_no)\n</code></pre> <pre><code>mysql&gt; EXPLAIN SELECT e.first_name, e.last_name, s.salary, e.hire_date FROM employees_2 e JOIN salaries_2 s ON e.emp_no=s.emp_no WHERE e.last_name='Dredge';\n+----+-------------+-------+------------+------+------------------------+----------------+---------+--------------------+------+----------+-------+\n| id | select_type | table | partitions | type | possible_keys          | key            | key_len | ref                | rows | filtered | Extra |\n+----+-------------+-------+------------+------+------------------------+----------------+---------+--------------------+------+----------+-------+\n|  1 | SIMPLE      | e     | NULL       | ref  | PRIMARY,idx_last_first | idx_last_first | 66      | const              |  200 |   100.00 | NULL  |\n|  1 | SIMPLE      | s     | NULL       | ref  | idx_empno              | idx_empno      | 4       | employees.e.emp_no |    9 |   100.00 | NULL  |\n+----+-------------+-------+------------+------+------------------------+----------------+---------+--------------------+------+----------+-------+\n2 rows in set, 1 warning (0.00 sec)\n</code></pre> <p>Now, not only did the index help the optimizer to examine only a few rows in both tables, it reversed the order of the tables in evaluation. The <code>employees_2</code> table is evaluated first and rows are selected as per the index respective to the <code>WHERE</code> clause. Then, the records are joined to <code>salaries_2</code> table as per the index used due to the <code>JOIN</code> condition. The execution time of the query came down from 4.5s to 0.02s.</p> <pre><code>mysql&gt; SELECT e.first_name, e.last_name, s.salary, e.hire_date FROM employees_2 e JOIN salaries_2 s ON e.emp_no=s.emp_no WHERE e.last_name='Dredge'\\G\n1860 rows in set (0.02 sec)\n</code></pre>"},{"location":"level101/databases_sql/replication/","title":"MySQL Replication","text":""},{"location":"level101/databases_sql/replication/#mysql-replication","title":"MySQL Replication","text":"<p>Replication enables data from one MySQL host (termed as Primary) to be copied to another MySQL host (termed as Replica). MySQL Replication is asynchronous in nature by default, but it can be changed to semi-synchronous with some configurations.</p> <p>Some common applications of MySQL replication are:</p> <ul> <li>Read-scaling - as multiple hosts can replicate the data from a single primary host, we can set up as many replicas as we need and scale reads through them, i.e. application writes will go to a single primary host and the reads can balance between all the replicas that are there. Such a setup can improve the write performance as well, as the primary is dedicated to only updates and not reads.</li> <li>Backups using replicas - the backup process can sometimes be a little heavy. But if we have replicas configured, then we can use one of them to get the backup without affecting the primary data at all.</li> <li>Disaster Recovery - a replica in some other geographical region paves a proper path to configure disaster recovery.</li> </ul> <p>MySQL supports different types of synchronizations as well:</p> <ul> <li>Asynchronous - this is the default synchronization method. It is one-way, i.e. one host serves as primary and one or more hosts as replica. We will discuss this method throughout the replication topic.</li> </ul> <p></p> <ul> <li>Semi-Synchronous - in this type of synchronization, a commit performed on the primary host is blocked until at least one replica acknowledges it. Post the acknowledgement from any one replica, the control is returned to the session that performed the transaction. This ensures strong consistency but the replication is slower than asynchronous.</li> <li>Delayed - we can deliberately lag the replica in a typical MySQL replication by the number of seconds desired by the use case. This type of replication safeguards from severe human errors of dropping or corrupting the data on the primary, for example, in the above diagram for Delayed Replication, if a <code>DROP DATABASE</code> is executed by mistake on the primary, we still have 30 minutes to recover the data from R2 as that command has not been replicated on R2 yet.</li> </ul> <p>Pre-Requisites</p> <p>Before we dive into setting up replication, we should know about the binary logs. Binary logs play a very important role in MySQL replication. Binary logs, or commonly known as binlogs contain events about the changes done to the database, like table structure changes, data changes via DML operations, etc. They are not used to log <code>SELECT</code> statements. For replication, the primary sends the information to the replicas using its <code>binlogs</code> about the changes done to the database, and the replicas make the same data changes. </p> <p>With respect to MySQL replication, the binary log format can be of two types that decides the main type of replication:</p> <ul> <li>Statement-Based Replication or SBR</li> <li>Row-Based Replication or RBR</li> </ul> <p>Statement-Based Binlog Format</p> <p>Originally, the replication in MySQL was based on SQL statements getting replicated and executed on the replica from the primary. This is called statement-based logging. The <code>binlog</code> contains the exact SQL statement run by the session. </p> <p></p> <p>So, if we run the above statements to insert 3 records and the update 3 in a single update statement, they will be logged exactly the same as when we executed them.</p> <p></p> <p>Row-Based Binlog Format</p> <p>The row-based is the default one in the latest MySQL releases. This is a lot different from the Statement format as here, row events are logged instead of statements. By that we mean, in the above example one update statement affected 3 records, but <code>binlog</code> had only one <code>UPDATE</code> statement; if it is a row-based format, <code>binlog</code> will have an event for each record updated.</p> <p></p> <p></p> <p>Statement-Based v/s Row-Based binlogs</p> <p>Let\u2019s have a look at the operational differences between statement-based and row-based binlogs. </p> Statement-Based Row-Based Logs SQL statements as executed Logs row events based on SQL statements executed Takes lesser disk space Takes more disk space Restoring using binlogs is faster Restoring using binlogs is slower When used for replication, if any statement has a predefined function that has its own value, like <code>sysdate()</code>, <code>uuid()</code> etc, the output could be different on the replica which makes it inconsistent. Whatever is executed becomes a row event with values, so there will be no problem if such functions are used in SQL statements. Only statements are logged so no other row events are generated. A lot of events are generated when a table is copied into another using <code>INSERT INTO SELECT</code>. <p>Note: There is another type of <code>binlog</code> format called Mixed. With mixed logging, statement-based is used by default but it switches to row-based in certain cases. If MySQL cannot guarantee that statement-based logging is safe for the statements executed, it issues a warning and switches to row-based for those statements.</p> <p>We will be using binary log format as Row for the entire replication topic.</p> <p>Replication in Motion</p> <p></p> <p>The above figure indicates how a typical MySQL replication works.</p> <ol> <li><code>Replica_IO_Thread</code> is responsible to fetch the binlog events from the primary binary logs to the replica.</li> <li>On the Replica host, relay logs are created which are exact copies of the binary logs. If the binary logs on primary are in row format, the relay logs will be the same.</li> <li><code>Replica_SQL_Thread</code> applies the relay logs on the replica MySQL server.</li> <li>If <code>log-bin</code> is enabled on the replica, then the replica will have its own binary logs as well. If <code>log-slave-updates</code> is enabled, then it will have the updates from the primary logged in the binlogs as well.</li> </ol>"},{"location":"level101/databases_sql/replication/#setting-up-replication","title":"Setting up Replication","text":"<p>In this section, we will set up a simple asynchronous replication. The binlogs will be in row-based format. The replication will be set up on two fresh hosts with no prior data present. There are two different ways in which we can set up replication. </p> <ul> <li>Binlog based - Each replica keeps a record of the binlog coordinates on the primary - current binlog and position in the binlog till where it has read and processed. So, at a time different replicas might be reading different parts of the same binlog.</li> <li>GTID based - Every transaction gets an identifier called global transaction identifier or GTID. There is no need to keep the record of binlog coordinates, as long as the replica has all the GTIDs executed on the primary, it is consistent with the primary. A typical GTID is the <code>server_uuid:#</code> positive integer.</li> </ul> <p>We will set up a GTID-based replication in the following section but will also discuss binlog-based replication setup as well.</p> <p>Primary Host Configurations</p> <p>The following config parameters should be present in the primary <code>my.cnf</code> file for setting up GTID-based replication.</p> <pre><code>server-id - a unique ID for the mysql server\nlog-bin - the binlog location\nbinlog-format - ROW | STATEMENT (we will use ROW)\ngtid-mode - ON\nenforce-gtid-consistency - ON (allows execution of only those statements which can be logged using GTIDs)\n</code></pre> <p>Replica Host Configurations</p> <p>The following config parameters should be present in the replica <code>my.cnf</code> file for setting up replication.</p> <pre><code>server-id - different than the primary host\nlog-bin - (optional, if you want replica to log its own changes as well)\nbinlog-format - depends on the above\ngtid-mode - ON\nenforce-gtid-consistency - ON\nlog-slave-updates - ON (if binlog is enabled, then we can enable this. This enables the replica to log the changes coming from the primary along with its own changes. Helps in setting up chain replication)\n</code></pre> <p>Replication User</p> <p>Every replica connects to the primary using a <code>mysql</code> user for replicating. So there must be a <code>mysql</code> user account for the same on the primary host. Any user can be used for this purpose provided it has <code>REPLICATION SLAVE</code> privilege. If the sole purpose is replication, then we can have a user with only the required privilege.</p> <p>On the primary host:</p> <pre><code>mysql&gt; CREATE USER repl_user@&lt;replica_IP&gt; IDENTIFIED BY 'xxxxx';\n\nmysql&gt; GRANT REPLICATION SLAVE ON *.* TO repl_user@'&lt;replica_IP&gt;';\n</code></pre> <p>Obtaining Starting position from Primary</p> <p>Run the following command on the primary host:</p> <pre><code>mysql&gt; SHOW MASTER STATUS\\G\n*************************** 1. row ***************************\n             File: mysql-bin.000001\n         Position: 73\n     Binlog_Do_DB:\n Binlog_Ignore_DB:\nExecuted_Gtid_Set: e17d0920-d00e-11eb-a3e6-000d3aa00f87:1-3\n1 row in set (0.00 sec)\n</code></pre> <p>If we are working with binary log-based replication, the top two output lines are the most important ones. That tells the current binlog on the primary host and till what position it has written. For fresh hosts we know that no data is written, so we can directly set up replication using the very first <code>binlog</code> file and position 4. If we are setting up a replication from a backup, then that changes the way we obtain the starting position. For GTIDs, the <code>executed_gtid_set</code> is the value where primary is right now. Again, for a fresh setup, we don\u2019t have to specify anything about the starting point and it will start from the transaction id 1, but when we set up from a backup, the backup will contain the GTID positions till where backup has been taken.</p> <p>Setting up Replica</p> <p>The replication setup must know about the primary host, the user and password to connect, the binlog coordinates (for binlog-based replication) or the GTID auto-position parameter. The following command is used for setting up:</p> <pre><code>CHANGE MASTER TO\nmaster_host = '&lt;primary host IP&gt;',\nmaster_port = &lt;primary host port - default=3306&gt;,\nmaster_user = 'repl_user',\nmaster_password = 'xxxxx',\nmaster_auto_position = 1;\n</code></pre> <p>Note: The <code>CHANGE MASTER TO</code> command has been replaced with <code>CHANGE REPLICATION SOURCE TO</code> from Mysql 8.0.23 onwards, also all the master and slave keywords are replaced with source and replica.</p> <p>If it is binlog-based replication, then instead of <code>master_auto_position</code>, we need to specify the binlog coordinates.</p> <pre><code>master_log_file = 'mysql-bin.000001',\nmaster_log_pos = 4\n</code></pre> <p>Starting Replication and Check Status</p> <p>Now that everything is configured, we just need to start the replication on the replica via the following command</p> <pre><code>START SLAVE;\n</code></pre> <p>OR from MySQL 8.0.23 onwards,</p> <pre><code>START REPLICA;\n</code></pre> <p>Whether or not the replication is running successfully, we can determine by running the following command:</p> <pre><code>SHOW SLAVE STATUS\\G\n</code></pre> <p>OR from MySQL 8.0.23 onwards,</p> <pre><code>SHOW REPLICA STATUS\\G\n</code></pre> <pre><code>mysql&gt; SHOW REPLICA STATUS\\G\n*************************** 1. row ***************************\n             Replica_IO_State: Waiting for master to send event\n                  Source_Host: &lt;primary IP&gt;\n                  Source_User: repl_user\n                  Source_Port: &lt;primary port&gt;\n                Connect_Retry: 60\n              Source_Log_File: mysql-bin.000001\n          Read_Source_Log_Pos: 852\n               Relay_Log_File: mysql-relay-bin.000002\n                Relay_Log_Pos: 1067\n        Relay_Source_Log_File: mysql-bin.000001\n           Replica_IO_Running: Yes\n          Replica_SQL_Running: Yes\n              Replicate_Do_DB:\n          Replicate_Ignore_DB:\n           Replicate_Do_Table:\n       Replicate_Ignore_Table:\n      Replicate_Wild_Do_Table:\n  Replicate_Wild_Ignore_Table:\n                   Last_Errno: 0\n                   Last_Error:\n                 Skip_Counter: 0\n          Exec_Source_Log_Pos: 852\n              Relay_Log_Space: 1283\n              Until_Condition: None\n               Until_Log_File:\n                Until_Log_Pos: 0\n           Source_SSL_Allowed: No\n           Source_SSL_CA_File:\n           Source_SSL_CA_Path:\n              Source_SSL_Cert:\n            Source_SSL_Cipher:\n               Source_SSL_Key:\n        Seconds_Behind_Source: 0\nSource_SSL_Verify_Server_Cert: No\n                Last_IO_Errno: 0\n                Last_IO_Error:\n               Last_SQL_Errno: 0\n               Last_SQL_Error:\n  Replicate_Ignore_Server_Ids:\n             Source_Server_Id: 1\n                  Source_UUID: e17d0920-d00e-11eb-a3e6-000d3aa00f87\n             Source_Info_File: mysql.slave_master_info\n                    SQL_Delay: 0\n          SQL_Remaining_Delay: NULL\n    Replica_SQL_Running_State: Slave has read all relay log; waiting for more updates\n           Source_Retry_Count: 86400\n                  Source_Bind:\n      Last_IO_Error_Timestamp:\n     Last_SQL_Error_Timestamp:\n               Source_SSL_Crl:\n           Source_SSL_Crlpath:\n           Retrieved_Gtid_Set: e17d0920-d00e-11eb-a3e6-000d3aa00f87:1-3\n            Executed_Gtid_Set: e17d0920-d00e-11eb-a3e6-000d3aa00f87:1-3\n                Auto_Position: 1\n         Replicate_Rewrite_DB:\n                 Channel_Name:\n           Source_TLS_Version:\n       Source_public_key_path:\n        Get_Source_public_key: 0\n            Network_Namespace:\n1 row in set (0.00 sec)\n</code></pre> <p>Some of the parameters are explained below:</p> Parameters Description Relay_Source_Log_File the primary\u2019s file where replica is currently reading from Execute_Source_Log_Pos for the above file on which position is the replica reading currently from. These two parameters are of utmost importance when binlog based replication is used Replica_IO_Running IO thread of replica is running or not Replica_SQL_Running SQL thread of replica is running or not Seconds_Behind_Source the difference of seconds when a statement was executed on Primary and then on Replica. This indicates how much replication lag is there Source_UUID the uuid of the primary host Retrieved_Gtid_Set the GTIDs fetched from the primary host by the replica to be executed Executed_Gtid_Set the GTIDs executed on the replica. This set remains the same for the entire cluster if the replicas are in sync Auto_Position it directs the replica to fetch the next GTID automatically <p>Create a Replica for the already setup cluster</p> <p>The steps discussed in the previous section talks about the setting up replication on two fresh hosts. When we have to set up a replica for a host which is already serving applications, then the backup of the primary is used, either fresh backup taken for the replica (should only be done if the traffic it is serving is less) or use a recently taken backup.</p> <p>If the size of the databases on the MySQL primary server is small, less than 100G recommended, then <code>mysqldump</code> can be used to take backup along with the following options.</p> <pre><code>mysqldump -uroot -p -hhost_ip -P3306 --all-databases --single-transaction --master-data=1 &gt; primary_host.bkp\n</code></pre> <ul> <li><code>--single-transaction</code> - this option starts a transaction before taking the backup which ensures it is consistent. As transactions are isolated from each other, so no other writes affect the backup.</li> <li><code>--master-data</code> - this option is required if binlog-based replication is desired to be set up. It includes the binary log file and log file position in the backup file.</li> </ul> <p>When GTID mode is enabled and <code>mysqldump</code> is executed, it includes the GTID executed to be used to start the replica after the backup position. The contents of the <code>mysqldump</code> output file will have the following</p> <p></p> <p>It is recommended to comment these before restoring otherwise they could throw errors. Also, using <code>master-data=2</code> will automatically comment the <code>master_log_file</code> line.</p> <p>Similarly, when taking backup of the host using <code>xtrabackup</code>, the file <code>xtrabckup_info</code> file contains the information about binlog file and file position, as well as the GTID executed set.</p> <pre><code>server_version = 8.0.25\nstart_time = 2021-06-22 03:45:17\nend_time = 2021-06-22 03:45:20\nlock_time = 0\nbinlog_pos = filename 'mysql-bin.000007', position '196', GTID of the last change 'e17d0920-d00e-11eb-a3e6-000d3aa00f87:1-5'\ninnodb_from_lsn = 0\ninnodb_to_lsn = 18153149\npartial = N\nincremental = N\nformat = file\ncompressed = N\nencrypted = N\n</code></pre> <p>Now, after setting MySQL server on the desired host, restore the backup taken from any one of the above methods. If the intended way is binlog-based replication, then use the binlog file and position info in the following command:</p> <pre><code>CHANGE REPLICATION SOURCE TO \nsource_host = \u2018primary_ip\u2019,\nsource_port = 3306,\nsource_user = \u2018repl_user\u2019,\nsource_password = \u2018xxxxx\u2019,\nsource_log_file = \u2018mysql-bin.000007\u2019,\nsource_log_pos = \u2018196\u2019;\n</code></pre> <p>If the replication needs to be set via GITDs, then run the below command to tell the replica about the GTIDs already executed. On the Replica host, run the following commands:</p> <pre><code>RESET MASTER;\n\nset global gtid_purged = \u2018e17d0920-d00e-11eb-a3e6-000d3aa00f87:1-5\u2019\n\nCHANGE REPLICATION SOURCE TO\nsource_host = \u2018primary_ip\u2019,\nsource_port = 3306,\nsource_user = \u2018repl_user\u2019,\nsource_password = \u2018xxxxx\u2019,\nsource_auto_position = 1\n</code></pre> <p>The reset master command resets the position of the binary log to initial. It can be skipped if the host is a freshly installed MySQL, but we restored a backup so it is necessary. The <code>gtid_purged</code> global variable lets the replica know the GTIDs that have already been executed, so that the replication can start after that. Then in the change source command, we set the <code>auto-position</code> to 1 which automatically gets the next GTID to proceed.</p>"},{"location":"level101/databases_sql/replication/#further-reading","title":"Further Reading","text":"<ul> <li>More applications of Replication</li> <li>Automtaed Failovers using MySQL Orchestrator</li> </ul>"},{"location":"level101/databases_sql/select_query/","title":"Select Query","text":""},{"location":"level101/databases_sql/select_query/#select-query","title":"SELECT Query","text":"<p>The most commonly used command while working with MySQL is <code>SELECT</code>. It is used to fetch the resultset from one or more tables.  The general form of a typical select query looks like:</p> <pre><code>SELECT expr\nFROM table1\n[WHERE condition]\n[GROUP BY column_list HAVING condition]\n[ORDER BY column_list ASC|DESC]\n[LIMIT #]\n</code></pre> <p>The above general form contains some commonly used clauses of a <code>SELECT</code> query:</p> <ul> <li>expr - comma-separated column list or * (for all columns)</li> <li>WHERE - a condition is provided, if true, directs the query to select only those records.</li> <li>GROUP BY - groups the entire resultset based on the column list provided. An aggregate function is recommended to be present in the select expression of the query. HAVING supports grouping by putting a condition on the selected or any other aggregate function.</li> <li>ORDER BY - sorts the resultset based on the column list in ascending or descending order.</li> <li>LIMIT - commonly used to limit the number of records.</li> </ul> <p>Let\u2019s have a look at some examples for a better understanding of the above. The dataset used for the examples below is available here and is free to use.</p> <p>Select all records</p> <pre><code>mysql&gt; SELECT * FROM employees LIMIT 5;\n+--------+------------+------------+-----------+--------+------------+\n| emp_no | birth_date | first_name | last_name | gender | hire_date  |\n+--------+------------+------------+-----------+--------+------------+\n|  10001 | 1953-09-02 | Georgi     | Facello   | M      | 1986-06-26 |\n|  10002 | 1964-06-02 | Bezalel    | Simmel    | F      | 1985-11-21 |\n|  10003 | 1959-12-03 | Parto      | Bamford   | M      | 1986-08-28 |\n|  10004 | 1954-05-01 | Chirstian  | Koblick   | M      | 1986-12-01 |\n|  10005 | 1955-01-21 | Kyoichi    | Maliniak  | M      | 1989-09-12 |\n+--------+------------+------------+-----------+--------+------------+\n5 rows in set (0.00 sec)\n</code></pre> <p>Select specific fields for all records</p> <pre><code>mysql&gt; SELECT first_name, last_name, gender FROM employees LIMIT 5;\n+------------+-----------+--------+\n| first_name | last_name | gender |\n+------------+-----------+--------+\n| Georgi     | Facello   | M      |\n| Bezalel    | Simmel    | F      |\n| Parto      | Bamford   | M      |\n| Chirstian  | Koblick   | M      |\n| Kyoichi    | Maliniak  | M      |\n+------------+-----------+--------+\n5 rows in set (0.00 sec)\n</code></pre> <p>Select all records Where hire_date &gt;= January 1, 1990</p> <pre><code>mysql&gt; SELECT * FROM employees WHERE hire_date &gt;= '1990-01-01' LIMIT 5;\n+--------+------------+------------+-------------+--------+------------+\n| emp_no | birth_date | first_name | last_name   | gender | hire_date  |\n+--------+------------+------------+-------------+--------+------------+\n|  10008 | 1958-02-19 | Saniya     | Kalloufi    | M      | 1994-09-15 |\n|  10011 | 1953-11-07 | Mary       | Sluis       | F      | 1990-01-22 |\n|  10012 | 1960-10-04 | Patricio   | Bridgland   | M      | 1992-12-18 |\n|  10016 | 1961-05-02 | Kazuhito   | Cappelletti | M      | 1995-01-27 |\n|  10017 | 1958-07-06 | Cristinel  | Bouloucos   | F      | 1993-08-03 |\n+--------+------------+------------+-------------+--------+------------+\n5 rows in set (0.01 sec)\n</code></pre> <p>Select first_name and last_name from all records Where birth_date &gt;= 1960 AND gender = \u2018F\u2019</p> <pre><code>mysql&gt; SELECT first_name, last_name FROM employees WHERE year(birth_date) &gt;= 1960 AND gender='F' LIMIT 5;\n+------------+-----------+\n| first_name | last_name |\n+------------+-----------+\n| Bezalel    | Simmel    |\n| Duangkaew  | Piveteau  |\n| Divier     | Reistad   |\n| Jeong      | Reistad   |\n| Mingsen    | Casley    |\n+------------+-----------+\n5 rows in set (0.00 sec)\n</code></pre> <p>Display the total number of records</p> <pre><code>mysql&gt; SELECT COUNT(*) FROM employees;\n+----------+\n| COUNT(*) |\n+----------+\n|   300024 |\n+----------+\n1 row in set (0.05 sec)\n</code></pre> <p>Display gender-wise count of all records</p> <pre><code>mysql&gt; SELECT gender, COUNT(*) FROM employees GROUP BY gender;\n+--------+----------+\n| gender | COUNT(*) |\n+--------+----------+\n| M      |   179973 |\n| F      |   120051 |\n+--------+----------+\n2 rows in set (0.14 sec)\n</code></pre> <p>Display the year of hire_date and number of employees hired that year, also only those years where more than 20k employees were hired</p> <pre><code>mysql&gt; SELECT year(hire_date), COUNT(*) FROM employees GROUP BY year(hire_date) HAVING COUNT(*) &gt; 20000;\n+-----------------+----------+\n| year(hire_date) | COUNT(*) |\n+-----------------+----------+\n|            1985 |    35316 |\n|            1986 |    36150 |\n|            1987 |    33501 |\n|            1988 |    31436 |\n|            1989 |    28394 |\n|            1990 |    25610 |\n|            1991 |    22568 |\n|            1992 |    20402 |\n+-----------------+----------+\n8 rows in set (0.14 sec)\n</code></pre> <p>Display all records ordered by their hire_date in descending order. If hire_date is the same, then in order of their birth_date ascending order</p> <pre><code>mysql&gt; SELECT * FROM employees ORDER BY hire_date DESC, birth_date ASC LIMIT 5;\n+--------+------------+------------+-----------+--------+------------+\n| emp_no | birth_date | first_name | last_name | gender | hire_date  |\n+--------+------------+------------+-----------+--------+------------+\n| 463807 | 1964-06-12 | Bikash     | Covnot    | M      | 2000-01-28 |\n| 428377 | 1957-05-09 | Yucai      | Gerlach   | M      | 2000-01-23 |\n| 499553 | 1954-05-06 | Hideyuki   | Delgrande | F      | 2000-01-22 |\n| 222965 | 1959-08-07 | Volkmar    | Perko     | F      | 2000-01-13 |\n|  47291 | 1960-09-09 | Ulf        | Flexer    | M      | 2000-01-12 |\n+--------+------------+------------+-----------+--------+------------+\n5 rows in set (0.12 sec)\n</code></pre>"},{"location":"level101/databases_sql/select_query/#select-joins","title":"SELECT - JOINS","text":"<p><code>JOIN</code> statement is used to produce a combined resultset from two or more tables based on certain conditions. It can be also used with <code>UPDATE</code> and <code>DELETE</code> statements, but we will be focussing on the select query.</p> <p>Following is a basic general form for joins:</p> <pre><code>SELECT table1.col1, table2.col1, ... (any combination)\nFROM\ntable1 &lt;join_type&gt; table2\nON (or USING depends on join_type) table1.column_for_joining = table2.column_for_joining\nWHERE \u2026\n</code></pre> <p>Any number of columns can be selected, but it is recommended to select only those which are relevant to increase the readability of the resultset. All other clauses like <code>WHERE</code>, <code>GROUP BY</code> are not mandatory. Let\u2019s discuss the types of JOINs supported by MySQL Syntax.</p> <p>Inner Join</p> <p>This joins table A with table B on a condition. Only the records where the condition is True are selected in the resultset.</p> <p>Display some details of employees along with their salary:</p> <pre><code>mysql&gt; SELECT e.emp_no,e.first_name,e.last_name,s.salary FROM employees e JOIN salaries s ON e.emp_no=s.emp_no LIMIT 5;\n+--------+------------+-----------+--------+\n| emp_no | first_name | last_name | salary |\n+--------+------------+-----------+--------+\n|  10001 | Georgi     | Facello   |  60117 |\n|  10001 | Georgi     | Facello   |  62102 |\n|  10001 | Georgi     | Facello   |  66074 |\n|  10001 | Georgi     | Facello   |  66596 |\n|  10001 | Georgi     | Facello   |  66961 |\n+--------+------------+-----------+--------+\n5 rows in set (0.00 sec)\n</code></pre> <p>Similar result can be achieved by:</p> <pre><code>mysql&gt; SELECT e.emp_no,e.first_name,e.last_name,s.salary FROM employees e JOIN salaries s USING (emp_no) LIMIT 5;\n+--------+------------+-----------+--------+\n| emp_no | first_name | last_name | salary |\n+--------+------------+-----------+--------+\n|  10001 | Georgi     | Facello   |  60117 |\n|  10001 | Georgi     | Facello   |  62102 |\n|  10001 | Georgi     | Facello   |  66074 |\n|  10001 | Georgi     | Facello   |  66596 |\n|  10001 | Georgi     | Facello   |  66961 |\n+--------+------------+-----------+--------+\n5 rows in set (0.00 sec)\n</code></pre> <p>And also by:</p> <pre><code>mysql&gt; SELECT e.emp_no,e.first_name,e.last_name,s.salary FROM employees e NATURAL JOIN salaries s LIMIT 5;\n+--------+------------+-----------+--------+\n| emp_no | first_name | last_name | salary |\n+--------+------------+-----------+--------+\n|  10001 | Georgi     | Facello   |  60117 |\n|  10001 | Georgi     | Facello   |  62102 |\n|  10001 | Georgi     | Facello   |  66074 |\n|  10001 | Georgi     | Facello   |  66596 |\n|  10001 | Georgi     | Facello   |  66961 |\n+--------+------------+-----------+--------+\n5 rows in set (0.00 sec)\n</code></pre> <p>Outer Join</p> <p>Majorly of two types:</p> <ul> <li>LEFT - joining complete table A with table B on a condition. All the records from table A are selected, but from table B, only those records are selected where the condition is True.</li> <li>RIGHT - Exact opposite of the <code>LEFT JOIN</code>.</li> </ul> <p>Let us assume the below tables for understanding <code>LEFT JOIN</code> better.</p> <pre><code>mysql&gt; SELECT * FROM dummy1;\n+----------+------------+\n| same_col | diff_col_1 |\n+----------+------------+\n|        1 | A          |\n|        2 | B          |\n|        3 | C          |\n+----------+------------+\n\nmysql&gt; SELECT * FROM dummy2;\n+----------+------------+\n| same_col | diff_col_2 |\n+----------+------------+\n|        1 | X          |\n|        3 | Y          |\n+----------+------------+\n</code></pre> <p>A simple <code>SELECT JOIN</code> will look like the one below:</p> <pre><code>mysql&gt; SELECT * FROM dummy1 d1 LEFT JOIN dummy2 d2 ON d1.same_col=d2.same_col;\n+----------+------------+----------+------------+\n| same_col | diff_col_1 | same_col | diff_col_2 |\n+----------+------------+----------+------------+\n|        1 | A          |        1 | X          |\n|        3 | C          |        3 | Y          |\n|        2 | B          |     NULL | NULL       |\n+----------+------------+----------+------------+\n3 rows in set (0.00 sec)\n</code></pre> <p>Which can also be written as:</p> <pre><code>mysql&gt; SELECT * FROM dummy1 d1 LEFT JOIN dummy2 d2 USING(same_col);\n+----------+------------+------------+\n| same_col | diff_col_1 | diff_col_2 |\n+----------+------------+------------+\n|        1 | A          | X          |\n|        3 | C          | Y          |\n|        2 | B          | NULL       |\n+----------+------------+------------+\n3 rows in set (0.00 sec)\n</code></pre> <p>And also as:</p> <pre><code>mysql&gt; SELECT * FROM dummy1 d1 NATURAL LEFT JOIN dummy2 d2;\n+----------+------------+------------+\n| same_col | diff_col_1 | diff_col_2 |\n+----------+------------+------------+\n|        1 | A          | X          |\n|        3 | C          | Y          |\n|        2 | B          | NULL       |\n+----------+------------+------------+\n3 rows in set (0.00 sec)\n</code></pre> <p>Cross Join</p> <p>This does a cross product of table A and table B without any condition. It doesn\u2019t have a lot of applications in the real world.</p> <p>A Simple <code>CROSS JOIN</code> looks like this:</p> <pre><code>mysql&gt; SELECT * FROM dummy1 CROSS JOIN dummy2;\n+----------+------------+----------+------------+\n| same_col | diff_col_1 | same_col | diff_col_2 |\n+----------+------------+----------+------------+\n|        1 | A          |        3 | Y          |\n|        1 | A          |        1 | X          |\n|        2 | B          |        3 | Y          |\n|        2 | B          |        1 | X          |\n|        3 | C          |        3 | Y          |\n|        3 | C          |        1 | X          |\n+----------+------------+----------+------------+\n6 rows in set (0.01 sec)\n</code></pre> <p>One use case that can come in handy is when you have to fill in some missing entries. For example, all the entries from <code>dummy1</code> must be inserted into a similar table <code>dummy3</code>, with each record must have 3 entries with statuses 1, 5 and 7.</p> <pre><code>mysql&gt; DESC dummy3;\n+----------+----------+------+-----+---------+-------+\n| Field    | Type     | Null | Key | Default | Extra |\n+----------+----------+------+-----+---------+-------+\n| same_col | int      | YES  |     | NULL    |       |\n| value    | char(15) | YES  |     | NULL    |       |\n| status   | smallint | YES  |     | NULL    |       |\n+----------+----------+------+-----+---------+-------+\n3 rows in set (0.02 sec)\n</code></pre> <p>Either you create an <code>INSERT</code> query script with as many entries as in <code>dummy1</code> or use <code>CROSS JOIN</code> to produce the required resultset.</p> <pre><code>mysql&gt; SELECT * FROM dummy1 \nCROSS JOIN \n(SELECT 1 UNION SELECT 5 UNION SELECT 7) T2 \nORDER BY same_col;\n+----------+------------+---+\n| same_col | diff_col_1 | 1 |\n+----------+------------+---+\n|        1 | A          | 1 |\n|        1 | A          | 5 |\n|        1 | A          | 7 |\n|        2 | B          | 1 |\n|        2 | B          | 5 |\n|        2 | B          | 7 |\n|        3 | C          | 1 |\n|        3 | C          | 5 |\n|        3 | C          | 7 |\n+----------+------------+---+\n9 rows in set (0.00 sec)\n</code></pre> <p>The T2 section in the above query is called a sub-query. We will discuss the same in the next section.</p> <p>Natural Join</p> <p>This implicitly selects the common column from table A and table B and performs an inner join.</p> <pre><code>mysql&gt; SELECT e.emp_no,e.first_name,e.last_name,s.salary FROM employees e NATURAL JOIN salaries s LIMIT 5;\n+--------+------------+-----------+--------+\n| emp_no | first_name | last_name | salary |\n+--------+------------+-----------+--------+\n|  10001 | Georgi     | Facello   |  60117 |\n|  10001 | Georgi     | Facello   |  62102 |\n|  10001 | Georgi     | Facello   |  66074 |\n|  10001 | Georgi     | Facello   |  66596 |\n|  10001 | Georgi     | Facello   |  66961 |\n+--------+------------+-----------+--------+\n5 rows in set (0.00 sec)\n</code></pre> <p>Notice how <code>NATURAL JOIN</code> and using takes care that the common column is displayed only once if you are not explicitly selecting columns for the query.</p> <p>Some More Examples</p> <p>Display <code>emp_no</code>, <code>salary</code>, <code>title</code> and <code>dept</code> of the employees where salary &gt; 80000.</p> <pre><code>mysql&gt; SELECT e.emp_no, s.salary, t.title, d.dept_no \nFROM  \nemployees e \nJOIN salaries s USING (emp_no) \nJOIN titles t USING (emp_no) \nJOIN dept_emp d USING (emp_no) \nWHERE s.salary &gt; 80000 \nLIMIT 5;\n+--------+--------+--------------+---------+\n| emp_no | salary | title        | dept_no |\n+--------+--------+--------------+---------+\n|  10017 |  82163 | Senior Staff | d001    |\n|  10017 |  86157 | Senior Staff | d001    |\n|  10017 |  89619 | Senior Staff | d001    |\n|  10017 |  91985 | Senior Staff | d001    |\n|  10017 |  96122 | Senior Staff | d001    |\n+--------+--------+--------------+---------+\n5 rows in set (0.00 sec)\n</code></pre> <p>Display title-wise count of employees in each department ordered by <code>dept_no</code>:</p> <pre><code>mysql&gt; SELECT d.dept_no, t.title, COUNT(*) \nFROM titles t \nLEFT JOIN dept_emp d USING (emp_no) \nGROUP BY d.dept_no, t.title \nORDER BY d.dept_no \nLIMIT 10;\n+---------+--------------------+----------+\n| dept_no | title              | COUNT(*) |\n+---------+--------------------+----------+\n| d001    | Manager            |        2 |\n| d001    | Senior Staff       |    13940 |\n| d001    | Staff              |    16196 |\n| d002    | Manager            |        2 |\n| d002    | Senior Staff       |    12139 |\n| d002    | Staff              |    13929 |\n| d003    | Manager            |        2 |\n| d003    | Senior Staff       |    12274 |\n| d003    | Staff              |    14342 |\n| d004    | Assistant Engineer |     6445 |\n+---------+--------------------+----------+\n10 rows in set (1.32 sec)\n</code></pre>"},{"location":"level101/databases_sql/select_query/#select-subquery","title":"SELECT - Subquery","text":"<p>A subquery is generally a smaller resultset that can be used to power a <code>SELECT</code> query in many ways. It can be used in a <code>WHERE</code> condition, can be used in place of <code>JOIN</code> mostly where a <code>JOIN</code> could be an overkill.  These subqueries are also termed as derived tables. They must have a table alias in the <code>SELECT</code> query.</p> <p>Let\u2019s look at some examples of subqueries.</p> <p>Here, we got the department name from the <code>departments</code> table by a subquery which used <code>dept_no</code> from <code>dept_emp</code> table.</p> <pre><code>mysql&gt; SELECT e.emp_no, \n(SELECT dept_name FROM departments WHERE dept_no=d.dept_no) dept_name FROM employees e \nJOIN dept_emp d USING (emp_no) \nLIMIT 5;\n+--------+-----------------+\n| emp_no | dept_name       |\n+--------+-----------------+\n|  10001 | Development     |\n|  10002 | Sales           |\n|  10003 | Production      |\n|  10004 | Production      |\n|  10005 | Human Resources |\n+--------+-----------------+\n5 rows in set (0.01 sec)\n</code></pre> <p>Here, we used the <code>AVG</code> query above (which got the avg salary) as a subquery to list the employees whose latest salary is more than the average. </p> <pre><code>mysql&gt; SELECT AVG(salary) FROM salaries;\n+-------------+\n| AVG(salary) |\n+-------------+\n|  63810.7448 |\n+-------------+\n1 row in set (0.80 sec)\n\nmysql&gt; SELECT e.emp_no, MAX(s.salary) \nFROM employees e \nNATURAL JOIN salaries s \nGROUP BY e.emp_no \nHAVING MAX(s.salary) &gt; (SELECT AVG(salary) FROM salaries) \nLIMIT 10;\n+--------+---------------+\n| emp_no | MAX(s.salary) |\n+--------+---------------+\n|  10001 |         88958 |\n|  10002 |         72527 |\n|  10004 |         74057 |\n|  10005 |         94692 |\n|  10007 |         88070 |\n|  10009 |         94443 |\n|  10010 |         80324 |\n|  10013 |         68901 |\n|  10016 |         77935 |\n|  10017 |         99651 |\n+--------+---------------+\n10 rows in set (0.56 sec)\n</code></pre>"},{"location":"level101/git/branches/","title":"Working With Branches","text":"<p>Coming back to our local repo which has two commits. So far, what we have is a single line of history. Commits are chained in a single line. But sometimes you may have a need to work on two different features in parallel in the same repo. Now one option here could be making a new folder/repo with the same code and use that for another feature development. But there's a better way. Use branches. Since git follows tree-like structure for commits, we can use branches to work on different sets of features. From a commit, two or more branches can be created and branches can also be merged.</p> <p>Using branches, there can exist multiple lines of histories and we can checkout to any of them and work on it. Checking out, as we discussed earlier, would simply mean replacing contents of the directory (repo) with the snapshot at the checked out version.</p> <p>Let's create a branch and see how it looks like:</p> <pre><code>$ git branch b1\n$ git log --oneline --graph\n* 7f3b00e (HEAD -&gt; master, b1) adding file 2\n* df2fb7a adding file 1\n</code></pre> <p>We create a branch called <code>b1</code>. Git log tells us that <code>b1</code> also points to the last commit (<code>7f3b00e</code>) but the <code>HEAD</code> is still pointing to <code>master</code>. If you remember, <code>HEAD</code> points to the commit/reference wherever you are checkout to. So if we checkout to <code>b1</code>, <code>HEAD</code> should point to that. Let's confirm:</p> <pre><code>$ git checkout b1\nSwitched to branch 'b1'\n$ git log --oneline --graph\n* 7f3b00e (HEAD -&gt; b1, master) adding file 2\n* df2fb7a adding file 1\n</code></pre> <p><code>b1</code> still points to the same commit but <code>HEAD</code> now points to <code>b1</code>. Since we create a branch at commit <code>7f3b00e</code>, there will be two lines of histories starting this commit. Depending on which branch you are checked out on, the line of history will progress.</p> <p>At this moment, we are checked out on branch <code>b1</code>, so making a new commit will advance branch reference <code>b1</code> to that commit and current <code>b1</code> commit will become its parent. Let's do that.</p> <pre><code># Creating a file and making a commit\n$ echo \"I am a file in b1 branch\" &gt; b1.txt\n$ git add b1.txt\n$ git commit -m \"adding b1 file\"\n[b1 872a38f] adding b1 file\n1 file changed, 1 insertion(+)\ncreate mode 100644 b1.txt\n\n# The new line of history\n$ git log --oneline --graph\n* 872a38f (HEAD -&gt; b1) adding b1 file\n* 7f3b00e (master) adding file 2\n* df2fb7a adding file 1\n$\n</code></pre> <p>Do note that master is still pointing to the old commit it was pointing to. We can now checkout to <code>master</code> branch and make commits there. This will result in another line of history starting from commit <code>7f3b00e</code>.</p> <pre><code># checkout to master branch\n$ git checkout master\nSwitched to branch 'master'\n\n# Creating a new commit on master branch\n$ echo \"new file in master branch\" &gt; master.txt\n$ git add master.txt\n$ git commit -m \"adding master.txt file\"\n[master 60dc441] adding master.txt file\n1 file changed, 1 insertion(+)\ncreate mode 100644 master.txt\n\n# The history line\n$ git log --oneline --graph\n* 60dc441 (HEAD -&gt; master) adding master.txt file\n* 7f3b00e adding file 2\n* df2fb7a adding file 1\n</code></pre> <p>Notice how branch <code>b1</code> is not visible here since we are on the <code>master</code>. Let's try to visualize both to get the whole picture:</p> <pre><code>$ git log --oneline --graph --all\n* 60dc441 (HEAD -&gt; master) adding master.txt file\n| * 872a38f (b1) adding b1 file\n|/\n* 7f3b00e adding file 2\n* df2fb7a adding file 1\n</code></pre> <p>Above tree structure should make things clear. Notice a clear branch/fork on commit <code>7f3b00e</code>. This is how we create branches. Now they both are two separate lines of history on which feature development can be done independently.</p> <p>To reiterate, internally, git is just a tree of commits. Branch names (human readable) are pointers to those commits in the tree. We use various git commands to work with the tree structure and references. Git accordingly modifies contents of our repo.</p>"},{"location":"level101/git/branches/#merges","title":"Merges","text":"<p>Now say the feature you were working on branch <code>b1</code> is complete and you need to merge it on <code>master</code> branch, where all the final version of code goes. So first, you will <code>checkout</code> to branch <code>master</code> and then you <code>pull</code> the latest code from <code>upstream</code> (eg: GitHub). Then you need to merge your code from <code>b1</code> into <code>master</code>. There could be two ways this can be done.</p> <p>Here is the current history:</p> <pre><code>$ git log --oneline --graph --all\n* 60dc441 (HEAD -&gt; master) adding master.txt file\n| * 872a38f (b1) adding b1 file\n|/\n* 7f3b00e adding file 2\n* df2fb7a adding file 1\n</code></pre> <p>Option 1: Directly merge the branch. Merging the branch <code>b1</code> into <code>master</code> will result in a new merge commit. This will merge changes from two different lines of history and create a new commit of the result.</p> <pre><code>$ git merge b1\nMerge made by the 'recursive' strategy.\nb1.txt | 1 +\n1 file changed, 1 insertion(+)\ncreate mode 100644 b1.txt\n$ git log --oneline --graph --all\n*   8fc28f9 (HEAD -&gt; master) Merge branch 'b1'\n|\\\n| * 872a38f (b1) adding b1 file\n* | 60dc441 adding master.txt file\n|/\n* 7f3b00e adding file 2\n* df2fb7a adding file 1\n</code></pre> <p>You can see a new merge commit created (<code>8fc28f9</code>). You will be prompted for the commit message. If there are a lot of branches in the repo, this result will end-up with a lot of merge commits. Which looks ugly compared to a single line of history of development. So let's look at an alternative approach.</p> <p>First, let's reset our last merge and go to the previous state.</p> <pre><code>$ git reset --hard 60dc441\nHEAD is now at 60dc441 adding master.txt file\n$ git log --oneline --graph --all\n* 60dc441 (HEAD -&gt; master) adding master.txt file\n| * 872a38f (b1) adding b1 file\n|/\n* 7f3b00e adding file 2\n* df2fb7a adding file 1\n</code></pre> <p>Option 2: Rebase. Now, instead of merging two branches which has a similar base (commit: <code>7f3b00e</code>), let us rebase branch <code>b1</code> on to current master. What this means is take branch <code>b1</code> (from commit <code>7f3b00e</code> to commit <code>872a38f</code>) and rebase (put them on top of) master (<code>60dc441</code>).</p> <pre><code># Switch to b1\n$ git checkout b1\nSwitched to branch 'b1'\n\n# Rebase (b1 which is current branch) on master\n$ git rebase master\nFirst, rewinding head to replay your work on top of it...\nApplying: adding b1 file\n\n# The result\n$ git log --oneline --graph --all\n* 5372c8f (HEAD -&gt; b1) adding b1 file\n* 60dc441 (master) adding master.txt file\n* 7f3b00e adding file 2\n* df2fb7a adding file 1\n</code></pre> <p>You can see <code>b1</code> which had 1 commit. That commit's parent was <code>7f3b00e</code>. But since we rebase it on master (<code>60dc441</code>). That becomes the parent now. As a side effect, you also see it has become a single line of history. Now if we were to merge <code>b1</code> into <code>master</code>, it would simply mean change <code>master</code> to point to <code>5372c8f</code> which is <code>b1</code>. Let's try it:</p> <pre><code># checkout to master since we want to merge code into master\n$ git checkout master\nSwitched to branch 'master'\n\n# the current history, where b1 is based on master\n$ git log --oneline --graph --all\n* 5372c8f (b1) adding b1 file\n* 60dc441 (HEAD -&gt; master) adding master.txt file\n* 7f3b00e adding file 2\n* df2fb7a adding file 1\n\n\n# Performing the merge, notice the \"fast-forward\" message\n$ git merge b1\nUpdating 60dc441..5372c8f\nFast-forward\nb1.txt | 1 +\n1 file changed, 1 insertion(+)\ncreate mode 100644 b1.txt\n\n# The Result\n$ git log --oneline --graph --all\n* 5372c8f (HEAD -&gt; master, b1) adding b1 file\n* 60dc441 adding master.txt file\n* 7f3b00e adding file 2\n* df2fb7a adding file 1\n</code></pre> <p>Now you see both <code>b1</code> and <code>master</code> are pointing to the same commit. Your code has been merged to the master branch and it can be pushed. Also we have clean line of history! :D</p>"},{"location":"level101/git/conclusion/","title":"Conclusion","text":""},{"location":"level101/git/conclusion/#what-next-from-here","title":"What next from here?","text":"<p>There are a lot of git commands and features which we have not explored here. But with the base built-up, be sure to explore concepts like</p> <ul> <li>Cherrypick</li> <li>Squash</li> <li>Amend</li> <li>Stash</li> <li>Reset</li> </ul>"},{"location":"level101/git/git-basics/","title":"Git","text":""},{"location":"level101/git/git-basics/#prerequisites","title":"Prerequisites","text":"<ol> <li>Have Git installed https://git-scm.com/downloads</li> <li>Have taken any git high-level tutorial or following LinkedIn learning courses<ul> <li>https://www.linkedin.com/learning/git-essential-training-the-basics/</li> <li>https://www.linkedin.com/learning/git-branches-merges-and-remotes/</li> <li>The Official Git Docs</li> </ul> </li> </ol>"},{"location":"level101/git/git-basics/#what-to-expect-from-this-course","title":"What to expect from this course","text":"<p>As an engineer in the field of computer science, having knowledge of version control tools becomes almost a requirement. While there are a lot of version control tools that exist today like SVN, Mercurial, etc, Git perhaps is the most used one and this course we will be working with Git. While this course does not start with Git 101 and expects basic knowledge of git as a prerequisite, it will reintroduce the git concepts known by you with details covering what is happening under the hood as you execute various <code>git</code> commands. So that next time you run a <code>git</code> command, you will be able to press <code>enter</code> more confidently!</p>"},{"location":"level101/git/git-basics/#what-is-not-covered-under-this-course","title":"What is not covered under this course","text":"<p>Advanced usage and specifics of internal implementation details of Git.</p>"},{"location":"level101/git/git-basics/#course-contents","title":"Course Contents","text":"<ol> <li>Git Basics</li> <li>Working with Branches</li> <li>Git with Github</li> <li>Hooks</li> </ol>"},{"location":"level101/git/git-basics/#git-basics","title":"Git Basics","text":"<p>Though you might be aware already, let's revisit why we need a version control system. As the project grows and multiple developers start working on it, an efficient method for collaboration is warranted. Git helps the team collaborate easily and also maintains the history of the changes happening with the codebase.</p>"},{"location":"level101/git/git-basics/#creating-a-git-repo","title":"Creating a Git Repo","text":"<p>Any folder can be converted into a git repository. After executing the following command, we will see a <code>.git</code> folder within the folder, which makes our folder a git repository. All the magic that git does, <code>.git</code> folder is the enabler for the same.</p> <pre><code># creating an empty folder and changing current dir to it\n$ cd /tmp\n$ mkdir school-of-sre\n$ cd school-of-sre/\n\n# initialize a git repo\n$ git init\nInitialized empty Git repository in /private/tmp/school-of-sre/.git/\n</code></pre> <p>As the output says, an empty git repo has been initialized in our folder. Let's take a look at what is there.</p> <pre><code>$ ls .git/\nHEAD        config      description hooks       info        objects     refs\n</code></pre> <p>There are a bunch of folders and files in the <code>.git</code> folder. As I said, all these enable git to do its magic. We will look into some of these folders and files. But for now, what we have is an empty git repository.</p>"},{"location":"level101/git/git-basics/#tracking-a-file","title":"Tracking a File","text":"<p>Now as you might already know, let us create a new file in our repo (we will refer to the folder as repo now.) And see <code>git status</code>:</p> <pre><code>$ echo \"I am file 1\" &gt; file1.txt\n$ git status\nOn branch master\n\nNo commits yet\n\nUntracked files:\n (use \"git add &lt;file&gt;...\" to include in what will be committed)\n\n       file1.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre> <p>The current git status says <code>No commits yet</code> and there is one untracked file. Since we just created the file, git is not tracking that file. We explicitly need to ask git to track files and folders. (Also checkout gitignore) And how we do that is via <code>git add</code> command as suggested in the above output. Then, we go ahead and create a commit.</p> <pre><code>$ git add file1.txt\n$ git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n (use \"git rm --cached &lt;file&gt;...\" to unstage)\n\n       new file:   file1.txt\n\n$ git commit -m \"adding file 1\"\n[master (root-commit) df2fb7a] adding file 1\n1 file changed, 1 insertion(+)\ncreate mode 100644 file1.txt\n</code></pre> <p>Notice how after adding the file, <code>git status</code> says <code>Changes to be committed:</code>. What it means is whatever is listed there, will be included in the next commit. Then, we go ahead and create a commit, with an attached message via <code>-m</code>.</p>"},{"location":"level101/git/git-basics/#more-about-a-commit","title":"More About a Commit","text":"<p>Commit is a snapshot of the repo. Whenever a commit is made, a snapshot of the current state of repo (the folder) is taken and saved. Each commit has a unique ID. (<code>df2fb7a</code> for the commit we made in the previous step). As we keep adding/changing more and more contents and keep making commits, all those snapshots are stored by git. Again, all this magic happens inside the <code>.git</code> folder. This is where all this snapshot or versions are stored in an efficient manner.</p>"},{"location":"level101/git/git-basics/#adding-more-changes","title":"Adding More Changes","text":"<p>Let us create one more file and commit the change. It would look the same as the previous commit we made.</p> <pre><code>$ echo \"I am file 2\" &gt; file2.txt\n$ git add file2.txt\n$ git commit -m \"adding file 2\"\n[master 7f3b00e] adding file 2\n1 file changed, 1 insertion(+)\ncreate mode 100644 file2.txt\n</code></pre> <p>A new commit with ID <code>7f3b00e</code> has been created. You can issue <code>git status</code> at any time to see the state of the repository.</p> <pre><code>   **IMPORTANT: Note that commit IDs are long string (SHA) but we can refer to a commit by its initial few (8 or more) characters too. We will interchangeably using shorter and longer commit IDs.**\n</code></pre> <p>Now that we have two commits, let's visualize them:</p> <pre><code>$ git log --oneline --graph\n* 7f3b00e (HEAD -&gt; master) adding file 2\n* df2fb7a adding file 1\n</code></pre> <p><code>git log</code>, as the name suggests, prints the log of all the git commits. Here you see two additional arguments, <code>--oneline</code> prints the shorter version of the log, ie: the commit message only and not the person who made the commit and when. <code>--graph</code> prints it in graph format.</p> <p>Now at this moment, the commits might look like just one in each line but all commits are stored as a tree like data structure internally by git. That means there can be two or more children commits of a given commit. And not just a single line of commits. We will look more into this part when we get to the Branches section. For now, this is our commit history:</p> <pre><code>   df2fb7a ===&gt; 7f3b00e\n</code></pre>"},{"location":"level101/git/git-basics/#are-commits-really-linked","title":"Are commits really linked?","text":"<p>As I just said, the two commits we just made are linked via tree like data structure and we saw how they are linked. But let's actually verify it. Everything in git is an object. Newly created files are stored as an object. Changes to file are stored as an objects and even commits are objects. To view contents of an object, we can use the following command with the object's ID. We will take a look at the contents of the second commit:</p> <pre><code>$ git cat-file -p 7f3b00e\ntree ebf3af44d253e5328340026e45a9fa9ae3ea1982\nparent df2fb7a61f5d40c1191e0fdeb0fc5d6e7969685a\nauthor Sanket Patel &lt;spatel1@linkedin.com&gt; 1603273316 -0700\ncommitter Sanket Patel &lt;spatel1@linkedin.com&gt; 1603273316 -0700\n\nadding file 2\n</code></pre> <p>Take a note of <code>parent</code> attribute in the above output. It points to the commit id of the first commit we made. So this proves that they are linked! Additionally, you can see the second commit's message in this object. As I said all this magic is enabled by <code>.git</code> folder and the object to which we are looking at also is in that folder.</p> <pre><code>$ ls .git/objects/7f/3b00eaa957815884198e2fdfec29361108d6a9\n.git/objects/7f/3b00eaa957815884198e2fdfec29361108d6a9\n</code></pre> <p>It is stored in <code>.git/objects/</code> folder. All the files and changes to them as well are stored in this folder.</p>"},{"location":"level101/git/git-basics/#the-version-control-part-of-git","title":"The Version Control part of Git","text":"<p>We already can see two commits (versions) in our git log. One thing a version control tool gives you is ability to browse back and forth in history. For example: some of your users are running an old version of code and they are reporting an issue. In order to debug the issue, you need access to the old code. The one in your current repo is the latest code. In this example, you are working on the second commit (<code>7f3b00e</code>) and someone reported an issue with the code snapshot at commit (<code>df2fb7a</code>). This is how you would get access to the code at any older commit.</p> <pre><code># Current contents, two files present\n$ ls\nfile1.txt file2.txt\n\n# checking out to (an older) commit\n$ git checkout df2fb7a\nNote: checking out 'df2fb7a'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by performing another checkout.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -b with the checkout command again. Example:\n\n git checkout -b &lt;new-branch-name&gt;\n\nHEAD is now at df2fb7a adding file 1\n\n# checking contents, can verify it has old contents\n$ ls\nfile1.txt\n</code></pre> <p>So this is how we would get access to old versions/snapshots. All we need is a reference to that snapshot. Upon executing <code>git checkout ...</code>, what git does for you is use the <code>.git</code> folder, see what was the state of things (files and folders) at that version/reference and replace the contents of current directory with those contents. The then-existing content will no longer be present in the local dir (repo) but we can and will still get access to them because they are tracked via <code>git commit</code> and <code>.git</code> folder has them stored/tracked.</p>"},{"location":"level101/git/git-basics/#reference","title":"Reference","text":"<p>I mention in the previous section that we need a reference to the version. By default, git repo is made of tree of commits. And each commit has a unique IDs. But the unique ID is not the only thing we can reference commits via. There are multiple ways to reference commits. For example: <code>HEAD</code> is a reference to current commit. Whatever commit your repo is checked out at, <code>HEAD</code> will point to that. <code>HEAD~1</code> is reference to previous commit. So while checking out previous version in section above, we could have done <code>git checkout HEAD~1</code>.</p> <p>Similarly, <code>master</code> is also a reference (to a branch). Since git uses tree like structure to store commits, there of course will be branches. And the default branch is called <code>master</code>. Master (or any branch reference) will point to the latest commit in the branch. Even though we have checked out to the previous commit in out repo, <code>master</code> still points to the latest commit. And we can get back to the latest version by <code>checkout</code> at <code>master</code> reference</p> <pre><code>$ git checkout master\nPrevious HEAD position was df2fb7a adding file 1\nSwitched to branch 'master'\n\n# now we will see latest code, with two files\n$ ls\nfile1.txt file2.txt\n</code></pre> <p>Note, instead of <code>master</code> in above command, we could have used commit's ID as well.</p>"},{"location":"level101/git/git-basics/#references-and-the-magic","title":"References and The Magic","text":"<p>Let's look at the state of things. Two commits, <code>master</code> and <code>HEAD</code> references are pointing to the latest commit</p> <pre><code>$ git log --oneline --graph\n* 7f3b00e (HEAD -&gt; master) adding file 2\n* df2fb7a adding file 1\n</code></pre> <p>The magic? Let's examine these files:</p> <pre><code>$ cat .git/refs/heads/master\n7f3b00eaa957815884198e2fdfec29361108d6a9\n</code></pre> <p>Viola! Where <code>master</code> is pointing to is stored in a file. Whenever git needs to know where master reference is pointing to, or if git needs to update where master points, it just needs to update the file above. So when you create a new commit, a new commit is created on top of the current commit and the master file is updated with the new commit's ID.</p> <p>Similary, for <code>HEAD</code> reference:</p> <pre><code>$ cat .git/HEAD\nref: refs/heads/master\n</code></pre> <p>We can see <code>HEAD</code> is pointing to a reference called <code>refs/heads/master</code>. So <code>HEAD</code> will point where ever the <code>master</code> points.</p>"},{"location":"level101/git/git-basics/#little-adventure","title":"Little Adventure","text":"<p>We discussed how git will update the files as we execute commands. But let's try to do it ourselves, by hand, and see what happens.</p> <pre><code>$ git log --oneline --graph\n* 7f3b00e (HEAD -&gt; master) adding file 2\n* df2fb7a adding file 1\n</code></pre> <p>Now, let's change <code>master</code> to point to the previous/first commit.</p> <pre><code>$ echo df2fb7a61f5d40c1191e0fdeb0fc5d6e7969685a &gt; .git/refs/heads/master\n$ git log --oneline --graph\n* df2fb7a (HEAD -&gt; master) adding file 1\n\n# RESETTING TO ORIGINAL\n$ echo 7f3b00eaa957815884198e2fdfec29361108d6a9 &gt; .git/refs/heads/master\n$ git log --oneline --graph\n* 7f3b00e (HEAD -&gt; master) adding file 2\n* df2fb7a adding file 1\n</code></pre> <p>We just edited the <code>master</code> reference file and now we can see only the first commit in git log. Undoing the change to the file brings the state back to original. Not so much of magic, is it?</p>"},{"location":"level101/git/github-hooks/","title":"Git with GitHub","text":"<p>Till now all the operations we did were in our local repo while git also helps us in a collaborative environment. GitHub is one place on the Internet where you can centrally host your git repos and collaborate with other developers.</p> <p>Most of the workflow will remain the same as we discussed, with addition of couple of things:</p> <ol> <li>Pull: to pull latest changes from GitHub (the central) repo</li> <li>Push: to push your changes to GitHub repo so that it's available to all people</li> </ol> <p>GitHub has written nice guides and tutorials about this and you can refer to them here:</p> <ul> <li>GitHub Hello World</li> <li>Git Handbook</li> </ul>"},{"location":"level101/git/github-hooks/#hooks","title":"Hooks","text":"<p>Git has another nice feature called hooks. Hooks are basically scripts which will be called when a certain event happens. Here is where hooks are located:</p> <pre><code>$ ls .git/hooks/\napplypatch-msg.sample     fsmonitor-watchman.sample pre-applypatch.sample     pre-push.sample           pre-receive.sample        update.sample\ncommit-msg.sample         post-update.sample        pre-commit.sample         pre-rebase.sample         prepare-commit-msg.sample\n</code></pre> <p>Names are self-explanatory. These hooks are useful when you want to do certain things when a certain event happens. If you want to run tests before pushing code, you would want to setup <code>pre-push</code> hooks. Let's try to create a pre commit hook.</p> <pre><code>$ echo \"echo this is from pre commit hook\" &gt; .git/hooks/pre-commit\n$ chmod +x .git/hooks/pre-commit\n</code></pre> <p>We basically create a file called <code>pre-commit</code> in hooks folder and make it executable. Now if we make a commit, we should see the message getting printed.</p> <pre><code>$ echo \"sample file\" &gt; sample.txt\n$ git add sample.txt\n$ git commit -m \"adding sample file\"\nthis is from pre commit hook     # &lt;===== THE MESSAGE FROM HOOK EXECUTION\n[master 9894e05] adding sample file\n1 file changed, 1 insertion(+)\ncreate mode 100644 sample.txt\n</code></pre>"},{"location":"level101/linux_basics/command_line_basics/","title":"Command Line Basics","text":""},{"location":"level101/linux_basics/command_line_basics/#lab-environment-setup","title":"Lab Environment Setup","text":"<p>One can use an online Bash interpreter to run all the commands that are provided as examples in this course. This will also help you in getting a hands-on experience of various Linux commands.</p> <p>REPL is one of the popular online Bash interpreters for running Linux commands. We will be using it for running all the commands mentioned in this course.</p>"},{"location":"level101/linux_basics/command_line_basics/#what-is-a-command","title":"What is a Command","text":"<p>A command is a program that tells the operating system to perform specific work. Programs are stored as files in Linux. Therefore, a command is also a file which is stored somewhere on the disk.</p> <p>Commands may also take additional arguments as input from the user. These arguments are called command line arguments. Knowing how to use the commands is important and there are many ways to get help in Linux, especially for commands. Almost every command will have some form of documentation, most commands will have a command-line argument <code>-h</code> or  <code>--help</code> that will display a reasonable amount of documentation. But the most popular documentation system in Linux is called <code>man</code> pages\u2014short for manual pages.</p> <p>Using <code>--help</code> to show the documentation for <code>ls</code> command.</p> <p></p>"},{"location":"level101/linux_basics/command_line_basics/#file-system-organization","title":"File System Organization","text":"<p>The Linux file system has a hierarchical (or tree-like) structure with its highest-level directory called <code>root</code> (denoted by <code>/</code>). Directories present inside the root directory stores files related to the system. These directories in turn can either store system files or application files or user-related files.</p> <p></p> Directory Description bin The executable program of most commonly used commands reside in <code>bin</code> directory dev This directory contains files related to devices on the system etc This directory contains all the system configuration files home This directory contains user-related files and directories lib This directory contains all the library files mnt This directory contains files related to mounted devices on the system proc This directory contains files related to the running processes on the system root This directory contains root user-related files and directories sbin This directory contains programs used for system administration tmp This directory is used to store temporary files on the system usr This directory is used to store application programs on the system"},{"location":"level101/linux_basics/command_line_basics/#commands-for-navigating-the-file-system","title":"Commands for Navigating the File System","text":"<p>There are three basic commands which are used frequently to navigate the file system:</p> <ul> <li> <p>ls</p> </li> <li> <p>pwd</p> </li> <li> <p>cd</p> </li> </ul> <p>We will now try to understand what each command does and how to use these commands. You should also practice the given examples on the online Bash shell.</p>"},{"location":"level101/linux_basics/command_line_basics/#pwd-print-working-directory","title":"pwd (print working directory)","text":"<p>At any given moment of time, we will be standing in a certain directory. To get the name of the directory in which we are standing, we can use the <code>pwd</code> command in Linux.</p> <p></p> <p>We will now use the <code>cd</code> command to move to a different directory and then print the working directory.</p> <p></p>"},{"location":"level101/linux_basics/command_line_basics/#cd-change-directory","title":"cd (change directory)","text":"<p>The <code>cd</code> command can be used to change the working directory. Using the command, you can move from one directory to another.</p> <p>In the below example, we are initially in the <code>root</code> directory. We have then used the <code>cd</code> command to change the directory.</p> <p></p>"},{"location":"level101/linux_basics/command_line_basics/#ls-list-files-and-directories","title":"ls (list files and directories)**","text":"<p>The <code>ls</code> command is used to list the contents of a directory. It will list down all the files and folders present in the given directory.</p> <p>If we just type <code>ls</code> in the shell, it will list all the files and directories present in the current directory.</p> <p></p> <p>We can also provide the directory name as argument to <code>ls</code> command. It will then list all the files and directories inside the given directory.</p> <p></p>"},{"location":"level101/linux_basics/command_line_basics/#commands-for-manipulating-files","title":"Commands for Manipulating Files","text":"<p>There are five basic commands which are used frequently to manipulate files:</p> <ul> <li> <p>touch</p> </li> <li> <p>mkdir</p> </li> <li> <p>cp</p> </li> <li> <p>mv</p> </li> <li> <p>rm</p> </li> </ul> <p>We will now try to understand what each command does and how to use these commands. You should also practice the given examples on the online Bash shell.</p>"},{"location":"level101/linux_basics/command_line_basics/#touch-create-new-file","title":"touch (create new file)","text":"<p>The <code>touch</code> command can be used to create an empty new file. This command is very useful for many other purposes, but we will discuss the simplest use case of creating a new file.</p> <p>General syntax of using <code>touch</code> command:</p> <pre><code>touch &lt;file_name&gt;\n</code></pre> <p></p>"},{"location":"level101/linux_basics/command_line_basics/#mkdir-create-new-directories","title":"mkdir (create new directories)","text":"<p>The <code>mkdir</code> command is used to create directories. You can use <code>ls</code> command to verify that the new directory is created.</p> <p>General syntax of using <code>mkdir</code> command:</p> <pre><code>mkdir &lt;directory_name&gt;\n</code></pre> <p></p>"},{"location":"level101/linux_basics/command_line_basics/#rm-delete-files-and-directories","title":"rm (delete files and directories)","text":"<p>The <code>rm</code> command can be used to delete files and directories. It is very important to note that this command permanently deletes the files and directories. It's almost impossible to recover these files and directories once you have executed <code>rm</code> command on them successfully. Do run this command with care.</p> <p>General syntax of using <code>rm</code> command:</p> <pre><code>rm &lt;file_name&gt;\n</code></pre> <p>Let's try to understand the <code>rm</code> command with an example. We will try to delete the file and directory we created using <code>touch</code> and <code>mkdir</code> command respectively.</p> <p></p>"},{"location":"level101/linux_basics/command_line_basics/#cp-copy-files-and-directories","title":"cp (copy files and directories)","text":"<p>The <code>cp</code> command is used to copy files and directories from one location to another. Do note that the <code>cp</code> command doesn't do any change to the original files or directories. The original files or directories and their copy both co-exist after running <code>cp</code> command successfully.</p> <p>General syntax of using <code>cp</code> command:</p> <pre><code>cp &lt;source_path&gt; &lt;destination_path&gt;\n</code></pre> <p>We are currently in the <code>/home/runner</code> directory. We will use the <code>mkdir</code> command to create a new directory named <code>test_directory</code>. We will now try to copy the <code>_test_runner.py</code> file to the directory we created just now.</p> <p></p> <p>Do note that nothing happened to the original <code>_test_runner.py</code> file. It's still there in the current directory. A new copy of it got created inside the <code>test_directory</code>.</p> <p></p> <p>We can also use the <code>cp</code> command to copy the whole directory from one location to another. Let's try to understand this with an example.</p> <p></p> <p>We again used the <code>mkdir</code> command to create a new directory called <code>another_directory</code>. We then used the <code>cp</code> command along with an additional argument <code>-r</code> to copy the <code>test_directory</code>.</p> <p>mv (move files and directories)</p> <p>The <code>mv</code> command can either be used to move files or directories from one location to another or it can be used to rename files or directories. Do note that moving files and copying them are very different. When you move the files or directories, the original copy is lost.</p> <p>General syntax of using <code>mv</code> command:</p> <pre><code>mv &lt;source_path&gt; &lt;destination_path&gt;\n</code></pre> <p>In this example, we will use the <code>mv</code> command to move the <code>_test_runner.py</code> file to <code>test_directory</code>. In this case, this file already exists in <code>test_directory</code>. The <code>mv</code> command will just replace it. Do note that the original file doesn't exist in the current directory after <code>mv</code> command ran successfully.</p> <p></p> <p>We can also use the <code>mv</code> command to move a directory from one location to another. In this case, we do not need to use the <code>-r</code> flag that we did while using the <code>cp</code> command. Do note that the original directory will not exist if we use <code>mv</code> command.</p> <p>One of the important uses of the <code>mv</code> command is to rename files and directories. Let's see how we can use this command for renaming.</p> <p>We have first changed our location to <code>test_directory</code>. We then use the <code>mv</code> command to rename the <code>_test_runner.py</code> file to <code>test.py</code>.</p> <p></p>"},{"location":"level101/linux_basics/command_line_basics/#commands-for-viewing-files","title":"Commands for Viewing Files","text":"<p>There are five basic commands which are used frequently to view the files:</p> <ul> <li> <p>cat</p> </li> <li> <p>head</p> </li> <li> <p>tail</p> </li> <li> <p>more</p> </li> <li> <p>less</p> </li> </ul> <p>We will now try to understand what each command does and how to use these commands. You should also practice the given examples on the online Bash shell.</p> <p>We will create a new file called <code>numbers.txt</code> and insert numbers from 1 to 100 in this file. Each number will be in a separate line.</p> <p></p> <p>Do not worry about the above command now. It's an advanced command which is used to generate numbers. We have then used a redirection operator to push these numbers to the file. We will be discussing I/O redirection in the later sections.</p>"},{"location":"level101/linux_basics/command_line_basics/#cat","title":"cat","text":"<p>The most simplest use of <code>cat</code> command is to print the contents of the file on your output screen. This command is very useful and can be used for many other purposes. We will study about other use cases later.</p> <p></p> <p>You can try to run the above command and you will see numbers being printed from 1 to 100 on your screen. You will need to scroll up to view all the numbers.</p>"},{"location":"level101/linux_basics/command_line_basics/#head","title":"head","text":"<p>The <code>head</code> command displays the first 10 lines of the file by default. We can include additional arguments to display as many lines as we want from the top.</p> <p>In this example, we are only able to see the first 10 lines from the file when we use the <code>head</code> command.</p> <p></p> <p>By default, <code>head</code> command will only display the first 10 lines. If we want to specify the number of lines we want to see from start, use the <code>-n</code> argument to provide the input.</p> <p></p>"},{"location":"level101/linux_basics/command_line_basics/#tail","title":"tail","text":"<p>The <code>tail</code> command displays the last 10 lines of the file by default. We can include additional arguments to display as many lines as we want from the end of the file.</p> <p></p> <p>By default, the <code>tail</code> command will only display the last 10 lines. If we want to specify the number of lines we want to see from the end, use <code>-n</code> argument to provide the input.</p> <p></p> <p>In this example, we are only able to see the last 5 lines from the file when we use the <code>tail</code> command with explicit <code>-n</code> option.</p>"},{"location":"level101/linux_basics/command_line_basics/#more","title":"more","text":"<p>The <code>more</code> command displays the contents of a file or a command output,  displaying one screen at a time in case the file is large (Eg: log files). It also allows forward navigation and limited backward navigation in the file.</p> <p></p> <p>The <code>more</code> command displays as much as can fit on the current screen and waits for user input to advance. Forward navigation can be done by pressing <code>Enter</code>, which advances the output by one line and <code>Space</code>, which advances the output by one screen.</p>"},{"location":"level101/linux_basics/command_line_basics/#less","title":"less","text":"<p>The <code>less</code> command is an improved version of <code>more</code>. It displays the contents of a file or a command output, one page at a time. It allows backward navigation as well as forward navigation in the file and also has search options. We can use <code>arrow keys</code> for advancing backward or forward by one line. For moving forward by one page, press <code>Space</code> and for moving backward by one page, press <code>b</code> on your keyboard. You can go to the beginning and the end of a file instantly.</p>"},{"location":"level101/linux_basics/command_line_basics/#echo-command-in-linux","title":"Echo Command in Linux","text":"<p>The <code>echo</code> command is one of the simplest commands that is used in the shell. This command is equivalent to <code>print</code> in other programming languages.</p> <p>The <code>echo</code> command prints the given input string on the screen.</p> <p></p>"},{"location":"level101/linux_basics/command_line_basics/#text-processing-commands","title":"Text Processing Commands","text":"<p>In the previous section, we learned how to view the content of a file. In many cases, we will be interested in performing the below operations:</p> <ul> <li> <p>Print only the lines which contain a particular word(s)</p> </li> <li> <p>Replace a particular word with another word in a file</p> </li> <li> <p>Sort the lines in a particular order</p> </li> </ul> <p>There are three basic commands which are used frequently to process texts:</p> <ul> <li> <p>grep</p> </li> <li> <p>sed</p> </li> <li> <p>sort</p> </li> </ul> <p>We will now try to understand what each command does and how to use these commands. You should also practice the given examples on the online Bash shell.</p> <p>We will create a new file called <code>numbers.txt</code> and insert numbers from 1 to 10 in this file. Each number will be in a separate line.</p> <p></p>"},{"location":"level101/linux_basics/command_line_basics/#grep","title":"grep","text":"<p>The <code>grep</code> command in its simplest form can be used to search particular words in a text file. It will display all the lines in a file that contains a particular input. The word we want to search is provided as an input to the <code>grep</code> command.</p> <p>General syntax of using <code>grep</code> command:</p> <pre><code>grep &lt;word_to_search&gt; &lt;file_name&gt;\n</code></pre> <p>In this example, we are trying to search for a string \"1\" in this file. The <code>grep</code> command outputs the lines where it found this string.</p> <p></p>"},{"location":"level101/linux_basics/command_line_basics/#sed","title":"sed","text":"<p>The <code>sed</code> command in its simplest form can be used to replace a text in a file.</p> <p>General syntax of using the <code>sed</code> command for replacement:</p> <pre><code>sed 's/&lt;text_to_replace&gt;/&lt;replacement_text&gt;/' &lt;file_name&gt;\n</code></pre> <p>Let's try to replace each occurrence of \"1\" in the file with \"3\" using <code>sed</code> command.</p> <p></p> <p>The content of the file will not change in the above example. To do so, we have to use an extra argument <code>-i</code> so that the changes are reflected back in the file.</p>"},{"location":"level101/linux_basics/command_line_basics/#sort","title":"sort","text":"<p>The <code>sort</code> command can be used to sort the input provided to it as an argument. By default, it will sort in increasing order.</p> <p>Let's first see the content of the file before trying to sort it.</p> <p></p> <p>Now, we will try to sort the file using the <code>sort</code> command. The <code>sort</code> command sorts the content in lexicographical order.</p> <p></p> <p>The content of the file will not change in the above example.</p>"},{"location":"level101/linux_basics/command_line_basics/#io-redirection","title":"I/O Redirection","text":"<p>Each open file gets assigned a file descriptor. A file descriptor is an unique identifier for open files in the system. There are always three default files open, <code>stdin</code> (the keyboard), <code>stdout</code> (the screen), and <code>stderr</code> (error messages output to the screen). These files can be redirected.</p> <p>Everything is a file in Linux - https://unix.stackexchange.com/questions/225537/everything-is-a-file</p> <p>Till now, we have displayed all the output on the screen which is the standard output. We can use some special operators to redirect the output of the command to files or even to the input of other commands. I/O redirection is a very powerful feature.</p> <p>In the below example, we have used the <code>&gt;</code> operator to redirect the output of <code>ls</code> command to <code>output.txt</code> file.</p> <p></p> <p>In the below example, we have redirected the output from <code>echo</code> command to a file.</p> <p></p> <p>We can also redirect the output of a command as an input to another command. This is possible with the help of pipes.</p> <p>In the below example, we have passed the output of <code>cat</code> command as an input to <code>grep</code> command using pipe (<code>|</code>) operator.</p> <p></p> <p>In the below example, we have passed the output of <code>sort</code> command as an input to <code>uniq</code> command using pipe (<code>|</code>) operator. The <code>uniq</code> command only prints the unique numbers from the input.</p> <p></p> <p>I/O redirection - https://tldp.org/LDP/abs/html/io-redirection.html</p>"},{"location":"level101/linux_basics/conclusion/","title":"Conclusion","text":"<p>We have covered the basics of Linux operating systems and basic commands used in Linux. We have also covered the Linux server administration commands.</p> <p>We hope that this course will make it easier for you to operate on the command line.</p>"},{"location":"level101/linux_basics/conclusion/#applications-in-sre-role","title":"Applications in SRE Role","text":"<ol> <li>As a SRE, you will be required to perform some general tasks on these Linux servers. You will also be using the command line when you are troubleshooting issues.</li> <li>Moving from one location to another in the filesystem will require the help of <code>ls</code>, <code>pwd</code> and <code>cd</code> commands.</li> <li>You may need to search some specific information in the log files. <code>grep</code> command would be very useful here. I/O redirection will become handy if you want to store the output in a file or pass it as an input to another command.</li> <li><code>tail</code> command is very useful to view the latest data in the log file.</li> <li>Different users will have different permissions depending on their roles. We will also not want everyone in the company to access our servers for security reasons. Users permissions can be restricted with <code>chown</code>, <code>chmod</code> and <code>chgrp</code> commands.</li> <li><code>ssh</code> is one of the most frequently used commands for a SRE. Logging into servers and troubleshooting along with performing basic administration tasks will only be possible if we are able to login into the server.</li> <li>What if we want to run an Apache server or NGINX on a server? We will first install it using the package manager. Package management commands become important here.</li> <li>Managing services on servers is another critical responsibility of a SRE. <code>systemd</code>-related commands can help in troubleshooting issues. If a service goes down, we can start it using <code>systemctl start</code> command. We can also stop a service in case it is not needed.</li> <li>Monitoring is another core responsibility of a SRE. Memory and CPU are two important system-level metrics which should be monitored. Commands like <code>top</code> and <code>free</code> are quite helpful here.</li> <li>If a service throws an error, how do we find out the root cause of the error? We will certainly need to check logs to find out the whole stack trace of the error. The log file will also tell us the number of times the error has occurred along with time when it started.</li> </ol>"},{"location":"level101/linux_basics/conclusion/#useful-courses-and-tutorials","title":"Useful Courses and Tutorials","text":"<ul> <li>Edx basic linux commands course</li> <li>Edx Red Hat Enterprise Linux Course</li> <li>https://linuxcommand.org/lc3_learning_the_shell.php</li> </ul>"},{"location":"level101/linux_basics/intro/","title":"Linux Basics","text":""},{"location":"level101/linux_basics/intro/#introduction","title":"Introduction","text":""},{"location":"level101/linux_basics/intro/#prerequisites","title":"Prerequisites","text":"<ul> <li>Should be comfortable in using any operating systems like Windows, Linux or</li> <li>Expected to have fundamental knowledge of operating systems</li> </ul>"},{"location":"level101/linux_basics/intro/#what-to-expect-from-this-course","title":"What to expect from this course","text":"<p>This course is divided into three parts. In the first part, we cover the fundamentals of Linux operating systems. We will talk about Linux architecture, Linux distributions and uses of Linux operating systems. We will also talk about the difference between GUI and CLI.</p> <p>In the second part, we cover some basic commands used in Linux.  We will focus on commands used for navigating the file system, viewing and manipulating files, I/O redirection, etc.</p> <p>In the third part, we cover Linux system administration. This includes day-to-day tasks  performed by Linux admins, like managing users/groups, managing file permissions,  monitoring system performance, log files etc.</p> <p>In the second and third part, we will be showing examples to understand the concepts.</p>"},{"location":"level101/linux_basics/intro/#what-is-not-covered-under-this-course","title":"What is not covered under this course","text":"<p>We are not covering advanced Linux commands and Bash scripting in this course. We will also not be covering Linux internals. </p>"},{"location":"level101/linux_basics/intro/#course-contents","title":"Course Contents","text":"<p>The following topics has been covered in this course:</p> <ul> <li>Introduction to Linux<ul> <li>What are Linux Operating Systems</li> <li>What are popular Linux distributions</li> <li>Uses of Linux Operating Systems</li> <li>Linux Architecture</li> <li>Graphical user interface (GUI) vs Command line interface (CLI)</li> </ul> </li> <li>Command Line Basics<ul> <li>Lab Environment Setup</li> <li>What is a Command</li> <li>File System Organization</li> <li>Navigating File System</li> <li>Manipulating Files</li> <li>Viewing Files</li> <li>Echo Command</li> <li>Text Processing Commands</li> <li>I/O Redirection</li> </ul> </li> <li>Linux system administration<ul> <li>Lab Environment Setup</li> <li>User/Groups management</li> <li>Becoming a Superuser</li> <li>File Permissions</li> <li>SSH Command</li> <li>Package Management</li> <li>Process Management</li> <li>Memory Management</li> <li>Daemons and Systemd</li> <li>Logs</li> </ul> </li> <li>Conclusion<ul> <li>Applications in SRE Role</li> <li>Useful Courses and tutorials</li> </ul> </li> </ul>"},{"location":"level101/linux_basics/intro/#what-are-linux-operating-systems","title":"What are Linux operating systems","text":"<p>Most of us are familiar with the Windows operating system used in more than  75% of the personal computers. The Windows operating systems are based on Windows NT kernel. </p> <p>A kernel is the most important part of an operating system\u2014it performs important functions like process management, memory management, filesystem management, etc.</p> <p>Linux operating systems are based on the Linux kernel. A Linux-based operating system will consist of Linux kernel, GUI/CLI, system libraries and system utilities. The Linux kernel was independently developed and released by Linus Torvalds. The Linux kernel is free and open-source (See  https://github.com/torvalds/linux).</p> <p>Linux is a kernel and not a complete operating system. Linux kernel is combined with GNU system to make a complete operating system. Therefore, Linux-based operating systems are also called as GNU/Linux systems. GNU is an extensive collection of free softwares like compiler, debugger, C library etc. (See Linux and the GNU  System)</p> <p>History of Linux - https://en.wikipedia.org/wiki/History_of_Linux</p>"},{"location":"level101/linux_basics/intro/#what-are-popular-linux-distributions","title":"What are popular Linux distributions","text":"<p>A Linux distribution (distro) is an operating system based on the Linux kernel and a package management system. A package management system consists of tools that help in installing, upgrading, configuring and removing softwares on the operating system.</p> <p>Software are usually adopted to a distribution and are packaged in a distro-specific format. These packages are available through a distro-specific  repository. Packages are installed and managed in the operating system by a package manager.</p> <p>List of popular Linux distributions:</p> <ul> <li> <p>Fedora</p> </li> <li> <p>Ubuntu</p> </li> <li> <p>Debian</p> </li> <li> <p>Centos</p> </li> <li> <p>Red Hat Enterprise Linux</p> </li> <li> <p>Suse</p> </li> <li> <p>Arch Linux</p> </li> </ul> Packaging systems Distributions Package manager Debian style (<code>.deb</code>) Debian, Ubuntu APT Red Hat style (<code>.rpm</code>) Fedora, CentOS, Red Hat Enterprise Linux YUM"},{"location":"level101/linux_basics/intro/#linux-architecture","title":"Linux Architecture","text":"<ul> <li> <p>The Linux kernel is monolithic in nature.</p> </li> <li> <p>System calls are used to interact with the Linux kernel space.</p> </li> <li> <p>Kernel code can only be executed in the kernel mode. Non-kernel code is executed in the user mode.</p> </li> <li> <p>Device drivers are used to communicate with the hardware devices.</p> </li> </ul>"},{"location":"level101/linux_basics/intro/#uses-of-linux-operating-systems","title":"Uses of Linux Operating Systems","text":"<p>Operating system based on Linux kernel are widely used in:</p> <ul> <li> <p>Personal computers</p> </li> <li> <p>Servers</p> </li> <li> <p>Mobile phones - Android is based on Linux operating system</p> </li> <li> <p>Embedded devices - watches, televisions, traffic lights, etc.</p> </li> <li> <p>Satellites</p> </li> <li> <p>Network devices - routers, switches, etc.</p> </li> </ul>"},{"location":"level101/linux_basics/intro/#graphical-user-interface-gui-vs-command-line-interface-cli","title":"Graphical user interface (GUI) vs Command line interface (CLI)","text":"<p>A user interacts with a computer with the help of user interfaces. The user interface can be either GUI or CLI.</p> <p>Graphical user interface allows a user to interact with the computer using graphics such as icons and images. When a user clicks on an icon to open an application on a computer, he or she is actually using the GUI. It's easy to perform tasks using GUI.</p> <p>Command line interface allows a user to interact with the computer using commands. A user types the command in a terminal and the system helps in executing these commands. A new user with experience on GUI may find it  difficult to interact with CLI as he/she needs to be aware of the commands to perform a particular operation.</p>"},{"location":"level101/linux_basics/intro/#shell-vs-terminal","title":"Shell vs Terminal","text":"<p>Shell is a program that takes commands from the users and gives them to the operating system for processing. Shell is an example of a CLI (command line interface). Bash is one of the most popular shell programs available on Linux servers. Other popular shell programs are zsh, ksh and tcsh.</p> <p>Terminal is a program that opens a window and lets you interact with the shell. Some popular examples of terminals are GNOME-terminal, xterm, Konsole, etc.</p> <p>Linux users do use the terms shell, terminal, prompt, console, etc. interchangeably. In simple terms, these all refer to a way of taking commands from the user.</p>"},{"location":"level101/linux_basics/linux_server_administration/","title":"Linux Server Administration","text":"<p>In this course, will try to cover some of the common tasks that a Linux server administrator performs. We will first try to understand what a particular command does and then try to understand the commands using examples. Do keep in mind that it's very important to practice the Linux commands on your own.</p>"},{"location":"level101/linux_basics/linux_server_administration/#lab-environment-setup","title":"Lab Environment Setup","text":"<ul> <li> <p>Install docker on your system - https://docs.docker.com/engine/install/ OR you can use online Docker playground</p> </li> <li> <p>We will be running all the commands on Red Hat Enterprise Linux (RHEL) 8 system.</p> </li> </ul> <p></p> <ul> <li>We will run most of the commands used in this module in the above Docker container.</li> </ul>"},{"location":"level101/linux_basics/linux_server_administration/#multi-user-operating-systems","title":"Multi-User Operating Systems","text":"<p>An operating system is considered as multi-user if it allows multiple people/users to use a computer and not affect each other's files and preferences. Linux-based operating systems are multi-user in nature as it allows multiple users to access the system at the same time. A typical computer will only have one keyboard and monitor but multiple users can log in via SSH if the computer is connected to the network. We will cover more about SSH later.</p> <p>As a server administrator, we are mostly concerned with the Linux servers which are physically present at a very large distance from us. We can connect to these servers with the help of remote login methods like SSH.</p> <p>Since Linux supports multiple users, we need to have a method which can protect the users from each other. One user should not be able to access and modify files of other users</p>"},{"location":"level101/linux_basics/linux_server_administration/#usergroup-management","title":"User/Group Management","text":"<ul> <li> <p>Users in Linux has an associated user ID called UID attached to them.</p> </li> <li> <p>Users also has a home directory and a login shell associated with them.</p> </li> <li> <p>A group is a collection of one or more users. A group makes it easier to share permissions among a group of users.</p> </li> <li> <p>Each group has a group ID called GID associated with it.</p> </li> </ul>"},{"location":"level101/linux_basics/linux_server_administration/#id-command","title":"id command","text":"<p><code>id</code> command can be used to find the <code>uid</code> and <code>gid</code> associated with an user. It also lists down the groups to which the user belongs to.</p> <p>The <code>uid</code> and <code>gid</code> associated with the root user is 0.</p> <p></p> <p>A good way to find out the current user in Linux is to use the <code>whoami</code> command.</p> <p></p> <p><code>root</code> user or superuser is the most privileged user with unrestricted access to all the resources on the system. It has UID 0</p>"},{"location":"level101/linux_basics/linux_server_administration/#important-files-associated-with-usersgroups","title":"Important files associated with users/groups","text":"Files Description /etc/passwd Stores the user name, the <code>uid</code>, the <code>gid</code>, the home directory, the login shell etc /etc/shadow Stores the password associated with the users /etc/group Stores information about different groups on the system <p>If you want to understand each field discussed in the above outputs, you can go through below links:</p> <ul> <li> <p>https://tldp.org/LDP/lame/LAME/linux-admin-made-easy/shadow-file-formats.html</p> </li> <li> <p>https://tldp.org/HOWTO/User-Authentication-HOWTO/x71.html</p> </li> </ul>"},{"location":"level101/linux_basics/linux_server_administration/#important-commands-for-managing-users","title":"Important commands for managing users","text":"<p>Some of the commands which are used frequently to manage users/groups on Linux are following:</p> <ul> <li><code>useradd</code> - Creates a new user</li> <li><code>passwd</code> - Adds or modifies passwords for a user</li> <li><code>usermod</code> - Modifies attributes of an user</li> <li><code>userdel</code> - Deletes an user</li> </ul>"},{"location":"level101/linux_basics/linux_server_administration/#useradd","title":"useradd","text":"<p>The <code>useradd</code> command adds a new user in Linux.</p> <p>We will create a new user <code>shivam</code>. We will also verify that the user has been created by tailing the <code>/etc/passwd</code> file. The <code>uid</code> and <code>gid</code> are 1000 for the newly created user. The home directory assigned to the user is <code>/home/shivam</code> and the login shell assigned is <code>/bin/bash</code>. Do note that the user home directory and login shell can be modified later on.</p> <p></p> <p>If we do not specify any value for attributes like home directory or login shell, default values will be assigned to the user. We can also override these default values when creating a new user.</p> <p></p>"},{"location":"level101/linux_basics/linux_server_administration/#passwd","title":"passwd","text":"<p>The <code>passwd</code> command is used to create or modify passwords for a user.</p> <p>In the above examples, we have not assigned any password for users <code>shivam</code> or <code>amit</code> while creating them.</p> <p><code>!!</code> in an account entry in shadow means the account of an user has been created, but not yet given a password.</p> <p></p> <p>Let's now try to create a password for user <code>shivam</code>.</p> <p></p> <p>Do remember the password as we will be later using examples where it will be useful.</p> <p>Also, let's change the password for the root user now. When we switch from a normal user to root user, it will request you for a password. Also, when you login using root user, the password will be asked.</p> <p></p>"},{"location":"level101/linux_basics/linux_server_administration/#usermod","title":"usermod","text":"<p>The <code>usermod</code> command is used to modify the attributes of an user like the home directory or the shell.</p> <p>Let's try to modify the login shell of user <code>amit</code> to <code>/bin/bash</code>.</p> <p></p> <p>In a similar way, you can also modify many other attributes for a user. Try <code>usermod -h</code> for a list of attributes you can modify.</p>"},{"location":"level101/linux_basics/linux_server_administration/#userdel","title":"userdel","text":"<p>The <code>userdel</code> command is used to remove a user on Linux. Once we remove a user, all the information related to that user will be removed.</p> <p>Let's try to delete the user <code>amit</code>. After deleting the user, you will not find the entry for that user in <code>/etc/passwd</code> or <code>/etc/shadow</code> file.</p> <p></p>"},{"location":"level101/linux_basics/linux_server_administration/#important-commands-for-managing-groups","title":"Important commands for managing groups","text":"<p>Commands for managing groups are quite similar to the commands used for managing users. Each command is not explained in detail here as they are quite similar. You can try running these commands on your system.</p> Command Description groupadd &lt;group_name&gt; Creates a new group groupmod &lt;group_name&gt; Modifies attributes of a group groupdel &lt;group_name&gt; Deletes a group gpasswd  &lt;group_name&gt; Modifies password for group <p></p> <p>We will now try to add user <code>shivam</code> to the group we have created above.</p> <p></p>"},{"location":"level101/linux_basics/linux_server_administration/#becoming-a-superuser","title":"Becoming a Superuser","text":"<p>Before running the below commands, do make sure that you have set up a password for user <code>shivam</code> and user <code>root</code> using the <code>passwd</code> command described in the above section.</p> <p>The <code>su</code> command can be used to switch users in Linux. Let's now try to switch to user <code>shivam</code>.</p> <p></p> <p>Let's now try to open the <code>/etc/shadow</code> file.</p> <p></p> <p>The operating system didn't allow the user <code>shivam</code> to read the content of the <code>/etc/shadow</code> file. This is an important file in Linux which stores the passwords of users. This file can only be accessed by <code>root</code> or users who have the <code>superuser</code> privileges.</p> <p>The <code>sudo</code> command allows a user to run commands with the security privileges of the root user. Do remember that the root user has all the privileges on a system. We can also use <code>su</code> command to switch to the root user and open the above file but doing that will require the password of the root user. An alternative way which is preferred on most modern operating systems is to use <code>sudo</code> command for becoming a superuser. Using this way, a user has to enter his/her password and they need to be a part of the <code>sudo</code> group.</p> <p>How to provide superpriveleges to other users ?</p> <p>Let's first switch to the root user using <code>su</code> command. Do note that using the below command will need you to enter the password for the root user.</p> <p></p> <p>In case, you forgot to set a password for the root user, type <code>exit</code> and you will be back as the root user. Now, set up a password using the <code>passwd</code> command.</p> <p>The file <code>/etc/sudoers</code> holds the names of users permitted to invoke <code>sudo</code>. In Red Hat operating systems, this file is not present by default. We will need to install <code>sudo</code>.</p> <p></p> <p>We will discuss the <code>yum</code> command in detail in later sections.</p> <p>Try to open the <code>/etc/sudoers</code> file on the system. The file has a lot of information. This file stores the rules that users must follow when running the <code>sudo</code> command. For example, <code>root</code> is allowed to run any commands from anywhere.</p> <p></p> <p>One easy way of providing root access to users is to add them to a group which has permissions to run all the commands. <code>wheel</code> is a group in Red Hat Linux with such privileges.</p> <p></p> <p>Let's add the user <code>shivam</code> to this group so that it also has <code>sudo</code> privileges.</p> <p></p> <p>Let's now switch back to user <code>shivam</code> and try to access the <code>/etc/shadow</code> file.</p> <p></p> <p>We need to use <code>sudo</code> before running the command since it can only be accessed with the <code>sudo</code> privileges. We have already given <code>sudo</code> privileges to user <code>shivam</code> by adding him to the group <code>wheel</code>.</p>"},{"location":"level101/linux_basics/linux_server_administration/#file-permissions","title":"File Permissions","text":"<p>On a Linux operating system, each file and directory is assigned access permissions for the owner of the file, the members of a group of related users and everybody else. This is to make sure that one user is not allowed to access the files and resources of another user.</p> <p>To see the permissions of a file, we can use the <code>ls</code> command. Let's look at the permissions of <code>/etc/passwd</code> file.</p> <p></p> <p>Let's go over some of the important fields in the output that are related to file permissions.</p> <p></p> <p></p>"},{"location":"level101/linux_basics/linux_server_administration/#chmod-command","title":"Chmod command","text":"<p>The <code>chmod</code> command is used to modify files and directories permissions in Linux.</p> <p>The <code>chmod</code> command accepts permissions in as a numerical argument. We can think of permission as a series of bits with 1 representing True or allowed and 0 representing False or not allowed.</p> Permission rwx Binary Decimal Read, write and execute rwx 111 7 Read and write rw- 110 6 Read and execute r-x 101 5 Read only r-- 100 4 Write and execute -wx 011 3 Write only -w- 010 2 Execute only --x 001 1 None --- 000 0 <p>We will now create a new file and check the permission of the file.</p> <p></p> <p>The group owner doesn't have the permission to write to this file. Let's give the group owner or root the permission to write to it using <code>chmod</code> command.</p> <p></p> <p><code>chmod</code> command can be also used to change the permissions of a directory in the similar way.</p>"},{"location":"level101/linux_basics/linux_server_administration/#chown-command","title":"Chown command","text":"<p>The <code>chown</code> command is used to change the owner of files or directories in Linux.</p> <p>Command syntax: <code>chown \\&lt;new_owner\\&gt; \\&lt;file_name\\&gt;</code></p> <p></p> <p>In case, we do not have <code>sudo</code> privileges, we need to use <code>sudo</code> command. Let's switch to user <code>shivam</code> and try changing the owner. We have also changed the owner of the file to <code>root</code> before running the below command.</p> <p></p> <p>Chown command can also be used to change the owner of a directory in the similar way.</p>"},{"location":"level101/linux_basics/linux_server_administration/#chgrp-command","title":"Chgrp command","text":"<p>The <code>chgrp</code> command can be used to change the group ownership of files or directories in Linux. The syntax is very similar to that of <code>chown</code> command.</p> <p></p> <p><code>chgrp</code> command can also be used to change the owner of a directory in the similar way.</p>"},{"location":"level101/linux_basics/linux_server_administration/#ssh-command","title":"SSH Command","text":"<p>The <code>ssh</code> command is used for logging into the remote systems, transfer files between systems and for executing commands on a remote machine. <code>SSH</code> stands for secure shell and is used to provide an encrypted secured connection between two hosts over an insecure network like the internet.</p> <p>Reference: https://www.ssh.com/ssh/command/</p> <p>We will now discuss passwordless authentication which is secure and most commonly used for <code>ssh</code> authentication.</p>"},{"location":"level101/linux_basics/linux_server_administration/#passwordless-authentication-using-ssh","title":"Passwordless Authentication Using SSH","text":"<p>Using this method, we can <code>ssh</code> into hosts without entering the password. This method is also useful when we want some scripts to perform ssh-related tasks.</p> <p>Passwordless authentication requires the use of a public and private key pair. As the name implies, the public key can be shared with anyone but the private key should be kept private. Let's not get into the details of how this authentication works. You can read more about it here</p> <p>Steps for setting up a passwordless authentication with a remote host:</p> <ol> <li> <p>Generating public-private key pair  </p> <p>If we already have a key pair stored in <code>~/.ssh</code> directory, we will not need to generate keys again.</p> <p>Install <code>openssh</code> package which contains all the commands related to <code>ssh</code>.</p> <p></p> <p>Generate a key pair using the <code>ssh-keygen</code> command. One can choose the default values for all prompts.</p> <p></p> <p>After running the <code>ssh-keygen</code> command successfully, we should see two keys present in the <code>~/.ssh</code> directory. <code>id_rsa</code> is the private key and <code>id_rsa.pub</code> is the public key. Do note that the private key can only be read and modified by you.</p> <p></p> </li> <li> <p>Transferring the public key to the remote host</p> <p>There are multiple ways to transfer the public key to the remote server. We will look at one of the most common ways of doing it using the <code>ssh-copy-id</code> command.</p> <p></p> <p>Install the <code>openssh-clients</code> package to use <code>ssh-copy-id</code> command.</p> <p></p> <p>Use the <code>ssh-copy-id</code> command to copy your public key to the remote host.</p> <p></p> <p>Now, <code>ssh</code> into the remote host using the password authentication.</p> <p></p> <p>Our public key should be there in <code>~/.ssh/authorized_keys</code> now.</p> <p></p> <p><code>~/.ssh/authorized_key</code> contains a list of public keys. The users associated with these public keys have the <code>ssh</code> access into the remote host.</p> </li> </ol>"},{"location":"level101/linux_basics/linux_server_administration/#how-to-run-commands-on-a-remote-host","title":"How to run commands on a remote host ?","text":"<p>General syntax: </p> <pre><code>ssh \\&lt;user\\&gt;@\\&lt;hostname/hostip\\&gt; \\&lt;command\\&gt;\n</code></pre> <p></p>"},{"location":"level101/linux_basics/linux_server_administration/#how-to-transfer-files-from-one-host-to-another-host","title":"How to transfer files from one host to another host ?","text":"<p>General syntax:</p> <pre><code>scp \\&lt;source\\&gt; \\&lt;destination\\&gt;\n</code></pre> <p></p>"},{"location":"level101/linux_basics/linux_server_administration/#package-management","title":"Package Management","text":"<p>Package management is the process of installing and managing software on the system. We can install the packages which we require from the Linux package distributor. Different distributors use different packaging systems.</p> Packaging systems Distributions Debian style (<code>.deb</code>) Debian, Ubuntu Red Hat style (<code>.rpm</code>) Fedora, CentOS, Red Hat Enterprise Linux <p>Popular Packaging Systems in Linux</p> Command Description yum install &lt;package_name&gt; Installs a package on your system yum update &lt;package_name&gt; Updates a package to its latest available version yum remove &lt;package_name&gt; Removes a package from your system yum search &lt;keyword&gt; Searches for a particular keyword <p>DNF is the successor to YUM which is now used in Fedora for installing and managing packages. DNF may replace YUM in the future on all RPM-based Linux distributions.</p> <p></p> <p>We did find an exact match for the keyword <code>httpd</code> when we searched using <code>yum search</code> command. Let's now install the <code>httpd</code> package.</p> <p></p> <p>After <code>httpd</code> is installed, we will use the <code>yum remove</code> command to remove <code>httpd</code> package.</p> <p></p>"},{"location":"level101/linux_basics/linux_server_administration/#process-management","title":"Process Management","text":"<p>In this section, we will study about some useful commands that can be used to monitor the processes on Linux systems.</p>"},{"location":"level101/linux_basics/linux_server_administration/#ps-process-status","title":"ps (process status)","text":"<p>The <code>ps</code> command is used to know the information of a process or list of processes.</p> <p></p> <p>If you get an error \"ps command not found\" while running <code>ps</code> command, do install <code>procps</code> package.</p> <p><code>ps</code> without any arguments is not very useful. Let's try to list all the processes on the system by using the below command.</p> <p>Reference: https://unix.stackexchange.com/questions/106847/what-does-aux-mean-in-ps-aux</p> <p></p> <p>We can use an additional argument with <code>ps</code> command to list the information about the process with a specific process ID (PID).</p> <p></p> <p>We can use <code>grep</code> in combination with <code>ps</code> command to list only specific processes.</p> <p></p>"},{"location":"level101/linux_basics/linux_server_administration/#top","title":"top","text":"<p>The <code>top</code> command is used to show information about Linux processes running on the system in real time. It also shows a summary of the system information.</p> <p></p> <p>For each process, <code>top</code> lists down the process ID, owner, priority, state, CPU utilization, memory utilization and much more information. It also lists down the memory utilization and CPU utilization of the system as a whole along with system uptime and CPU load average.</p>"},{"location":"level101/linux_basics/linux_server_administration/#memory-management","title":"Memory Management","text":"<p>In this section, we will study about some useful commands that can be used to view information about the system memory.</p>"},{"location":"level101/linux_basics/linux_server_administration/#free","title":"free","text":"<p>The <code>free</code> command is used to display the memory usage of the system. The command displays the total free and used space available in the RAM along with space occupied by the caches/buffers.</p> <p></p> <p><code>free</code> command by default shows the memory usage in kilobytes. We can use an additional argument to get the data in human-readable format.</p> <p></p>"},{"location":"level101/linux_basics/linux_server_administration/#vmstat","title":"vmstat","text":"<p>The <code>vmstat</code> command can be used to display the memory usage along with additional information about IO and CPU usage.</p> <p></p>"},{"location":"level101/linux_basics/linux_server_administration/#checking-disk-space","title":"Checking Disk Space","text":"<p>In this section, we will study about some useful commands that can be used to view disk space on Linux.</p>"},{"location":"level101/linux_basics/linux_server_administration/#df-disk-free","title":"df (disk free)","text":"<p>The <code>df</code> command is used to display the free and available space for each mounted file system.</p> <p></p>"},{"location":"level101/linux_basics/linux_server_administration/#du-disk-usage","title":"du (disk usage)","text":"<p>The <code>du</code> command is used to display disk usage of files and directories on the system.</p> <p></p> <p>The below command can be used to display the top 5 largest directories in the <code>root</code> directory.</p> <p></p>"},{"location":"level101/linux_basics/linux_server_administration/#daemons","title":"Daemons","text":"<p>A computer program that runs as a background process is called a daemon. Traditionally, the name of daemon processes ends with <code>d</code> - <code>sshd</code>, <code>httpd</code>, etc. We cannot interact with a daemon process as they run in the background.</p> <p>Services and daemons are used interchangeably most of the time.</p>"},{"location":"level101/linux_basics/linux_server_administration/#systemd","title":"Systemd","text":"<p><code>systemd</code> is a system and service manager for Linux operating systems. <code>systemd</code> units are the building blocks of <code>systemd</code>. These units are represented by unit configuration files.</p> <p>The below examples shows the unit configuration files available at <code>/usr/lib/systemd/system</code> which are distributed by installed RPM packages. We are more interested in the configuration file that ends with service as these are service units.</p> <p></p>"},{"location":"level101/linux_basics/linux_server_administration/#managing-system-services","title":"Managing System Services","text":"<p>Service units end with <code>.service</code> file extension. <code>systemctl</code> command can be used to start/stop/restart the services managed by <code>systemd</code>.</p> Command Description systemctl start name.service Starts a service systemctl stop name.service Stops a service systemctl restart name.service Restarts a service systemctl status name.service Check the status of a service systemctl reload name.service Reload the configuration of a service"},{"location":"level101/linux_basics/linux_server_administration/#logs","title":"Logs","text":"<p>In this section, we will talk about some important files and directories which can be very useful for viewing system logs and applications logs in Linux. These logs can be very useful when you are troubleshooting on the system.</p> <p></p>"},{"location":"level101/linux_networking/conclusion/","title":"Conclusion","text":"<p>With this, we have traversed through the TCP/IP stack completely. We hope there will be a different perspective when one opens any website in the browser post the course.</p> <p>During the course we have also dissected what are common tasks in this pipeline which falls under the ambit of SRE.</p>"},{"location":"level101/linux_networking/conclusion/#post-training-exercises","title":"Post Training Exercises","text":"<ol> <li>Set up your own DNS resolver in the <code>dev</code> environment which acts as an authoritative DNS server for <code>example.com</code> and forwarder for other domains. Update <code>resolv.conf</code> to use the new DNS resolver running in <code>localhost</code>.</li> <li>Set up a site <code>dummy.example.com</code> in <code>localhost</code> and run a webserver with a self-signed certificate. Update the trusted CAs or pass self-signed CA\u2019s public key as a parameter so that <code>curl https://dummy.example.com -v</code> works properly without self-signed cert warning.</li> <li>Update the routing table to use another host (container/VM) in the same network as a gateway for <code>8.8.8.8/32</code> and run <code>ping 8.8.8.8</code>. Do the packet capture on the new gateway to see L3 hop is working as expected (might need to disable <code>icmp_redirect</code>).</li> </ol>"},{"location":"level101/linux_networking/dns/","title":"DNS","text":"<p>Domain Names are the simple human-readable names for websites. The Internet understands only IP addresses, but since memorizing incoherent numbers is not practical, domain names are used instead. These domain names are translated into IP addresses by the DNS infrastructure. When somebody tries to open www.linkedin.com in the browser, the browser tries to convert www.linkedin.com to an IP Address. This process is called DNS resolution. A simple pseudocode depicting this process looks this:</p> <pre><code>ip, err = getIPAddress(domainName)\nif err:\n  print(\"unknown Host Exception while trying to resolve:%s\".format(domainName))\n</code></pre> <p>Now, let\u2019s try to understand what happens inside the <code>getIPAddress</code> function. The browser would have a DNS cache of its own where it checks if there is a mapping for the <code>domainName</code> to an IP Address already available, in which case the browser uses that IP address. If no such mapping exists, the browser calls <code>gethostbyname</code> syscall to ask the operating system to find the IP address for the given <code>domainName</code>.</p> <pre><code>def getIPAddress(domainName):\n    resp, fail = lookupCache(domainName)\n    If not fail:\n       return resp\n    else:\n       resp, err = gethostbyname(domainName)\n       if err:\n         return null, err\n       else:\n          return resp\n</code></pre> <p>Now, let's understand what operating system kernel does when the gethostbyname function is called. The Linux operating system looks at the file /etc/nsswitch.conf file which usually has a line.</p> <pre><code>hosts:      files dns\n</code></pre> <p>This line means the OS has to look up first in file (<code>/etc/hosts</code>) and then use DNS protocol to do the resolution if there is no match in <code>/etc/hosts</code>.</p> <p>The file <code>/etc/hosts</code> is of format:</p> <p>IPAddress FQDN [FQDN].*</p> <pre><code>127.0.0.1 localhost.localdomain localhost\n::1 localhost.localdomain localhost\n</code></pre> <p>If a match exists for a domain in this file, then that IP address is returned by the OS. Let's add a line to this file:</p> <pre><code>127.0.0.1 test.linkedin.com\n</code></pre> <p>And then do ping test.linkedin.com.</p> <pre><code>ping test.linkedin.com -n\n</code></pre> <pre><code>PING test.linkedin.com (127.0.0.1) 56(84) bytes of data.\n64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.047 ms\n64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.036 ms\n64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.037 ms\n\n</code></pre> <p>As mentioned earlier, if no match exists in <code>/etc/hosts</code>, the OS tries to do a DNS resolution using the DNS protocol. The Linux system makes a DNS request to the first IP in <code>/etc/resolv.conf</code>. If there is no response, requests are sent to subsequent servers in <code>resolv.conf</code>. These servers in <code>resolv.conf</code> are called DNS resolvers. The DNS resolvers are populated by DHCP or statically configured by an administrator. Dig is a userspace DNS system which creates and sends request to DNS resolvers and prints the response it receives to the console.</p> <pre><code># run this command in one shell to capture all DNS requests\nsudo tcpdump -s 0 -A -i any port 53\n# make a dig request from another shell\ndig linkedin.com\n</code></pre> <pre><code>13:19:54.432507 IP 172.19.209.122.56497 &gt; 172.23.195.101.53: 527+ [1au] A? linkedin.com. (41)\n....E..E....@.n....z...e...5.1.:... .........linkedin.com.......)........\n13:19:54.485131 IP 172.23.195.101.53 &gt; 172.19.209.122.56497: 527 1/0/1 A 108.174.10.10 (57)\n....E..U..@.|.  ....e...z.5...A...............linkedin.com..............3..l.\n\n..)........\n</code></pre> <p>The packet capture shows a request is made to <code>172.23.195.101:53</code> (this is the resolver in <code>/etc/resolv.conf</code>) for linkedin.com and a response is received from <code>172.23.195.101</code> with the IP address of linkedin.com <code>108.174.10.10</code>.</p> <p>Now, let's try to understand how DNS resolver tries to find the IP address of linkedin.com. DNS resolver first looks at its cache. Since many devices in the network can query for the domain name linkedin.com, the name resolution result may already exist in the cache. If there is a cache miss, it starts the DNS resolution process. The DNS server breaks \u201clinkedin.com\u201d to \u201c.\u201d, \u201ccom.\u201d and \u201clinkedin.com.\u201d and starts DNS resolution from \u201c.\u201d. The \u201c.\u201d is called root domain and those IPs are known to the DNS resolver software. DNS resolver queries the root domain nameservers to find the right top-level domain (TLD) nameservers which could respond regarding details for \"com.\". The address of the TLD nameserver of \u201ccom.\u201d is returned. Now the DNS resolution service contacts the TLD nameserver for \u201ccom.\u201d to fetch the authoritative nameserver for \u201clinkedin.com\u201d. Once an authoritative nameserver of \u201clinkedin.com\u201d is known, the resolver contacts LinkedIn\u2019s nameserver to provide the IP address of \u201clinkedin.com\u201d. This whole process can be visualized by running the following:</p> <pre><code>dig +trace linkedin.com\n</code></pre> <pre><code>linkedin.com.       3600    IN  A   108.174.10.10\n</code></pre> <p>This DNS response has 5 fields where the first field is the request and the last field is the response. The second field is the Time-to-Live (TTL) which says how long the DNS response is valid in seconds. In this case, this mapping of linkedin.com is valid for 1 hour. This is how the resolvers and application (browser) maintain their cache. Any request for linkedin.com beyond 1 hour will be treated as a cache miss as the mapping has expired its TTL and the whole process has to be redone. The 4th field says the type of DNS response/request. Some of the various DNS query types are A, AAAA, NS, TXT, PTR, MX and CNAME.</p> <ul> <li>A record returns IPV4 address of the domain name</li> <li>AAAA record returns the IPV6 address of the domain Name</li> <li>NS record returns the authoritative nameserver for the domain name</li> <li>CNAME records are aliases to the domain names. Some domains point to other domain names and resolving the latter domain name gives an IP which is used as an IP for the former domain name as well. Example www.linkedin.com\u2019s IP address is the same as <code>2-01-2c3e-005a.cdx.cedexis.net</code>.</li> <li>For the brevity, we are not discussing other DNS record types, the RFC of each of these records are available here.</li> </ul> <pre><code>dig A linkedin.com +short\n108.174.10.10\n\n\ndig AAAA linkedin.com +short\n2620:109:c002::6cae:a0a\n\n\ndig NS linkedin.com +short\ndns3.p09.nsone.net.\ndns4.p09.nsone.net.\ndns2.p09.nsone.net.\nns4.p43.dynect.net.\nns1.p43.dynect.net.\nns2.p43.dynect.net.\nns3.p43.dynect.net.\ndns1.p09.nsone.net.\n\ndig www.linkedin.com CNAME +short\n2-01-2c3e-005a.cdx.cedexis.net.\n</code></pre> <p>Armed with these fundamentals of DNS lets see use cases where DNS is used by SREs.</p>"},{"location":"level101/linux_networking/dns/#applications-in-sre-role","title":"Applications in SRE role","text":"<p>This section covers some of the common solutions SRE can derive from DNS.</p> <ol> <li>Every company has to have its internal DNS infrastructure for intranet sites and internal services like databases and other internal applications like Wiki. So there has to be a DNS infrastructure maintained for those domain names by the infrastructure team. This DNS infrastructure has to be optimized and scaled so that it doesn\u2019t become a single point of failure. Failure of the internal DNS infrastructure can cause API calls of microservices to fail and other cascading effects.</li> <li>DNS can also be used for discovering services. For example the hostname <code>serviceb.internal.example.com</code> could list instances which run service <code>b</code> internally in <code>example.com</code> company. Cloud providers provide options to enable DNS discovery (example).</li> <li>DNS is used by cloud providers and CDN providers to scale their services. In Azure/AWS, Load Balancers are given a CNAME instead of IPAddress. They update the IPAddress of the Loadbalancers as they scale by changing the IP Address of alias domain names. This is one of the reasons why A records of such alias domains are short-lived like 1 minute.</li> <li>DNS can also be used to make clients get IP addresses closer to their location so that their HTTP calls can be responded faster if the company has a presence geographically distributed.</li> <li>SRE also has to understand since there is no verification in DNS infrastructure, these responses can be spoofed. This is safeguarded by other protocols like HTTPS (dealt later). DNSSEC protects from forged or manipulated DNS responses.</li> <li>Stale DNS cache can be a problem. Some apps might still be using expired DNS records for their API calls. This is something SRE has to be wary of when doing maintenance.</li> <li>DNS Loadbalancing and service discovery also has to understand TTL and the servers can be removed from the pool only after waiting till TTL post the changes are made to DNS records. If this is not done, a certain portion of the traffic will fail as the server is removed before the TTL.</li> </ol>"},{"location":"level101/linux_networking/http/","title":"HTTP","text":"<p>Till this point we have only got the IP address of linkedin.com. The HTML page of linkedin.com is served by HTTP protocol which the browser renders. Browser sends a HTTP request to the IP of the server determined above. Request has a verb GET, PUT, POST followed by a path and query parameters and lines of key-value pair which gives information about the client and capabilities of the client like contents it can accept and a body (usually in POST or PUT).</p> <pre><code># Eg. run the following in your container and have a look at the headers \ncurl linkedin.com -v\n</code></pre> <pre><code>* Connected to linkedin.com (108.174.10.10) port 80 (#0)\n&gt; GET / HTTP/1.1\n&gt; Host: linkedin.com\n&gt; User-Agent: curl/7.64.1\n&gt; Accept: */*\n&gt; \n&lt; HTTP/1.1 301 Moved Permanently\n&lt; Date: Mon, 09 Nov 2020 10:39:43 GMT\n&lt; X-Li-Pop: prod-esv5\n&lt; X-LI-Proto: http/1.1\n&lt; Location: https://www.linkedin.com/\n&lt; Content-Length: 0\n&lt; \n* Connection #0 to host linkedin.com left intact\n* Closing connection 0\n</code></pre> <p>Here, in the first line <code>GET</code> is the verb, <code>/</code> is the path and <code>1.1</code> is the HTTP protocol version. Then there are key-value pairs which give client capabilities and some details to the server. The server responds back with HTTP version, Status Code and Status message. Status codes <code>2xx</code> means success, <code>3xx</code> denotes redirection, <code>4xx</code> denotes client-side errors and <code>5xx</code> server-side errors.</p> <p>We will now jump in to see the difference between HTTP/1.0 and HTTP/1.1. </p> <pre><code>#On the terminal type\ntelnet  www.linkedin.com 80\n#Copy and paste the following with an empty new line at last in the telnet STDIN\nGET / HTTP/1.1\nHOST:linkedin.com\nUSER-AGENT: curl\n\n</code></pre> <p>This would get server response and waits for next input as the underlying connection to www.linkedin.com can be reused for further queries. While going through TCP, we can understand the benefits of this. But in HTTP/1.0, this connection will be immediately closed after the response meaning new connection has to be opened for each query. HTTP/1.1 can have only one inflight request in an open connection but connection can be reused for multiple requests one after another. One of the benefits of HTTP/2.0 over HTTP/1.1 is we can have multiple inflight requests on the same connection. We are restricting our scope to generic HTTP and not jumping to the intricacies of each protocol version but they should be straight forward to understand post the course.</p> <p>HTTP is called stateless protocol. This section we will try to understand what stateless means. Say we logged in to linkedin.com, each request to linkedin.com from the client will have no context of the user and it makes no sense to prompt user to login for each page/resource. This problem of HTTP is solved by COOKIE. A user is created a session when a user logs in. This session identifier is sent to the browser via SET-COOKIE header. The browser stores the COOKIE till the expiry set by the server and sends the cookie for each request from hereon for linkedin.com. More details on cookies are available here. Cookies are a critical piece of information like password and since HTTP is a plain text protocol, any man-in-the-middle can capture either password or cookies and can breach the privacy of the user. Similarly as discussed during DNS, a spoofed IP of linkedin.com can cause a phishing attack on users where an user can give LinkedIn\u2019s password to login on the malicious site. To solve both problems, HTTPS came in place and HTTPS has to be mandated.</p> <p>HTTPS has to provide server identification and encryption of data between client and server. The server administrator has to generate a private-public key pair and certificate request. This certificate request has to be signed by a certificate authority which converts the certificate request to a certificate. The server administrator has to update the certificate and private key to the webserver. The certificate has details about the server (like domain name for which it serves, expiry date), public key of the server. The private key is a secret to the server and losing the private key loses the trust the server provides. When clients connect, the client sends a HELLO. The server sends its certificate to the client. The client checks the validity of the cert by seeing if it is within its expiry time, if it is signed by a trusted authority and the hostname in the cert is the same as the server. This validation makes sure the server is the right server and there is no phishing. Once that is validated, the client negotiates a symmetrical key and cipher with the server by encrypting the negotiation with the public key of the server. Nobody else other than the server who has the private key can understand this data. Once negotiation is complete, that symmetric key and algorithm is used for further encryption which can be decrypted only by client and server from thereon as they only know the symmetric key and algorithm. The switch to symmetric algorithm from asymmetric encryption algorithm is to not strain the resources of client devices as symmetric encryption is generally less resource intensive than asymmetric. </p> <pre><code># Try the following on your terminal to see the cert details like Subject Name (domain name), Issuer details, Expiry date\ncurl https://www.linkedin.com -v \n</code></pre> <pre><code>* Connected to www.linkedin.com (13.107.42.14) port 443 (#0)\n* ALPN, offering h2\n* ALPN, offering http/1.1\n* successfully set certificate verify locations:\n*   CAfile: /etc/ssl/cert.pem\n  CApath: none\n* TLSv1.2 (OUT), TLS handshake, Client hello (1):\n} [230 bytes data]\n* TLSv1.2 (IN), TLS handshake, Server hello (2):\n{ [90 bytes data]\n* TLSv1.2 (IN), TLS handshake, Certificate (11):\n{ [3171 bytes data]\n* TLSv1.2 (IN), TLS handshake, Server key exchange (12):\n{ [365 bytes data]\n* TLSv1.2 (IN), TLS handshake, Server finished (14):\n{ [4 bytes data]\n* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\n} [102 bytes data]\n* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):\n} [1 bytes data]\n* TLSv1.2 (OUT), TLS handshake, Finished (20):\n} [16 bytes data]\n* TLSv1.2 (IN), TLS change cipher, Change cipher spec (1):\n{ [1 bytes data]\n* TLSv1.2 (IN), TLS handshake, Finished (20):\n{ [16 bytes data]\n* SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384\n* ALPN, server accepted to use h2\n* Server certificate:\n*  subject: C=US; ST=California; L=Sunnyvale; O=LinkedIn Corporation; CN=www.linkedin.com\n*  start date: Oct  2 00:00:00 2020 GMT\n*  expire date: Apr  2 12:00:00 2021 GMT\n*  subjectAltName: host \"www.linkedin.com\" matched cert's \"www.linkedin.com\"\n*  issuer: C=US; O=DigiCert Inc; CN=DigiCert SHA2 Secure Server CA\n*  SSL certificate verify ok.\n* Using HTTP2, server supports multi-use\n* Connection state changed (HTTP/2 confirmed)\n* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0\n* Using Stream ID: 1 (easy handle 0x7fb055808200)\n* Connection state changed (MAX_CONCURRENT_STREAMS == 100)!\n  0 82117    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0\n* Connection #0 to host www.linkedin.com left intact\nHTTP/2 200 \ncache-control: no-cache, no-store\npragma: no-cache\ncontent-length: 82117\ncontent-type: text/html; charset=utf-8\nexpires: Thu, 01 Jan 1970 00:00:00 GMT\nset-cookie: JSESSIONID=ajax:2747059799136291014; SameSite=None; Path=/; Domain=.www.linkedin.com; Secure\nset-cookie: lang=v=2&amp;lang=en-us; SameSite=None; Path=/; Domain=linkedin.com; Secure\nset-cookie: bcookie=\"v=2&amp;70bd59e3-5a51-406c-8e0d-dd70befa8890\"; domain=.linkedin.com; Path=/; Secure; Expires=Wed, 09-Nov-2022 22:27:42 GMT; SameSite=None\nset-cookie: bscookie=\"v=1&amp;202011091050107ae9b7ac-fe97-40fc-830d-d7a9ccf80659AQGib5iXwarbY8CCBP94Q39THkgUlx6J\"; domain=.www.linkedin.com; Path=/; Secure; Expires=Wed, 09-Nov-2022 22:27:42 GMT; HttpOnly; SameSite=None\nset-cookie: lissc=1; domain=.linkedin.com; Path=/; Secure; Expires=Tue, 09-Nov-2021 10:50:10 GMT; SameSite=None\nset-cookie: lidc=\"b=VGST04:s=V:r=V:g=2201:u=1:i=1604919010:t=1605005410:v=1:sig=AQHe-KzU8i_5Iy6MwnFEsgRct3c9Lh5R\"; Expires=Tue, 10 Nov 2020 10:50:10 GMT; domain=.linkedin.com; Path=/; SameSite=None; Secure\nx-fs-txn-id: 2b8d5409ba70\nx-fs-uuid: 61bbf94956d14516302567fc882b0000\nexpect-ct: max-age=86400, report-uri=\"https://www.linkedin.com/platform-telemetry/ct\"\nx-xss-protection: 1; mode=block\ncontent-security-policy-report-only: default-src 'none'; connect-src 'self' www.linkedin.com www.google-analytics.com https://dpm.demdex.net/id lnkd.demdex.net blob: https://linkedin.sc.omtrdc.net/b/ss/ static.licdn.com static-exp1.licdn.com static-exp2.licdn.com static-exp3.licdn.com; script-src 'sha256-THuVhwbXPeTR0HszASqMOnIyxqEgvGyBwSPBKBF/iMc=' 'sha256-PyCXNcEkzRWqbiNr087fizmiBBrq9O6GGD8eV3P09Ik=' 'sha256-2SQ55Erm3CPCb+k03EpNxU9bdV3XL9TnVTriDs7INZ4=' 'sha256-S/KSPe186K/1B0JEjbIXcCdpB97krdzX05S+dHnQjUs=' platform.linkedin.com platform-akam.linkedin.com platform-ecst.linkedin.com platform-azur.linkedin.com static.licdn.com static-exp1.licdn.com static-exp2.licdn.com static-exp3.licdn.com; img-src data: blob: *; font-src data: *; style-src 'self' 'unsafe-inline' static.licdn.com static-exp1.licdn.com static-exp2.licdn.com static-exp3.licdn.com; media-src dms.licdn.com; child-src blob: *; frame-src 'self' lnkd.demdex.net linkedin.cdn.qualaroo.com; manifest-src 'self'; report-uri https://www.linkedin.com/platform-telemetry/csp?f=g\ncontent-security-policy: default-src *; connect-src 'self' https://media-src.linkedin.com/media/ www.linkedin.com s.c.lnkd.licdn.com m.c.lnkd.licdn.com s.c.exp1.licdn.com s.c.exp2.licdn.com m.c.exp1.licdn.com m.c.exp2.licdn.com wss://*.linkedin.com dms.licdn.com https://dpm.demdex.net/id lnkd.demdex.net blob: https://accounts.google.com/gsi/status https://linkedin.sc.omtrdc.net/b/ss/ www.google-analytics.com static.licdn.com static-exp1.licdn.com static-exp2.licdn.com static-exp3.licdn.com media.licdn.com media-exp1.licdn.com media-exp2.licdn.com media-exp3.licdn.com; img-src data: blob: *; font-src data: *; style-src 'unsafe-inline' 'self' static-src.linkedin.com *.licdn.com; script-src 'report-sample' 'unsafe-inline' 'unsafe-eval' 'self' spdy.linkedin.com static-src.linkedin.com *.ads.linkedin.com *.licdn.com static.chartbeat.com www.google-analytics.com ssl.google-analytics.com bcvipva02.rightnowtech.com www.bizographics.com sjs.bizographics.com js.bizographics.com d.la4-c1-was.salesforceliveagent.com slideshare.www.linkedin.com https://snap.licdn.com/li.lms-analytics/ platform.linkedin.com platform-akam.linkedin.com platform-ecst.linkedin.com platform-azur.linkedin.com; object-src 'none'; media-src blob: *; child-src blob: lnkd-communities: voyager: *; frame-ancestors 'self'; report-uri https://www.linkedin.com/platform-telemetry/csp?f=l\nx-frame-options: sameorigin\nx-content-type-options: nosniff\nstrict-transport-security: max-age=2592000\nx-li-fabric: prod-lva1\nx-li-pop: afd-prod-lva1\nx-li-proto: http/2\nx-li-uuid: Ybv5SVbRRRYwJWf8iCsAAA==\nx-msedge-ref: Ref A: CFB9AC1D2B0645DDB161CEE4A4909AEF Ref B: BOM02EDGE0712 Ref C: 2020-11-09T10:50:10Z\ndate: Mon, 09 Nov 2020 10:50:10 GMT\n\n* Closing connection 0\n</code></pre> <p>Here, my system has a list of certificate authorities it trusts in this file <code>/etc/ssl/cert.pem</code>. cURL validates the certificate is for www.linkedin.com by seeing the CN section of the subject part of the certificate. It also makes sure the certificate is not expired by seeing the expire date. It also validates the signature on the certificate by using the public key of issuer Digicert in <code>/etc/ssl/cert.pem</code>. Once this is done, using the public key of www.linkedin.com it negotiates cipher <code>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</code> with a symmetric key. Subsequent data transfer including first HTTP request uses the same cipher and symmetric key.</p>"},{"location":"level101/linux_networking/intro/","title":"Linux Networking Fundamentals","text":""},{"location":"level101/linux_networking/intro/#prerequisites","title":"Prerequisites","text":"<ul> <li>High-level knowledge of commonly used jargon in TCP/IP stack like DNS, TCP, UDP and HTTP</li> <li>Linux Commandline Basics</li> </ul>"},{"location":"level101/linux_networking/intro/#what-to-expect-from-this-course","title":"What to expect from this course","text":"<p>Throughout the course, we cover how an SRE can optimize the system to improve their web stack performance and troubleshoot if there is an issue in any of the layers of the networking stack. This course tries to dig through each layer of traditional TCP/IP stack and expects an SRE to have a picture beyond the bird\u2019s eye view of the functioning of the Internet.</p>"},{"location":"level101/linux_networking/intro/#what-is-not-covered-under-this-course","title":"What is not covered under this course","text":"<p>This course spends time on the fundamentals. We are not covering concepts like HTTP/2.0, QUIC, TCP congestion control protocols, Anycast, BGP, CDN, Tunnels and Multicast. We expect that this course will provide the relevant basics to understand such concepts.</p>"},{"location":"level101/linux_networking/intro/#birds-eye-view-of-the-course","title":"Birds eye view of the course","text":"<p>The course covers the question \u201cWhat happens when you open linkedin.com in your browser?\u201d The course follows the flow of TCP/IP stack. More specifically, the course covers topics of Application layer protocols (DNS and HTTP), transport layer protocols (UDP and TCP), networking layer protocol (IP) and data link layer protocol.</p>"},{"location":"level101/linux_networking/intro/#course-contents","title":"Course Contents","text":"<ol> <li>DNS</li> <li>UDP</li> <li>HTTP</li> <li>TCP</li> <li>IP Routing</li> </ol>"},{"location":"level101/linux_networking/ipr/","title":"IP Routing and Data Link Layer","text":"<p>We will dig how packets that leave the client reach the server and vice versa. When the packet reaches the IP layer, the transport layer populates source port, destination port. IP/Network layer populates destination IP (discovered from DNS) and then looks up the route to the destination IP on the routing table. </p> <pre><code># Linux `route -n` command gives the default routing table\nroute -n\n</code></pre> <pre><code>Kernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n0.0.0.0         172.17.0.1      0.0.0.0         UG    0      0        0 eth0\n172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 eth0\n</code></pre> <p>Here, the destination IP is bitwise AND\u2019d with the Genmask and if the answer is the destination part of the table, then that gateway and interface is picked for routing. Here, linkedin.com\u2019s IP <code>108.174.10.10</code> is AND\u2019d with <code>255.255.255.0</code> and the answer we get is <code>108.174.10.0</code> which doesn\u2019t match with any destination in the routing table. Then, Linux does an AND of destination IP with <code>0.0.0.0</code> and we get <code>0.0.0.0</code>. This answer matches the default row.</p> <p>Routing table is processed in the order of more octets of 1 set in Genmask and Genmask <code>0.0.0.0</code> is the default route if nothing matches.  At the end of this operation, Linux figured out that the packet has to be sent to next hop <code>172.17.0.1</code> via <code>eth0</code>. The source IP of the packet will be set as the IP of interface <code>eth0</code>.  Now, to send the packet to <code>172.17.0.1</code>, Linux has to figure out the MAC address of <code>172.17.0.1</code>. MAC address is figured by looking at the internal ARP cache which stores translation between IP address and MAC address. If there is a cache miss, Linux broadcasts ARP request within the internal network asking who has <code>172.17.0.1</code>. The owner of the IP sends an ARP response which is cached by the kernel and the kernel sends the packet to the gateway by setting Source MAC address as MAC address of <code>eth0</code> and destination MAC address of <code>172.17.0.1</code> which we got just now. Similar routing lookup process is followed in each hop till the packet reaches the actual server. Transport layer and layers above it come to play only at end servers. During intermediate hops, only till the IP/Network layer is involved.</p> <p></p> <p>One weird gateway we saw in the routing table is <code>0.0.0.0</code>. This gateway means no Layer3 (Network layer) hop is needed to send the packet. Both source and destination are in the same network. Kernel has to figure out the MAC of the destination and populate source and destination MAC appropriately and send the packet out so that it reaches the destination without any Layer3 hop in the middle.</p> <p>As we followed in other modules, let's complete this session with SRE use cases.</p>"},{"location":"level101/linux_networking/ipr/#applications-in-sre-role","title":"Applications in SRE role","text":"<ol> <li>Generally the routing table is populated by DHCP and playing around is not a good practice. There can be reasons where one has to play around the routing table but take that path only when it's absolutely necessary.</li> <li>Understanding error messages better like, \u201cNo route to host\u201d error can mean MAC address of the destination host is not found and it can mean the destination host is down. </li> <li>On rare cases, looking at the ARP table can help us understand if there is a IP conflict where same IP is assigned to two hosts by mistake and this is causing unexpected behavior.</li> </ol>"},{"location":"level101/linux_networking/tcp/","title":"TCP","text":"<p>TCP is a transport layer protocol like UDP but it guarantees reliability, flow control and congestion control. TCP guarantees reliable delivery by using sequence numbers. A TCP connection is established by a three-way handshake. In our case, the client sends a <code>SYN</code> packet along with the starting sequence number it plans to use, the server acknowledges the <code>SYN</code> packet and sends a <code>SYN</code> with its sequence number. Once the client acknowledges the <code>SYN</code> packet, the connection is established. Each data transferred from here on is considered delivered reliably once acknowledgement for that sequence is received by the concerned party.</p> <p></p> <pre><code># To understand handshake run packet capture on one bash session\ntcpdump -S -i any port 80\n# Run curl on one bash session\ncurl www.linkedin.com\n</code></pre> <p></p> <p>Here, client sends a <code>SYN</code> flag shown by [S] flag with a sequence number <code>1522264672</code>. The server acknowledges receipt of <code>SYN</code> with an <code>ACK</code> [.] flag and a <code>SYN</code> flag for its sequence number [S]. The server uses the sequence number <code>1063230400</code> and acknowledges the client it's expecting sequence number <code>1522264673</code> (client sequence + 1). Client sends a zero length acknowledgement packet to the server (server sequence + 1) and connection stands established. This is called three way handshake. The client sends a 76 bytes length packet after this and increments its sequence number by 76. Server sends a 170 byte response and closes the connection. This was the difference we were talking about between HTTP/1.1 and HTTP/1.0. In HTTP/1.1, this same connection can be reused which reduces overhead of three-way handshake for each HTTP request. If a packet is missed between client and server, server won\u2019t send an <code>ACK</code> to the client and client would retry sending the packet till the <code>ACK</code> is received. This guarantees reliability. The flow control is established by the <code>WIN</code> size field in each segment. The <code>WIN</code> size says available TCP buffer length in the kernel which can be used to buffer received segments. A size 0 means the receiver has a lot of lag to catch from its socket buffer and the sender has to pause sending packets so that receiver can cope up. This flow control protects from slow receiver and fast sender problem.</p> <p>TCP also does congestion control which determines how many segments can be in transit without an <code>ACK</code>. Linux provides us the ability to configure algorithms for congestion control which we are not covering here.</p> <p>While closing a connection, client/server calls a close syscall. Let's assume client do that. Client\u2019s kernel will send a <code>FIN</code> packet to the server. Server\u2019s kernel can\u2019t close the connection till the close syscall is called by the server application. Once server app calls close, server also sends a <code>FIN</code> packet and client enters into <code>TIME_WAIT</code> state for 2*MSS (120s) so that this socket can\u2019t be reused for that time period to prevent any TCP state corruptions due to stray stale packets. </p> <p></p> <p>Armed with our TCP and HTTP knowledge, let's see how this is used by SREs in their role.</p>"},{"location":"level101/linux_networking/tcp/#applications-in-sre-role","title":"Applications in SRE role","text":"<ol> <li>Scaling HTTP performance using load balancers need consistent knowledge about both TCP and HTTP. There are different kinds of load balancing like L4, L7 load balancing, Direct Server Return etc. HTTPs offloading can be done on Load balancer or directly on servers based on the performance and compliance needs.</li> <li>Tweaking <code>sysctl</code> variables for <code>rmem</code> and <code>wmem</code> like we did for UDP can improve throughput of sender and receiver.</li> <li><code>sysctl</code> variable <code>tcp_max_syn_backlog</code> and socket variable <code>somax_conn</code> determines how many connections for which the kernel can complete 3-way handshake before app calling accept syscall. This is much useful in single-threaded applications. Once the backlog is full, new connections stay in <code>SYN_RCVD</code> state (when you run <code>netstat</code>) till the application calls accept syscall.</li> <li>Apps can run out of file descriptors if there are too many short-lived connections. Digging through tcp_reuse and tcp_recycle can help reduce time spent in the <code>TIME_WAIT</code> state (it has its own risk). Making apps reuse a pool of connections instead of creating ad hoc connection can also help.</li> <li>Understanding performance bottlenecks by seeing metrics and classifying whether it's a problem in App or network side. Example too many sockets in <code>CLOSE_WAIT</code> state is a problem on application whereas retransmissions can be a problem more on network or on OS stack than the application itself. Understanding the fundamentals can help us narrow down where the bottleneck is.</li> </ol>"},{"location":"level101/linux_networking/udp/","title":"UDP","text":"<p>UDP is a transport layer protocol. DNS is an application layer protocol that runs on top of UDP (most of the times). Before jumping into UDP, let's try to understand what an application and transport layer is. DNS protocol is used by a DNS client (eg <code>dig</code>) and DNS server (eg <code>named</code>). The transport layer makes sure the DNS request reaches the DNS server process and similarly the response reaches the DNS client process. Multiple processes can run on a system and they can listen on any ports. DNS servers usually listen on port number <code>53</code>. When a client makes a DNS request, after filling the necessary application payload, it passes the payload to the kernel via sendto system call. The kernel picks a random port number (&gt;1024) as source port number and puts 53 as destination port number and sends the packet to lower layers. When the kernel on server-side receives the packet, it checks the port number and queues the packet to the application buffer of the DNS server process which makes a recvfrom system call and reads the packet. This process by the kernel is called multiplexing (combining packets from multiple applications to same lower layers) and demultiplexing (segregating packets from single lower layer to multiple applications). Multiplexing and Demultiplexing is done by the Transport layer.</p> <p>UDP is one of the simplest transport layer protocol and it does only multiplexing and demultiplexing. Another common transport layer protocol TCP does a bunch of other things like reliable communication, flow control and congestion control. UDP is designed to be lightweight and handle communications with little overhead. So, it doesn\u2019t do anything beyond multiplexing and demultiplexing. If applications running on top of UDP need any of the features of TCP, they have to implement that in their application.</p> <p>This example from python wiki covers a sample UDP client and server where \u201cHello World\u201d is an application payload sent to server listening on port number <code>5005</code>. The server receives the packet and prints the \u201cHello World\u201d string from the client.</p>"},{"location":"level101/linux_networking/udp/#applications-in-sre-role","title":"Applications in SRE role","text":"<ol> <li>If the underlying network is slow and the UDP layer is unable to queue packets down to the networking layer, <code>sendto</code> syscall from the application will hang till the kernel finds some of its buffer is freed. This can affect the throughput of the system. Increasing write memory buffer values using sysctl variables net.core.wmem_max and net.core.wmem_default provides some cushion to the application from the slow network</li> <li>Similarly, if the receiver process is slow in consuming from its buffer, the kernel has to drop packets which it can\u2019t queue due to the buffer being full. Since UDP doesn\u2019t guarantee reliability these dropped packets can cause data loss unless tracked by the application layer. Increasing  sysctl variables rmem_default and rmem_max can provide some cushion to slow applications from fast senders.</li> </ol>"},{"location":"level101/messagequeue/further_reading/","title":"Conclusion","text":"<p>We have covered basic concepts of Message Services. There is much more to learn and do. We hope this course gives you a good start and inspires you to explore further.</p>"},{"location":"level101/messagequeue/further_reading/#further-reading","title":"Further reading","text":"<p>https://sudhir.io/the-big-little-guide-to-message-queues</p> <p>Understanding message brokers: learn the mechanics of messaging though ActiveMQ and Kafka</p> <p>Video: The Myth of the Magical Messaging Fabric by Jakub Korab</p> <p>G. Fu, Y. Zhang and G. Yu, \"A Fair Comparison of Message Queuing Systems,\" in IEEE Access, vol. 9, pp. 421-432, 2021, doi: 10.1109/ACCESS.2020.3046503. (PDF)</p> <p>Design Patterns for Cloud Native Applications: Chapter 2 Communication Patterns</p> <p>Choose between Azure messaging services - Event Grid, Event Hubs, and Service Bus</p> <p>Exactly-once message delivery</p> <p>Task Queues</p> <p>RabbitMQ tutorial</p>"},{"location":"level101/messagequeue/intro/","title":"Messaging services","text":""},{"location":"level101/messagequeue/intro/#what-to-expect-from-this-course","title":"What to expect from this course","text":"<p>At the end of training, you will have an understanding of what a Message Services is, learn about different types of Message Service implementation and understand some of the underlying concepts &amp; trade-offs.</p>"},{"location":"level101/messagequeue/intro/#what-is-not-covered-under-this-course","title":"What is not covered under this course","text":"<p>We will not be deep diving into any specific Message Service. </p>"},{"location":"level101/messagequeue/intro/#course-contents","title":"Course Contents","text":"<ul> <li>Introduction to Messaging Service</li> <li>Delivery guarantees</li> <li>Messages ordering and parallelism</li> <li>Fan Out / In</li> <li>Poison Pills and Dead Letters</li> </ul>"},{"location":"level101/messagequeue/intro/#introduction","title":"Introduction","text":"<p>In today's distributed systems and microservices architectures, messaging services play a crucial role in ensuring reliable communication and coordination between different components. These services enable the asynchronous exchange of messages, providing a wide range of benefits, such as increased performance, improved fault tolerance, and enhanced scalability.</p> <p>This article will provide an overview of the various types of messaging services available, including general-purpose message queues, pub/sub messaging, stream processing, brokerless messaging, and database-as-queue systems. We will also explore key concepts like delivery guarantees, message ordering, parallelism, poison pills, and dead letters, which are essential to understanding how messaging services function and how they can be effectively utilized.</p>"},{"location":"level101/messagequeue/intro/#types-of-messaging-services","title":"Types of Messaging services:","text":"<p>In this section, we will explore various types of messaging services, each designed to address different requirements and use cases in distributed systems.</p> <ol> <li> <p>General-purpose message queue:  General-purpose message queues are versatile and can be used in various non-very-scenarios, from distributing tasks and buffering requests to enabling communication between microservices. These messaging systems are designed to provide reliable message delivery and ensure that messages are processed in the correct order, and handle message volumes typically up to 100,000 messages per second. Message queues often support multiple messaging patterns, such as point-to-point and publish-subscribe, providing flexibility for different use cases. Examples of general-purpose message queues include RabbitMQ, ActiveMQ, and Amazon SQS. By using these message queues, developers can decouple their applications and scale them independently, improving overall system resilience and performance.</p> </li> <li> <p>Pub/Sub messaging:  Publish-Subscribe (Pub/Sub) messaging services allow publishers to send messages to multiple subscribers without direct point-to-point connections. This enables decoupling of producers and consumers, making the system more scalable and fault-tolerant. Pub/Sub systems are particularly useful in scenarios where multiple consumers need to receive and process the same messages, such as sending notifications, logging, or data replication. The Pub/Sub model supports dynamic subscription management, allowing consumers to subscribe and unsubscribe from specific topics or channels at runtime. Examples of Pub/Sub messaging services include Google Cloud Pub/Sub, Apache Pulsar, Azure Event Grid, AWS SNS and NATS. By adopting a Pub/Sub messaging system, developers can create event-driven architectures, reduce system complexity, and streamline the integration of new services.</p> </li> <li> <p>Streaming processing:  Stream processing services are designed to handle large volumes of real-time data (say 1 milion messages per second), allowing continuous processing and analysis of data streams. These services enable complex event processing, time-windowed aggregations, and stateful transformations. They provide a robust platform for building real-time analytics, monitoring, and alerting applications. Stream processing systems often use a combination of in-memory and disk-based storage to balance performance and durability. They also support horizontal scaling, allowing developers to process massive data volumes with low latency. Examples of stream processing services include Apache Kafka, Amazon Kinesis Data Streams, Azure Event Hubs, RocketMQ, Apache Pulsar and Redis Streams. By leveraging stream processing services, organizations can gain valuable insights from their data in real-time and make data-driven decisions more effectively.</p> </li> <li> <p>Brokerless:  Brokerless messaging systems enable direct communication between producers and consumers without relying on a central broker, thereby reducing latency and improving performance. In brokerless systems, nodes communicate with each other using a peer-to-peer architecture, which can simplify deployment and reduce the need for dedicated message broker infrastructure. These systems are particularly suitable for high-performance, low-latency applications or situations where network connectivity is intermittent or unreliable. Examples of brokerless messaging systems include ZeroMQ, nanomsg, Chronicle Queue and the Disruptor. By adopting a brokerless messaging system, developers can build lightweight, fast, and efficient communication channels between components in their distributed systems</p> </li> <li> <p>Database-as-queue  In some cases, a traditional relational or NoSQL database can be used as a message queue, allowing for simpler integration with existing systems and providing familiar tools for data management. This approach can be particularly useful for smaller-scale applications or as a transitional step when migrating from monolithic to distributed architectures. Using a database-as-queue can leverage built-in database features like transactions, indexing, and querying to manage messages effectively. Examples of using a database-as-queue include PostgreSQL's LISTEN/NOTIFY feature or leveraging Amazon DynamoDB Streams. While using a database-as-queue might not provide the same performance and scalability as dedicated messaging services and sometimes is considered as an anti-pattern, it can be a suitable option for specific use cases or when the application requirements are less demanding.</p> </li> </ol>"},{"location":"level101/messagequeue/intro/#comparsion","title":"Comparsion","text":"Performance Scalability Flexibility Complexity Functionality Ease of Use General-purpose MQ Moderate Moderate High Moderate High Moderate Pub/Sub Moderate to High High High Moderate Moderate to High Moderate to High Stream processing High High Moderate to High High High Moderate Brokerless High Moderate Moderate Low to Moderate Moderate High Database-as-queue Low to Moderate Low to Moderate Moderate Low Low to Moderate High"},{"location":"level101/messagequeue/key_concepts/","title":"Key Concepts","text":"<p>Let's looks at some of the key concepts when we talk about messaging system</p>"},{"location":"level101/messagequeue/key_concepts/#delivery-guarantees","title":"Delivery guarantees","text":"<p>One of the essential aspects of messaging services is ensuring that messages are delivered to their intended recipients. Different systems offer varying levels of delivery guarantees, and it is crucial to understand these guarantees to choose the right messaging service for your needs.</p> <ul> <li> <p>at-most-once-delivery  This guarantee ensures that a message is delivered at most once to its intended recipient. In other words, messages may be lost, but they will never be delivered more than once. This approach is suitable for scenarios where message loss is tolerable and duplication is not desired.</p> </li> <li> <p>at-lesat-once-delivery  Under this guarantee, a message will be delivered to its intended recipient at least once, but it may be delivered multiple times in case of failures. This approach is appropriate for situations where message loss is unacceptable, but duplication can be managed by the recipient.</p> </li> <li> <p>exactly-once-delivery  This guarantee ensures that a message is delivered exactly once to its intended recipient, with no loss or duplication. This is the most stringent level of delivery guarantee and is suitable for applications where both message loss and duplication are unacceptable. However, it's important to note that it is challenging, if not impossible, for any messaging system to guarantee exactly-once delivery due to the inherent complexities and potential failures in distributed systems.</p> </li> </ul> <p>Selecting the right delivery guarantee depends on the specific requirements of your application. For example, in financial transactions, an exactly-once delivery guarantee is essential to avoid double-processing of payments or missed transactions. In contrast, a log monitoring system may only require at-most-once delivery to reduce system overhead.</p>"},{"location":"level101/messagequeue/key_concepts/#messages-ordering-and-parallelism","title":"Messages ordering and parallelism","text":"<p>Ensuring the correct order of messages and processing them in parallel can be a challenge in distributed messaging systems. The following strategies help maintain order and ensure parallelism:</p> <ul> <li> <p>Strict ordering:  In some cases, maintaining strict order is essential, such as when processing financial transactions. This may require additional overhead, such as sequencing numbers, buffering, and reordering messages.</p> </li> <li> <p>Partial ordering:  Partial ordering can be used when only a subset of messages must be ordered. For example, messages within a specific group or partition must be processed in order, but messages between groups or partitions can be processed independently.</p> </li> <li> <p>Unordered processing:  In some scenarios, processing messages in any order is acceptable. This approach reduces complexity and enables higher parallelism, improving overall system performance.</p> </li> </ul> <p>Strategies to maintain order and ensure parallelism: Partitioning messages by a key, using sequencing numbers, and buffering can help maintain order while still allowing parallel processing. It is crucial to strike the right balance between ordering requirements and parallelism to optimize system performance.</p>"},{"location":"level101/messagequeue/key_concepts/#fan-out-in","title":"Fan Out / In","text":"<p>Fan out and fan in are two crucial concepts in messaging systems that deal with the distribution of messages among multiple consumers and the aggregation of messages from multiple producers, respectively.</p>"},{"location":"level101/messagequeue/key_concepts/#fan-out","title":"Fan Out","text":"<p>Fan out is a pattern where a single message is sent to multiple consumers, ensuring that each consumer receives a copy of the message. This can be achieved using the Publish-Subscribe (Pub/Sub) messaging pattern or by creating multiple bindings with unique routing keys in a message broker like RabbitMQ. Fan out is useful in scenarios where multiple services or applications need to process the same messages independently, such as sending notifications to multiple subscribers or replicating data across multiple databases.</p>"},{"location":"level101/messagequeue/key_concepts/#fan-in","title":"Fan In","text":"<p>Fan in is a pattern where messages from multiple producers are aggregated and processed by a single consumer or a group of consumers. This can be achieved by using a message broker with multiple producers sending messages to a shared queue, which is then consumed by one or more consumers. Fan in is beneficial when you need to centralize processing or consolidate data from multiple sources, such as aggregating logs from various services or combining sensor data from multiple IoT devices.</p>"},{"location":"level101/messagequeue/key_concepts/#poison-pills-and-dead-letters","title":"Poison Pills and Dead Letters","text":"<p>In messaging systems, poison pills are problematic messages that can cause failures or crashes in the message processing pipeline. To handle these messages, messaging services often employ Dead Letter Queues (DLQs).</p> <p>A poison pill is a message that cannot be processed due to various reasons, such as invalid format, missing information, or incorrect data. When a consumer encounters a poison pill, it must handle it gracefully to avoid crashing or getting stuck in an infinite processing loop.</p> <p>A Dead Letter Queues (DLQ) is a separate queue used to store poison pills or messages that could not be processed successfully. Instead of discarding problematic messages, they are redirected to a DLQ, allowing engineers to analyze and resolve the issues.</p> <p>To handle poison pills effectively, you can implement error handling and monitoring, set up retries with backoff policies, and use DLQs for further analysis and resolution. Regularly monitor the DLQ, identify patterns causing poison pills, and implement fixes in the message processing pipeline to prevent future issues.</p>"},{"location":"level101/messagequeue/key_concepts/#messaging-patterns","title":"Messaging Patterns","text":""},{"location":"level101/messagequeue/key_concepts/#point-to-point-queue-based","title":"Point-to-Point (Queue-based)","text":"<p>In this pattern, messages are sent from a single producer to a single consumer via a message queue. The message is consumed by only one consumer, even if there are multiple consumers listening to the queue. This pattern ensures that the message is processed by a single consumer, making it suitable for scenarios where messages must be processed in sequence or by specific consumers.</p>"},{"location":"level101/messagequeue/key_concepts/#publish-subscribe-pattern","title":"Publish-subscribe pattern","text":"<p>The publish-subscribe pattern involves a producer sending messages to a topic, and multiple consumers subscribing to that topic to receive the messages. This pattern allows for one-to-many communication, where a single message can be delivered to multiple consumers simultaneously. It is ideal for event-driven architectures and applications that require real-time updates or notifications.</p>"},{"location":"level101/metrics_and_monitoring/alerts/","title":"Proactive Monitoring with Alerts","text":""},{"location":"level101/metrics_and_monitoring/alerts/#_1","title":"Proactive Monitoring with Alerts","text":""},{"location":"level101/metrics_and_monitoring/alerts/#proactive-monitoring-using-alerts","title":"Proactive monitoring using alerts","text":"<p>Earlier we discussed different ways to collect key metric data points from a service and its underlying infrastructure. This data gives us a better understanding of how the service is performing. One of the main objectives of monitoring is to detect any service degradations early  (reduce Mean Time To Detect) and notify stakeholders so that the issues are either avoided or can be fixed early, thus reducing Mean Time To Recover (MTTR). For example, if you are notified when resource usage by a service exceeds 90%, you can take preventive measures to avoid any service breakdown due to a shortage of resources. On the other hand, when a service goes down due to an issue, early detection and notification of such incidents can help you quickly fix the issue.</p> <p> </p> <p> Figure 8: An alert notification received on Slack </p> <p>Today most of the monitoring services available provide a mechanism to set up alerts on one or a combination of metrics to actively monitor the service health. These alerts have a set of defined rules or conditions, and when the rule is broken, you are notified. These rules can be as simple as notifying when the metric value exceeds n to as complex as a week-over-week (WoW) comparison of standard deviation over a period of time. Monitoring tools notify you about an active alert, and most of these tools support instant messaging (IM) platforms, SMS, email, or phone calls. Figure 8 shows a sample alert notification received on Slack for memory usage exceeding 90% of total RAM space on the host.</p>"},{"location":"level101/metrics_and_monitoring/best_practices/","title":"Best Practices for Monitoring","text":""},{"location":"level101/metrics_and_monitoring/best_practices/#_1","title":"Best Practices for Monitoring","text":""},{"location":"level101/metrics_and_monitoring/best_practices/#best-practices-for-monitoring","title":"Best practices for monitoring","text":"<p>When setting up monitoring for a service, keep the following best practices in mind.</p> <ul> <li> <p>Use the right metric type\u2014Most of the libraries available      today offer various metric types. Choose the appropriate metric      type for monitoring your system. Following are the types of      metrics and their purposes.</p> <ul> <li> <p>Gauge\u2014Gauge is a constant type of metric. After the      metric is initialized, the metric value does not change unless      you intentionally update it.</p> </li> <li> <p>Timer\u2014Timer measures the time taken to complete a      task.</p> </li> <li> <p>Counter\u2014Counter counts the number of occurrences of a      particular event.</p> </li> </ul> </li> </ul> <p>For more information about these metric types, see Data  Types.</p> <ul> <li> <p>Avoid over-monitoring\u2014Monitoring can be a significant      engineering endeavor. Therefore, be sure not to spend too      much time and resources on monitoring services, yet make sure all      important metrics are captured.</p> </li> <li> <p>Prevent alert fatigue\u2014Set alerts for metrics that are      important and actionable. If you receive too many non-critical      alerts, you might start ignoring alert notifications over time. As      a result, critical alerts might get overlooked.</p> </li> <li> <p>Have a runbook for alerts\u2014For every alert, make sure you have      a document explaining what actions and checks need to be performed      when the alert fires. This enables any engineer on the team to      handle the alert and take necessary actions, without any help from      others.</p> </li> </ul>"},{"location":"level101/metrics_and_monitoring/command-line_tools/","title":"Command-line Tools","text":""},{"location":"level101/metrics_and_monitoring/command-line_tools/#_1","title":"Command-line Tools","text":""},{"location":"level101/metrics_and_monitoring/command-line_tools/#command-line-tools","title":"Command-line tools","text":"<p>Most of the Linux distributions today come with a set of tools that monitor the system's performance. These tools help you measure and understand various subsystem statistics (CPU, memory, network, and so on). Let's look at some of the tools that are predominantly used.</p> <ul> <li> <p><code>ps/top</code>: The process status command (<code>ps</code>) displays information      about all the currently running processes in a Linux system. The      top command is similar to the <code>ps</code> command, but it periodically      updates the information displayed until the program is terminated.      An advanced version of top, called <code>htop</code>, has a more user-friendly      interface and some additional features. These command-line      utilities come with options to modify the operation and output of      the command. Following are some important options supported by the      <code>ps</code> command.</p> <ul> <li> <p><code>-p &lt;pid1, pid2,...&gt;</code>: Displays information about processes      that match the specified process IDs. Similarly, you can use      <code>-u &lt;uid&gt;</code> and <code>-g &lt;gid&gt;</code> to display information about      processes belonging to a specific user or group.</p> </li> <li> <p><code>-a</code>: Displays information about other users' processes, as well      as one's own.</p> </li> <li> <p><code>-x</code>: When displaying processes matched by other options,      includes processes that do not have a controlling terminal.</p> </li> </ul> </li> </ul> <p> <p> Figure 2: Results of top command </p> </p> <ul> <li> <p><code>ss</code>: The socket statistics command (<code>ss</code>) displays information      about network sockets on the system. This tool is the successor of      netstat,      which is deprecated. Following are some command-line options      supported by the <code>ss</code> command:</p> <ul> <li> <p><code>-t</code>: Displays the TCP socket. Similarly, <code>-u</code> displays UDP      sockets, <code>-x</code> is for UNIX domain sockets, and so on.</p> </li> <li> <p><code>-l</code>: Displays only listening sockets.</p> </li> <li> <p><code>-n</code>: Instructs the command to not resolve service names.      Instead displays the port numbers.</p> </li> </ul> </li> </ul> <p> <p> Figure 3: List of listening sockets on a system </p></p> <ul> <li><code>free</code>: The <code>free</code> command displays memory usage statistics on the      host like available memory, used memory, and free memory. Most often,      this command is used with the <code>-h</code> command-line option, which      displays the statistics in a human-readable format.</li> </ul> <p> </p> <p> Figure 4: Memory statistics on a host in human-readable form </p> <ul> <li><code>df</code>: The <code>df</code> command displays disk space usage statistics. The      <code>-i</code> command-line option is also often used to display      inode usage      statistics. The <code>-h</code> command-line option is used for displaying      statistics in a human-readable format.</li> </ul> <p> </p> <p> Figure 5:  Disk usage statistics on a system in human-readable form </p> <ul> <li> <p><code>sar</code>: The <code>sar</code> utility monitors various subsystems, such as CPU      and memory, in real time. This data can be stored in a file      specified with the <code>-o</code> option. This tool helps to identify      anomalies.</p> </li> <li> <p><code>iftop</code>: The interface top command (<code>iftop</code>) displays bandwidth      utilization by a host on an interface. This command is often used      to identify bandwidth usage by active connections. The <code>-i</code> option      specifies which network interface to watch.</p> </li> </ul> <p> <p> Figure 6: Network bandwidth usage by active connection on the host </p> </p> <ul> <li> <p><code>tcpdump</code>: The <code>tcpdump</code> command is a network monitoring tool that      captures network packets flowing over the network and displays a      description of the captured packets. The following options are      available:</p> <ul> <li> <p><code>-i &lt;interface&gt;</code>: Interface to listen on</p> </li> <li> <p><code>host &lt;IP/hostname&gt;</code>: Filters traffic going to or from the      specified host</p> </li> <li> <p><code>src/dst</code>: Displays one-way traffic from the source (src) or to      the destination (dst)</p> </li> <li> <p><code>port &lt;port number&gt;</code>: Filters traffic to or from a particular      port</p> </li> </ul> </li> </ul> <p> </p> <p> Figure 7: <code>tcpdump</code> of packets on <code>docker0</code> interface on a host </p>"},{"location":"level101/metrics_and_monitoring/conclusion/","title":"Conclusion","text":"<p>A robust monitoring and alerting system is necessary for maintaining and troubleshooting a system. A dashboard with key metrics can give you an overview of service performance, all in one place. Well-defined alerts  (with realistic thresholds and notifications) further enable you to quickly identify any anomalies in the service infrastructure and in resource saturation. By taking necessary actions, you can avoid any service degradations and decrease MTTD for service breakdowns.</p> <p>In addition to in-house monitoring, monitoring real-user experience can help you to understand service performance as perceived by the users. Many modules are involved in serving the user, and most of them are out of your control. Therefore, you need to have real-user monitoring in place.</p> <p>Metrics give very abstract details on service performance. To get a better understanding of the system and for faster recovery during incidents, you might want to implement the other two pillars of observability: logs and tracing. Logs and trace data can help you understand what led to service failure or degradation.</p> <p>Following are some resources to learn more about monitoring and observability:</p> <ul> <li> <p>Google SRE book: Monitoring Distributed      Systems</p> </li> <li> <p>Mastering Distributed Tracing by Yuri      Shkuro</p> </li> </ul>"},{"location":"level101/metrics_and_monitoring/conclusion/#references","title":"References","text":"<ul> <li> <p>Google SRE book: Monitoring Distributed      Systems</p> </li> <li> <p>Mastering Distributed Tracing, by Yuri      Shkuro</p> </li> <li> <p>Monitoring and      Observability</p> </li> <li> <p>Three PIllars with Zero      Answers</p> </li> <li> <p>Engineering blogs on          LinkedIn,          Grafana,          Elastic.co,          OpenTelemetry</p> </li> </ul>"},{"location":"level101/metrics_and_monitoring/introduction/","title":"Introduction","text":""},{"location":"level101/metrics_and_monitoring/introduction/#_1","title":"Introduction","text":""},{"location":"level101/metrics_and_monitoring/introduction/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Linux  Basics</p> </li> <li> <p>Python and the Web</p> </li> <li> <p>Systems Design</p> </li> <li> <p>Linux Networking Fundamentals</p> </li> </ul>"},{"location":"level101/metrics_and_monitoring/introduction/#what-to-expect-from-this-course","title":"What to expect from this course","text":"<p>Monitoring is an integral part of any system. As an SRE, you need to have a basic understanding of monitoring a service infrastructure. By the end of this course, you will gain a better understanding of the following topics:</p> <ul> <li> <p>What is monitoring?</p> <ul> <li> <p>What needs to be measured</p> </li> <li> <p>How the metrics gathered can be used to improve business decisions and overall reliability</p> </li> <li> <p>Proactive monitoring with alerts</p> </li> <li> <p>Log processing and its importance</p> </li> </ul> </li> <li> <p>What is observability?</p> <ul> <li> <p>Distributed tracing</p> </li> <li> <p>Logs</p> </li> <li> <p>Metrics</p> </li> </ul> </li> </ul>"},{"location":"level101/metrics_and_monitoring/introduction/#what-is-not-covered-in-this-course","title":"What is not covered in this course","text":"<ul> <li> <p>Guide to setting up a monitoring infrastructure</p> </li> <li> <p>Deep dive into different monitoring technologies and benchmarking or comparison of any tools</p> </li> </ul>"},{"location":"level101/metrics_and_monitoring/introduction/#course-content","title":"Course content","text":"<ul> <li> <p>Introduction</p> <ul> <li> <p>Four golden signals of monitoring</p> </li> <li> <p>Why is monitoring important?</p> </li> </ul> </li> <li> <p>Command-line tools</p> </li> <li> <p>Third-party monitoring</p> </li> <li> <p>Proactive monitoring using alerts</p> </li> <li> <p>Best practices for monitoring</p> </li> <li> <p>Observability</p> <ul> <li>Logs</li> <li>Tracing</li> </ul> </li> </ul> <p>Conclusion</p>"},{"location":"level101/metrics_and_monitoring/introduction/#_2","title":"Introduction","text":""},{"location":"level101/metrics_and_monitoring/introduction/#introduction","title":"Introduction","text":"<p>Monitoring is a process of collecting real-time performance metrics from a system, analyzing the data to derive meaningful information, and displaying the data to the users. In simple terms, you measure various metrics regularly to understand the state of the system, including but not limited to, user requests, latency, and error rate. What gets measured, gets fixed\u2014if you can measure something, you can reason about it, understand it, discuss it, and act upon it with confidence.</p>"},{"location":"level101/metrics_and_monitoring/introduction/#four-golden-signals-of-monitoring","title":"Four golden signals of monitoring","text":"<p>When setting up monitoring for a system, you need to decide what to measure. The four golden signals of monitoring provide a good understanding of service performance and lay a foundation for monitoring a system. These four golden signals are</p> <ul> <li> <p>Traffic</p> </li> <li> <p>Latency</p> </li> <li> <p>Error</p> </li> <li> <p>Saturation</p> </li> </ul> <p>These metrics help you to understand the system performance and bottlenecks, and to create a better end-user experience. As discussed in the Google SRE book, if you can measure only four metrics of your service, focus on these four. Let's look at each of the four golden signals.</p> <ul> <li> <p>Traffic\u2014Traffic gives a better understanding of the service      demand. Often referred to as service QPS (queries per second),      traffic is a measure of requests served by the service. This      signal helps you to decide when a service needs to be scaled up to      handle increasing customer demand and scaled down to be      cost-effective.</p> </li> <li> <p>Latency\u2014Latency is the measure of time taken by the service      to process the incoming request and send the response. Measuring      service latency helps in the early detection of slow degradation      of the service. Distinguishing between the latency of successful      requests and the latency of failed requests is important. For      example, an HTTP 5XX      error      triggered due to loss of connection to a database or other      critical backend might be served very quickly. However, because an      HTTP 500 error indicates a failed request, factoring 500s into      overall latency might result in misleading calculations.</p> </li> <li> <p>Error (rate)\u2014Error is the measure of failed client      requests. These failures can be easily identified based on the      response codes (HTTP 5XX      error).      There might be cases where the response is considered erroneous      due to wrong result data or due to policy violations. For example,      you might get an HTTP      200      response, but the body has incomplete data, or response time is      breaching the agreed-upon      SLAs.      Therefore, you need to have other mechanisms (code logic or      instrumentation)      in place to capture errors in addition to the response codes.</p> </li> <li> <p>Saturation\u2014Saturation is a measure of the resource      utilization by a service. This signal tells you the state of      service resources and how full they are. These resources include      memory, compute, network I/O, and so on. Service performance      slowly degrades even before resource utilization is at 100      percent. Therefore, having a utilization target is important. An      increase in latency is a good indicator of saturation; measuring      the 99th      percentile      of latency can help in the early detection of saturation.</p> </li> </ul> <p>Depending on the type of service, you can measure these signals in different ways. For example, you might measure queries per second served for a web server. In contrast, for a database server, transactions performed and database sessions created give you an idea about the traffic handled by the database server. With the help of additional code logic (monitoring libraries and instrumentation), you can measure these signals periodically and store them for future analysis. Although these metrics give you an idea about the performance at the service end, you need to also ensure that the same user experience is delivered at the client end. Therefore, you might need to monitor the service from outside the service infrastructure, which is discussed under third-party monitoring.</p>"},{"location":"level101/metrics_and_monitoring/introduction/#why-is-monitoring-important","title":"Why is monitoring important?","text":"<p>Monitoring plays a key role in the success of a service. As discussed earlier, monitoring provides performance insights for understanding service health. With access to historical data collected over time, you can build intelligent applications to address specific needs. Some of the key use cases follow:</p> <ul> <li> <p>Reduction in time to resolve issues\u2014With a good monitoring      infrastructure in place, you can identify issues quickly and      resolve them, which reduces the impact caused by the issues.</p> </li> <li> <p>Business decisions\u2014Data collected over a period of time can      help you make business decisions such as determining the product      release cycle, which features to invest in, and geographical areas      to focus on. Decisions based on long-term data can improve the      overall product experience.</p> </li> <li> <p>Resource planning\u2014By analyzing historical data, you can      forecast service compute-resource demands, and you can properly      allocate resources. This allows financially effective decisions,      with no compromise in end-user experience.</p> </li> </ul> <p>Before we dive deeper into monitoring, let's understand some basic terminologies.</p> <ul> <li> <p>Metric\u2014A metric is a quantitative measure of a particular      system attribute\u2014for example, memory or CPU</p> </li> <li> <p>Node or host\u2014A physical server, virtual machine, or container      where an application is running</p> </li> <li> <p>QPS\u2014Queries Per Second, a measure of traffic served by the      service per second</p> </li> <li> <p>Latency\u2014The time interval between user action and the      response from the server\u2014for example, time spent after sending a      query to a database before the first response bit is received</p> </li> <li> <p>Error rate\u2014Number of errors observed over a particular      time period (usually a second)</p> </li> <li> <p>Graph\u2014In monitoring, a graph is a representation of one or      more values of metrics collected over time</p> </li> <li> <p>Dashboard\u2014A dashboard is a collection of graphs that provide      an overview of system health</p> </li> <li> <p>Incident\u2014An incident is an event that disrupts the normal      operations of a system</p> </li> <li> <p>MTTD\u2014Mean Time To Detect is the time interval between the      beginning of a service failure and the detection of such failure</p> </li> <li> <p>MTTR\u2014Mean Time To Resolve is the time spent to fix a service      failure and bring the service back to its normal state</p> </li> </ul> <p>Before we discuss monitoring an application, let us look at the monitoring infrastructure. Following is an illustration of a basic monitoring system.</p> <p> </p> <p> Figure 1: Illustration of a monitoring infrastructure </p> <p>Figure 1 shows a monitoring infrastructure mechanism for aggregating metrics on the system, and collecting and storing the data for display. In addition, a monitoring infrastructure includes alert subsystems for notifying concerned parties during any abnormal behavior. Let's look at each of these infrastructure components:</p> <ul> <li> <p>Host metrics agent\u2014A host metrics agent is a process      running on the host that collects performance statistics for host      subsystems such as memory, CPU, and network. These metrics are      regularly relayed to a metrics collector for storage and      visualization. Some examples are      collectd,      telegraf,      and metricbeat.</p> </li> <li> <p>Metric aggregator\u2014A metric aggregator is a process running      on the host. Applications running on the host collect service      metrics using      instrumentation.      Collected metrics are sent either to the aggregator process or      directly to the metrics collector over API, if available. Received      metrics are aggregated periodically and relayed to the metrics      collector in batches. An example is      StatsD.</p> </li> <li> <p>Metrics collector\u2014A metrics collector process collects all      the metrics from the metric aggregators running on multiple hosts.      The collector takes care of decoding and stores this data on the      database. Metric collection and storage might be taken care of by      one single service such as      InfluxDB, which we discuss      next. An example is carbon      daemons.</p> </li> <li> <p>Storage\u2014A time-series database stores all of these metrics.      Examples are OpenTSDB,      Whisper,      and InfluxDB.</p> </li> <li> <p>Metrics server\u2014A metrics server can be as basic as a web      server that graphically renders metric data. In addition, the      metrics server provides aggregation functionalities and APIs for      fetching metric data programmatically. Some examples are      Grafana and      Graphite-Web.</p> </li> <li> <p>Alert manager\u2014The alert manager regularly polls metric data      available and, if there are any anomalies detected, notifies you.      Each alert has a set of rules for identifying such anomalies.      Today many metrics servers such as      Grafana support alert      management. We discuss alerting in detail      later. Examples are      Grafana and      Icinga.</p> </li> </ul>"},{"location":"level101/metrics_and_monitoring/observability/","title":"Observability","text":""},{"location":"level101/metrics_and_monitoring/observability/#_1","title":"Observability","text":""},{"location":"level101/metrics_and_monitoring/observability/#observability","title":"Observability","text":"<p>Engineers often use observability when referring to building reliable systems. Observability is a term derived from control theory, it is a measure of how well internal states of a system can be inferred from knowledge of its external outputs. Service infrastructures used on a daily basis are becoming more and more complex; proactive monitoring alone is not sufficient to quickly resolve issues causing application failures. With monitoring, you can keep known past failures from recurring, but with a complex service architecture, many unknown factors can cause potential problems. To address such cases, you can make the service observable. An observable system provides highly granular insights into the implicit failure modes. In addition, an observable system furnishes ample context about its inner workings, which unlocks the ability to uncover deeper systemic issues.</p> <p>Monitoring enables failure detection; observability helps in gaining a better understanding of the system. Among engineers, there is a common misconception that monitoring and observability are two different things. Actually, observability is the superset to monitoring; that is, monitoring improves service observability. The goal of observability is not only to detect problems, but also to understand where the issue is and what is causing it. In addition to metrics, observability has two more pillars: logs and traces, as shown in Figure 9. Although these three components do not make a system 100 percent observable, these are the most important and powerful components that give a better understanding of the system. Each of these pillars has its flaws, which are described in Three Pillars with Zero Answers.</p> <p> <p> Figure 9:  Three pillars of observability </p></p> <p>Because we have covered metrics already, let's look at the other two pillars (logs and traces).</p>"},{"location":"level101/metrics_and_monitoring/observability/#logs","title":"Logs","text":"<p>Logs (often referred to as events) are a record of activities performed by a service during its run time, with a corresponding timestamp. Metrics give abstract information about degradations in a system, and logs give a detailed view of what is causing these degradations. Logs created by the applications and infrastructure components help in effectively understanding the behavior of the system by providing details on application errors, exceptions, and event timelines. Logs help you to go back in time to understand the events that led to a failure. Therefore, examining logs is essential to troubleshooting system failures.</p> <p>Log processing involves the aggregation of different logs from individual applications and their subsequent shipment to central storage. Moving logs to central storage helps to preserve the logs, in case the application instances are inaccessible, or the application crashes due to a failure. After the logs are available in a central place, you can analyze the logs to derive sensible information from them. For audit and compliance purposes, you archive these logs on the central storage for a certain period of time. Log analyzers fetch useful information from log lines, such as request user information, request URL (feature), and response headers (such as content length) and response time. This information is grouped based on these attributes and made available to you through a visualization tool for quick understanding.</p> <p>You might be wondering how this log information helps. This information gives a holistic view of activities performed on all the involved entities. For example, let's say someone is performing a DoS (denial of service) attack on a web application. With the help of log processing, you can quickly look at top client IPs derived from access logs and identify where the attack is coming from.</p> <p>Similarly, if a feature in an application is causing a high error rate when accessed with a particular request parameter value, the results of log analysis can help you to quickly identify the misbehaving parameter value and take further action.</p> <p> </p> <p> Figure 10: Log processing and analysis using ELK stack </p> <p>Figure 10 shows a log processing platform using ELK (Elasticsearch, Logstash, Kibana), which provides centralized log processing. Beats is a collection of lightweight data shippers that can ship logs, audit data, network data, and so on over the network. In this use case specifically, we are using Filebeat as a log shipper. Filebeat watches service log files and ships the log data to Logstash. Logstash parses these logs and transforms the data, preparing it to store on Elasticsearch. Transformed log data is stored on Elasticsearch and indexed for fast retrieval. Kibana searches and displays log data stored on Elasticsearch. Kibana also provides a set of visualizations for graphically displaying summaries derived from log data.</p> <p>Storing logs is expensive. And extensive logging of every event on the server is costly and takes up more storage space. With an increasing number of services, this cost can increase proportionally to the number of services.</p>"},{"location":"level101/metrics_and_monitoring/observability/#tracing","title":"Tracing","text":"<p>So far, we covered the importance of metrics and logging. Metrics give an abstract overview of the system, and logging gives a record of events that occurred. Imagine a complex distributed system with multiple microservices, where a user request is processed by multiple microservices in the system. Metrics and logging give you some information about how these requests are being handled by the system, but they fail to provide detailed information across all the microservices and how they affect a particular client request. If a slow downstream microservice is leading to increased response times, you need to have detailed visibility across all involved microservices to identify such microservice. The answer to this need is a request tracing mechanism.</p> <p>A trace is a series of spans, where each span is a record of events performed by different microservices to serve the client's request. In simple terms, a trace is a log of client-request serving derived from various microservices across different physical machines. Each span includes span metadata such as trace ID and span ID, and context, which includes information about transactions performed.</p> <p> </p> <p> Figure 11: Trace and spans for a URL shortener request </p> <p>Figure 11 is a graphical representation of a trace captured on the URL shortener example we covered earlier while learning Python.</p> <p>Similar to monitoring, the tracing infrastructure comprises a few modules for collecting traces, storing them, and accessing them. Each microservice runs a tracing library that collects traces in the background, creates in-memory batches, and submits the tracing backend. The tracing backend normalizes received trace data and stores it on persistent storage. Tracing data comes from multiple different microservices; therefore, trace storage is often organized to store data incrementally and is indexed by trace identifier. This organization helps in the reconstruction of trace data and in visualization. Figure 12 illustrates the anatomy of the distributed system.</p> <p></p> <p> Figure 12: Anatomy of distributed tracing </p> <p>Today a set of tools and frameworks are available for building distributed tracing solutions. Following are some of the popular tools:</p> <ul> <li> <p>OpenTelemetry: Observability      framework for cloud-native software</p> </li> <li> <p>Jaeger: Open-source      distributed tracing solution</p> </li> <li> <p>Zipkin: Open-source distributed tracing      solution</p> </li> </ul>"},{"location":"level101/metrics_and_monitoring/third-party_monitoring/","title":"Third-party Monitoring","text":""},{"location":"level101/metrics_and_monitoring/third-party_monitoring/#_1","title":"Third-party Monitoring","text":""},{"location":"level101/metrics_and_monitoring/third-party_monitoring/#third-party-monitoring","title":"Third-party monitoring","text":"<p>Today most cloud providers offer a variety of monitoring solutions. In addition, a number of companies such as Datadog offer monitoring-as-a-service. In this section, we are not covering monitoring-as-a-service in depth.</p> <p>In recent years, more and more people have access to the Internet. Many services are offered online to cater to the increasing user base. As a result, web pages are becoming larger, with increased client-side scripts. Users want these services to be fast and error-free. From the service point of view, when the response body is composed, an HTTP 200 OK response is sent, and everything looks okay. But there might be errors during transmission or on the client-side. As previously mentioned, monitoring services from within the service infrastructure give good visibility into service health, but this is not enough. You need to monitor user experience, specifically the availability of services for clients. A number of third-party services such as Catchpoint, Pingdom, and so on are available for achieving this goal.</p> <p>Third-party monitoring services can generate synthetic traffic simulating user requests from various parts of the world, to ensure the service is globally accessible. Other third-party monitoring solutions for real user monitoring (RUM) provide performance statistics such as service uptime and response time, from different geographical locations. This allows you to monitor the user experience from these locations, which might have different Internet backbones, different operating systems, and different browsers and browser versions. Catchpoint Global Monitoring Network is a comprehensive 3-minute video that explains the importance of monitoring the client experience.</p>"},{"location":"level101/python_web/intro/","title":"Python and The Web","text":""},{"location":"level101/python_web/intro/#prerequisites","title":"Prerequisites","text":"<ul> <li>Basic understanding of Python language.</li> <li>Basic familiarity with Flask framework.</li> </ul>"},{"location":"level101/python_web/intro/#what-to-expect-from-this-course","title":"What to expect from this course","text":"<p>This course is divided into two high-level parts. In the first part, assuming familiarity with Python language\u2019s basic operations and syntax usage, we will dive a little deeper into understanding Python as a language. We will compare Python with other programming languages that you might already know like Java and C. We will also explore concepts of Python objects and with help of that, explore Python features like decorators.</p> <p>In the second part which will revolve around the web, and also assume familiarity with the Flask framework, we will start from the <code>socket</code> module and work with HTTP requests. This will demystify how frameworks like Flask work internally.</p> <p>And to introduce SRE flavour to the course, we will design, develop and deploy (in theory) a URL-shortening application. We will emphasize parts of the whole process that are more important as an SRE of the said app/service.</p>"},{"location":"level101/python_web/intro/#what-is-not-covered-under-this-course","title":"What is not covered under this course","text":"<p>Extensive knowledge of Python internals and advanced Python.</p>"},{"location":"level101/python_web/intro/#lab-environment-setup","title":"Lab Environment Setup","text":"<p>Have latest version of Python installed</p>"},{"location":"level101/python_web/intro/#course-contents","title":"Course Contents","text":"<ol> <li>The Python Language<ol> <li>Some Python Concepts</li> <li>Python Gotchas</li> </ol> </li> <li>Python and Web<ol> <li>Sockets</li> <li>Flask</li> </ol> </li> <li>The URL-Shortening App<ol> <li>Design</li> <li>Scaling The App</li> <li>Monitoring The App</li> </ol> </li> </ol>"},{"location":"level101/python_web/intro/#the-python-language","title":"The Python Language","text":"<p>Assuming you know a little bit of C/C++ and Java, let's try to discuss the following questions in context of those two languages and Python. You might have heard that C/C++ is a compiled language while Python is an interpreted language. Generally, with compiled language we first compile the program and then run the executable while in case of Python we run the source code directly like <code>python hello_world.py</code>. While Java, being an interpreted language, still has a separate compilation step and then it's run. So, what's really the difference?</p>"},{"location":"level101/python_web/intro/#compiled-vs-interpreted","title":"Compiled vs. Interpreted","text":"<p>This might sound a little weird to you: Python, in a way is a compiled language! Python has a compiler built-in! It is obvious in the case of Java since we compile it using a separate command, ie: <code>javac helloWorld.java</code> and it will produce a <code>.class</code> file which we know as a bytecode. Well, Python is very similar to that. One difference here is that there is no separate compile command/binary needed to run a Python program.</p> <p>What is the difference then, between Java and Python? Well, Java's compiler is more strict and sophisticated. As you might know Java is a statically typed language. So the compiler is written in a way that it can verify types-related errors during compile time. While Python being a dynamic language, types are not known until a program is run. So in a way, Python compiler is dumb (or, less strict). But there indeed is a compile step involved when a Python program is run. You might have seen Python bytecode files with <code>.pyc</code> extension. Here is how you can see bytecode for a given Python program.</p> <pre><code># Create a Hello World\n$ echo \"print('hello world')\" &gt; hello_world.py\n\n# Making sure it runs\n$ python3 hello_world.py\nhello world\n\n# The bytecode of the given program\n$ python -m dis hello_world.py\n 1           0 LOAD_NAME                0 (print)\n             2 LOAD_CONST               0 ('hello world')\n             4 CALL_FUNCTION            1\n             6 POP_TOP\n             8 LOAD_CONST               1 (None)\n            10 RETURN_VALUE\n</code></pre> <p>Read more about <code>dis</code> module here.</p> <p>Now coming to C/C++, there of course is a compiler. But the output is different than what Java/Python compiler would produce. Compiling a C program would produce what we also know as machine code, as opposed to bytecode.</p>"},{"location":"level101/python_web/intro/#running-the-programs","title":"Running The Programs","text":"<p>We know compilation is involved in all 3 languages we are discussing. Just that the compilers are different in nature and they output different types of content. In case of C/C++, the output is machine code which can be directly read by your operating system. When you execute that program, your OS will know how exactly to run it. But this is not the case with bytecode.</p> <p>Those bytecodes are language specific. Python has its own set of bytecode defined (more in <code>dis</code> module) and so does Java. So naturally, your operating system will not know how to run it. To run this bytecode, we have something called Virtual Machines. Ie: The JVM or the Python VM (CPython, Jython). These so-called Virtual Machines are the programs which can read the bytecode and run it on a given operating system. Python has multiple VMs available. CPython is a Python VM implemented in C language, similarly Jython is a Java implementation of Python VM. At the end of the day, what they should be capable of is to understand Python language syntax, be able to compile it to bytecode and be able to run that bytecode. You can implement a Python VM in any language! (And people do so, just because it can be done)</p> <pre><code>                                                              The Operating System\n\n                                                              +------------------------------------+\n                                                              |                                    |\n                                                              |                                    |\n                                                              |                                    |\nhello_world.py                    Python bytecode             |         Python VM Process          |\n                                                              |                                    |\n+----------------+                +----------------+          |         +----------------+         |\n|print(...       |   COMPILE      |LOAD_CONST...   |          |         |Reads bytecode  |         |\n|                +---------------&gt;+                +-------------------&gt;+line by line    |         |\n|                |                |                |          |         |and executes.   |         |\n|                |                |                |          |         |                |         |\n+----------------+                +----------------+          |         +----------------+         |\n                                                              |                                    |\n                                                              |                                    |\n                                                              |                                    |\nhello_world.c                     OS Specific machinecode     |         A New Process              |\n                                                              |                                    |\n+----------------+                +----------------+          |         +----------------+         |\n|void main() {   |   COMPILE      | binary contents|          |         | binary contents|         |\n|                +---------------&gt;+                +-------------------&gt;+                |         |\n|                |                |                |          |         |                |         |\n|                |                |                |          |         |                |         |\n+----------------+                +----------------+          |         +----------------+         |\n                                                              |         (binary contents           |\n                                                              |         runs as is)                |\n                                                              |                                    |\n                                                              |                                    |\n                                                              +------------------------------------+\n</code></pre> <p>Two things to note for above diagram:</p> <ol> <li>Generally, when we run a Python program, a Python VM process is started which reads the Python source code, compiles it to bytecode and run it in a single step. Compiling is not a separate step. Shown only for illustration purpose.</li> <li>Binaries generated for C like languages are not exactly run as is. Since there are multiple types of binaries (eg: ELF), there are more complicated steps involved in order to run a binary but we will not go into that since all that is done at OS level.</li> </ol>"},{"location":"level101/python_web/python-concepts/","title":"Some Python Concepts","text":"<p>Though you are expected to know python and its syntax at basic level, let us discuss some fundamental concepts that will help you understand the Python language better.</p> <p>Everything in Python is an object.</p> <p>That includes the functions, lists, dicts, classes, modules, a running function (instance of function definition), everything. In the CPython, it would mean there is an underlying <code>struct</code> variable for each object.</p> <p>In Python's current execution context, all the variables are stored in a dict. It'd be a string to object mapping. If you have a function and a float variable defined in the current context, here is how it is handled internally.</p> <pre><code>&gt;&gt;&gt; float_number=42.0\n&gt;&gt;&gt; def foo_func():\n...     pass\n...\n\n# NOTICE HOW VARIABLE NAMES ARE STRINGS, stored in a dict\n&gt;&gt;&gt; locals()\n{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': &lt;class '_frozen_importlib.BuiltinImporter'&gt;, '__spec__': None, '__annotations__': {}, '__builtins__': &lt;module 'builtins' (built-in)&gt;, 'float_number': 42.0, 'foo_func': &lt;function foo_func at 0x1055847a0&gt;}\n</code></pre>"},{"location":"level101/python_web/python-concepts/#python-functions","title":"Python Functions","text":"<p>Since functions too are objects, we can see what all attributes a function contains as following</p> <pre><code>&gt;&gt;&gt; def hello(name):\n...     print(f\"Hello, {name}!\")\n...\n&gt;&gt;&gt; dir(hello)\n['__annotations__', '__call__', '__class__', '__closure__', '__code__', '__defaults__', '__delattr__', '__dict__',\n'__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__get__', '__getattribute__', '__globals__', '__gt__',\n'__hash__', '__init__', '__init_subclass__', '__kwdefaults__', '__le__', '__lt__', '__module__', '__name__',\n'__ne__', '__new__', '__qualname__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__',\n'__subclasshook__']\n</code></pre> <p>While there are a lot of them, let's look at some interesting ones.</p>"},{"location":"level101/python_web/python-concepts/#globals","title":"globals","text":"<p>This attribute, as the name suggests, has references of global variables. If you ever need to know what all global variables are in the scope of this function, this will tell you. See how the function start seeing the new variable in globals</p> <pre><code>&gt;&gt;&gt; hello.__globals__\n{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': &lt;class '_frozen_importlib.BuiltinImporter'&gt;, '__spec__': None, '__annotations__': {}, '__builtins__': &lt;module 'builtins' (built-in)&gt;, 'hello': &lt;function hello at 0x7fe4e82554c0&gt;}\n\n# adding new global variable\n&gt;&gt;&gt; GLOBAL=\"g_val\"\n&gt;&gt;&gt; hello.__globals__\n{'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': &lt;class '_frozen_importlib.BuiltinImporter'&gt;, '__spec__': None, '__annotations__': {}, '__builtins__': &lt;module 'builtins' (built-in)&gt;, 'hello': &lt;function hello at 0x7fe4e82554c0&gt;, 'GLOBAL': 'g_val'}\n</code></pre>"},{"location":"level101/python_web/python-concepts/#code","title":"code","text":"<p>This is an interesting one! As everything in Python is an object, this includes the bytecode too. The compiled Python bytecode is a Python code object. Which is accessible via <code>__code__</code> attribute here. A function has an associated code object which carries some interesting information.</p> <pre><code># the file in which function is defined\n# stdin here since this is run in an interpreter\n&gt;&gt;&gt; hello.__code__.co_filename\n'&lt;stdin&gt;'\n\n# number of arguments the function takes\n&gt;&gt;&gt; hello.__code__.co_argcount\n1\n\n# local variable names\n&gt;&gt;&gt; hello.__code__.co_varnames\n('name',)\n\n# the function code's compiled bytecode\n&gt;&gt;&gt; hello.__code__.co_code\nb't\\x00d\\x01|\\x00\\x9b\\x00d\\x02\\x9d\\x03\\x83\\x01\\x01\\x00d\\x00S\\x00'\n</code></pre> <p>There are more code attributes which you can enlist by <code>&gt;&gt;&gt; dir(hello.__code__)</code>.</p>"},{"location":"level101/python_web/python-concepts/#decorators","title":"Decorators","text":"<p>Related to functions, Python has another feature called decorators. Let's see how that works, keeping  <code>everything is an object</code> in mind.</p> <p>Here is a sample decorator:</p> <pre><code>&gt;&gt;&gt; def deco(func):\n...     def inner():\n...             print(\"before\")\n...             func()\n...             print(\"after\")\n...     return inner\n...\n&gt;&gt;&gt; @deco\n... def hello_world():\n...     print(\"hello world\")\n...\n&gt;&gt;&gt;\n&gt;&gt;&gt; hello_world()\nbefore\nhello world\nafter\n</code></pre> <p>Here <code>@deco</code> syntax is used to decorate the <code>hello_world</code> function. It is essentially same as doing</p> <pre><code>&gt;&gt;&gt; def hello_world():\n...     print(\"hello world\")\n...\n&gt;&gt;&gt; hello_world = deco(hello_world)\n</code></pre> <p>What goes inside the <code>deco</code> function might seem complex. Let's try to uncover it.</p> <ol> <li>Function <code>hello_world</code> is created</li> <li>It is passed to <code>deco</code> function</li> <li><code>deco</code> create a new function<ol> <li>This new function calls <code>hello_world</code> function</li> <li>And does a couple other things</li> </ol> </li> <li><code>deco</code> returns the newly created function</li> <li><code>hello_world</code> is replaced with above function</li> </ol> <p>Let's visualize it for better understanding</p> <pre><code>       BEFORE                   function_object (ID: 100)\n\n       \"hello_world\"            +--------------------+\n               +                |print(\"hello_world\")|\n               |                |                    |\n               +--------------&gt; |                    |\n                                |                    |\n                                +--------------------+\n\n\n       WHAT DECORATOR DOES\n\n       creates a new function (ID: 101)\n       +---------------------------------+\n       |input arg: function with id: 100 |\n       |                                 |\n       |print(\"before\")                  |\n       |call function object with id 100 |\n       |print(\"after\")                   |\n       |                                 |\n       +---------------------------------+\n                                   ^\n                                   |\n       AFTER                       |\n                                   |\n                                   |\n       \"hello_world\" +-------------+\n</code></pre> <p>Note how the <code>hello_world</code> name points to a new function object but that new function object knows the reference (ID) of the original function.</p>"},{"location":"level101/python_web/python-concepts/#some-gotchas","title":"Some Gotchas","text":"<ul> <li>While it is very quick to build prototypes in Python and there are tons of libraries available, as the codebase complexity increases, type errors become more common and will get hard to deal with. (There are solutions to that problem like type annotations in Python. Checkout mypy.)</li> <li>Because Python is dynamically typed language, that means all types are determined at runtime. And that makes Python run very slow compared to other statically typed languages.</li> <li>Python has something called GIL (global interpreter lock) which is a limiting factor for utilizing multiple CPU cores for parallel computation.</li> <li>Some weird things that Python does: https://github.com/satwikkansal/wtfpython.</li> </ul>"},{"location":"level101/python_web/python-web-flask/","title":"Python, Web and Flask","text":"<p>Back in the old days, websites were simple. They were simple static html contents. A webserver would be listening on a defined port and according to the HTTP request received, it would read files from disk and return them in response. But since then, complexity has evolved and websites are now dynamic. Depending on the request, multiple operations need to be performed like reading from database or calling other API and finally returning some response (HTML data, JSON content, etc.)</p> <p>Since serving web requests is no longer a simple task like reading files from disk and return contents, we need to process each HTTP request, perform some operations programmatically and construct a response.</p>"},{"location":"level101/python_web/python-web-flask/#sockets","title":"Sockets","text":"<p>Though we have frameworks like Flask, HTTP is still a protocol that works over TCP protocol. So, let us setup a TCP server and send an HTTP request and inspect the request's payload. Note that this is not a tutorial on socket programming but what we are doing here is inspecting HTTP protocol at its ground level and look at what its contents look like. (Ref: Socket Programming in Python (Guide) on RealPython)</p> <pre><code>import socket\n\nHOST = '127.0.0.1'  # Standard loopback interface address (localhost)\nPORT = 65432        # Port to listen on (non-privileged ports are &gt; 1023)\n\nwith socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n   s.bind((HOST, PORT))\n   s.listen()\n   conn, addr = s.accept()\n   with conn:\n       print('Connected by', addr)\n       while True:\n           data = conn.recv(1024)\n           if not data:\n               break\n           print(data)\n</code></pre> <p>Then, we open <code>localhost:65432</code> in our web browser and following would be the output:</p> <pre><code>Connected by ('127.0.0.1', 54719)\nb'GET / HTTP/1.1\\r\\nHost: localhost:65432\\r\\nConnection: keep-alive\\r\\nDNT: 1\\r\\nUpgrade-Insecure-Requests: 1\\r\\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36 Edg/85.0.564.44\\r\\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\\r\\nSec-Fetch-Site: none\\r\\nSec-Fetch-Mode: navigate\\r\\nSec-Fetch-User: ?1\\r\\nSec-Fetch-Dest: document\\r\\nAccept-Encoding: gzip, deflate, br\\r\\nAccept-Language: en-US,en;q=0.9\\r\\n\\r\\n'\n</code></pre> <p>Examine closely and the content will look like the HTTP protocol's format. ie:</p> <pre><code>HTTP_METHOD URI_PATH HTTP_VERSION\nHEADERS_SEPARATED_BY_SEPARATOR\n</code></pre> <p>So though it's a blob of bytes, knowing http protocol specification, you can parse that string (ie: split by <code>\\r\\n</code>) and get meaningful information out of it.</p>"},{"location":"level101/python_web/python-web-flask/#flask","title":"Flask","text":"<p>Flask, and other such frameworks does pretty much what we just discussed in the last section (with added more sophistication). They listen on a port on a TCP socket, receive an HTTP request, parse the data according to protocol format and make it available to you in a convenient manner.</p> <p>That is you can access headers in Flask by <code>request.headers</code> which is made available to you by splitting above payload by <code>/r/n</code>, as defined in HTTP protocol.</p> <p>Another example: we register routes in Flask by <code>@app.route(\"/hello\")</code>. What Flask will do is maintain a registry internally which will map <code>/hello</code> with the function you decorated with. Now, whenever a request comes with the <code>/hello</code> route (second component in the first line, split by space), Flask calls the registered function and returns whatever the function returned.</p> <p>Same with all other web frameworks in other languages too. They all work on similar principles. What they basically do is understand the HTTP protocol, parses the HTTP request data and gives us programmers a nice interface to work with HTTP requests.</p> <p>Not so much of magic in it?</p>"},{"location":"level101/python_web/sre-conclusion/","title":"Conclusion","text":""},{"location":"level101/python_web/sre-conclusion/#scaling-the-app","title":"Scaling The App","text":"<p>The design and development is just a part of the journey. We will need to setup continuous integration and continuous delivery pipelines sooner or later. And we have to deploy this app somewhere.</p> <p>Initially, we can start with deploying this app on one virtual machine on any cloud provider. But this is a <code>Single point of failure</code> which is something we never allow as an SRE (or even as an engineer). So an improvement here can be having multiple instances of applications deployed behind a load balancer. This certainly prevents problems of one machine going down.</p> <p>Scaling here would mean adding more instances behind the load balancer. But this is scalable upto only a certain point. After that, other bottlenecks in the system will start appearing. ie: DB will become the bottleneck, or perhaps the load balancer itself. How do you know what is the bottleneck? You need to have observability into each aspects of the application architecture.</p> <p>Only after you have metrics, you will be able to know what is going wrong where. What gets measured, gets fixed!</p> <p>Get deeper insights into scaling from School Of SRE's Scalability module and post going through it, apply your learnings and takeaways to this app. Think how will we make this app geographically distributed and highly available and scalable.</p>"},{"location":"level101/python_web/sre-conclusion/#monitoring-strategy","title":"Monitoring Strategy","text":"<p>Once we have our application deployed. It will be working okay. But not forever. Reliability is in the title of our job and we make systems reliable by making the design in a certain way. But things still will go down. Machines will fail. Disks will behave weirdly. Buggy code will get pushed to production. And all these possible scenarios will make the system less reliable. So what do we do? We monitor!</p> <p>We keep an eye on the system's health and if anything is not going as expected, we want ourselves to get alerted.</p> <p>Now let's think in terms of the given URL-shortening app. We need to monitor it. And we would want to get notified in case something goes wrong. But we first need to decide what is that something that we want to keep an eye on.</p> <ol> <li>Since it's a web app serving HTTP requests, we want to keep an eye on HTTP Status codes and latencies</li> <li>Request volume again is a good candidate, if the app is receiving an unusual amount of traffic, something might be off.</li> <li>We also want to keep an eye on the database so depending on the database solution chosen. Query times, volumes, disk usage, etc.</li> <li>Finally, there also needs to be some external monitoring which runs periodic tests from devices outside of your data centers. This emulates customers and ensures that from customer point of view, the system is working as expected.</li> </ol>"},{"location":"level101/python_web/sre-conclusion/#applications-in-sre-role","title":"Applications in SRE role","text":"<p>In the world of SRE, Python is a widely used language for small scripts and tooling developed for various purposes. Since tooling developed by SRE works with critical pieces of infrastructure and has great power (to bring things down), it is important to know what you are doing while using a programming language and its features. Also it is equally important to know the language and its characteristics while debugging the issues. As an SRE having a deeper understanding of Python language, it has helped me a lot to debug very sneaky bugs and be generally more aware and informed while making certain design decisions.</p> <p>While developing tools may or may not be part of SRE job, supporting tools or services is more likely to be a daily duty. Building an application or tool is just a small part of productionization. While there is certainly that goes in the design of the application itself to make it more robust, as an SRE you are responsible for its reliability and stability once it is deployed and running. And to ensure that, you\u2019d need to understand the application first and then come up with a strategy to monitor it properly and be prepared for various failure scenarios.</p>"},{"location":"level101/python_web/sre-conclusion/#optional-exercises","title":"Optional Exercises","text":"<ol> <li>Make a decorator that will cache function return values depending on input parameters.</li> <li>Host the URL-shortening app on any cloud provider.</li> <li>Setup monitoring using many of the tools available like Catchpoint, Datadog, etc.</li> <li>Create a minimal Flask-like framework on top of TCP sockets.</li> </ol>"},{"location":"level101/python_web/sre-conclusion/#conclusion_1","title":"Conclusion","text":"<p>This module, in the first part, aims to make you more aware of the things that will happen when you choose Python as your programming language and what happens when you run a Python program. With the knowledge of how Python handles things internally as objects, lot of seemingly magic things in Python will start to make more sense.</p> <p>The second part will first explain how a framework like Flask works using the existing knowledge of protocols like TCP and HTTP. It then touches the whole lifecycle of an application development lifecycle including the SRE parts of it. While the design and areas in architecture considered will not be exhaustive, it will give a good overview of things that are also important being an SRE and why they are important.</p>"},{"location":"level101/python_web/url-shorten-app/","title":"The URL Shortening App","text":"<p>Let's build a very simple URL-shortening app using Flask and try to incorporate all aspects of the development process including the reliability aspects. We will not be building the UI and we will come up with a minimal set of API that will be enough for the app to function well.</p>"},{"location":"level101/python_web/url-shorten-app/#design","title":"Design","text":"<p>We don't jump directly to coding. First thing we do is gather requirements. Come up with an approach. Have the approach/design reviewed by peers. Evolve, iterate, document the decisions and tradeoffs. And then finally implement. While we will not do the full blown design document here, we will raise certain questions here that are important to the design.</p>"},{"location":"level101/python_web/url-shorten-app/#1-high-level-operations-and-api-endpoints","title":"1. High Level Operations and API Endpoints","text":"<p>Since it's a URL-shortening app, we will need an API for generating the shorten link given an original link. And an API/Endpoint which will accept the shorten link and redirect to original URL. We are not including the user aspect of the app to keep things minimal. These two API should make app functional and usable by anyone.</p>"},{"location":"level101/python_web/url-shorten-app/#2-how-to-shorten","title":"2. How to shorten?","text":"<p>Given a URL, we will need to generate a shortened version of it. One approach could be using random characters for each link. Another thing that can be done is to use some sort of hashing algorithm. The benefit here is we will reuse the same hash for the same link. Ie: if lot of people are shortening <code>https://www.linkedin.com</code>, they all will have the same value, compared to multiple entries in DB if chosen random characters.</p> <p>What about hash collisions? Even in random characters approach, though there is a less probability, hash collisions can happen. And we need to be mindful of them. In that case, we might want to prepend/append the string with some random value to avoid conflict.</p> <p>Also, choice of hash algorithm matters. We will need to analyze algorithms. Their CPU requirements and their characteristics. Choose one that suits the most.</p>"},{"location":"level101/python_web/url-shorten-app/#3-is-url-valid","title":"3. Is URL Valid?","text":"<p>Given a URL to shorten, how do we verify if the URL is valid? Do we even verify or validate? One basic check that can be done is see if the URL matches a regex of a URL. To go even further, we can try opening/visiting the URL. But there are certain gotchas here.</p> <ol> <li>We need to define success criteria. ie: HTTP 200 means it is valid.</li> <li>What if the URL is in private network?</li> <li>What if URL is temporarily down?</li> </ol>"},{"location":"level101/python_web/url-shorten-app/#4-storage","title":"4. Storage","text":"<p>Finally, storage. Where will we store the data that we will generate over time? There are multiple database solutions available and we will need to choose the one that suits this app the most. Relational database like MySQL would be a fair choice but be sure to checkout School of SRE's SQL database section and NoSQL databases section for deeper insights into making a more informed decision.</p>"},{"location":"level101/python_web/url-shorten-app/#5-other","title":"5. Other","text":"<p>We are not accounting for users into our app and other possible features like rate limiting, customized links, etc. but it will eventually come up with time. Depending on the requirements, they too might need to get incorporated.</p> <p>The minimal working code is given below for reference, but I'd encourage you to come up with your own.</p> <pre><code>from flask import Flask, redirect, request\nfrom hashlib import md5\n\napp = Flask(\"url_shortener\")\n\nmapping = {}\n\n@app.route(\"/shorten\", methods=[\"POST\"])\ndef shorten():\n    global mapping\n    payload = request.json\n\n    if \"url\" not in payload:\n        return \"Missing URL Parameter\", 400\n\n    # TODO: check if URL is valid\n\n    hash_ = md5()\n    hash_.update(payload[\"url\"].encode())\n    digest = hash_.hexdigest()[:5]  # limiting to 5 chars. Less the limit more the chances of collission\n\n    if digest not in mapping:\n        mapping[digest] = payload[\"url\"]\n        return f\"Shortened: r/{digest}\\n\"\n    else:\n        # TODO: check for hash collission\n        return f\"Already exists: r/{digest}\\n\"\n\n\n@app.route(\"/r/&lt;hash_&gt;\")\ndef redirect_(hash_):\n    if hash_ not in mapping:\n        return \"URL Not Found\", 404\n    return redirect(mapping[hash_])\n\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n\n\"\"\"\nOUTPUT:\n\n\n===&gt; SHORTENING\n\n$ curl localhost:5000/shorten -H \"content-type: application/json\" --data '{\"url\":\"https://linkedin.com\"}'\nShortened: r/a62a4\n\n\n===&gt; REDIRECTING, notice the response code 302 and the location header\n\n$ curl localhost:5000/r/a62a4 -v\n* Uses proxy env variable NO_PROXY == '127.0.0.1'\n*   Trying ::1...\n* TCP_NODELAY set\n* Connection failed\n* connect to ::1 port 5000 failed: Connection refused\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 5000 (#0)\n&gt; GET /r/a62a4 HTTP/1.1\n&gt; Host: localhost:5000\n&gt; User-Agent: curl/7.64.1\n&gt; Accept: */*\n&gt;\n* HTTP 1.0, assume close after body\n&lt; HTTP/1.0 302 FOUND\n&lt; Content-Type: text/html; charset=utf-8\n&lt; Content-Length: 247\n&lt; Location: https://linkedin.com\n&lt; Server: Werkzeug/0.15.4 Python/3.7.7\n&lt; Date: Tue, 27 Oct 2020 09:37:12 GMT\n&lt;\n&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"&gt;\n&lt;title&gt;Redirecting...&lt;/title&gt;\n&lt;h1&gt;Redirecting...&lt;/h1&gt;\n* Closing connection 0\n&lt;p&gt;You should be redirected automatically to target URL: &lt;a href=\"https://linkedin.com\"&gt;https://linkedin.com&lt;/a&gt;.  If not click the link.\n\"\"\"\n</code></pre>"},{"location":"level101/security/conclusion/","title":"Conclusion","text":"<p>Now that you have completed this course on Security you are now aware of the possible security threats to computer systems &amp; networks. Not only that, but you are now better able to protect your systems as well as recommend security measures to others.</p> <p>This course provides fundamental everyday knowledge on security domain which will also help you keep security at the top of your priority.</p>"},{"location":"level101/security/conclusion/#other-resources","title":"Other Resources","text":"<p>Some books that would be a great resource</p> <ul> <li> <p>Holistic Info-Sec for Web Developers (https://holisticinfosecforwebdevelopers.com/)\u2014Free and downloadable book series with very broad and deep coverage of what Web Developers and DevOps Engineers need to know in order to create robust, reliable, maintainable and secure software, networks and other, that are delivered continuously, on time, with no nasty surprises.</p> </li> <li> <p>Docker Security: Quick Reference\u2014For DevOps Engineers (https://leanpub.com/dockersecurity-quickreference)\u2014A book on understanding the Docker security defaults, how to improve them (theory and practical), along with many tools and techniques.</p> </li> <li> <p>How to Hack Like a Legend (https://amzn.to/2uWh1Up)\u2014A hacker\u2019s tale breaking into a secretive offshore company, Sparc Flow, 2018</p> </li> <li> <p>How to Investigate Like a Rockstar (https://books2read.com/u/4jDWoZ)\u2014Live a real crisis to master the secrets of forensic analysis, Sparc Flow, 2017</p> </li> <li> <p>Real World Cryptography (https://www.manning.com/books/real-world-cryptography)\u2014This early-access book teaches you applied cryptographic techniques to understand and apply security at every level of your systems and applications.</p> </li> <li> <p>AWS Security (https://www.manning.com/books/aws-security?utm_source=github&amp;utm_medium=organic&amp;utm_campaign=book_shields_aws_1_31_20)\u2014This early-access book covers common AWS security issues and best practices for access policies, data protection, auditing, continuous monitoring, and incident response.</p> </li> </ul>"},{"location":"level101/security/conclusion/#post-training-asks-further-reading","title":"Post Training asks/ Further Reading","text":"<ul> <li>CTF Events like: https://github.com/apsdehal/awesome-ctf</li> <li>Penetration Testing: https://github.com/enaqx/awesome-pentest</li> <li>Threat Intelligence: https://github.com/hslatman/awesome-threat-intelligence</li> <li>Threat Detection &amp; Hunting: https://github.com/0x4D31/awesome-threat-detection</li> <li>Web Security: https://github.com/qazbnm456/awesome-web-security</li> <li>Building Secure and Reliable Systems: https://landing.google.com/sre/resources/foundationsandprinciples/srs-book/</li> </ul>"},{"location":"level101/security/fundamentals/","title":"Part I: Fundamentals","text":""},{"location":"level101/security/fundamentals/#introduction-to-security-overview-for-sre","title":"Introduction to Security Overview for SRE","text":"<ul> <li>If you look closely, both Site Reliability Engineering and Security Engineering are concerned with keeping a system usable.</li> <li>Issues like broken releases, capacity shortages, and misconfigurations can make a system unusable (at least temporarily).</li> <li>Security or privacy incidents that break the trust of users also undermine the usefulness of a system.</li> <li>Consequently, system security should be top of mind for SREs.</li> </ul> <ul> <li>SREs should be involved in both significant design discussions and actual system changes.</li> <li>They have quite a big role in System design &amp; hence are quite sometimes the first line of defence.</li> <li>SRE\u2019s help in preventing bad design &amp; implementations which can affect the overall security of the infrastructure.  </li> <li>Successfully designing, implementing, and maintaining systems requires a commitment to the full system lifecycle. This commitment is possible only when security and reliability are central elements in the architecture of systems.</li> <li> <p>Core Pillars of Information Security:</p> <ul> <li>Confidentiality\u2014only allow access to data for which the user is permitted</li> <li>Integrity\u2014ensure data is not tampered or altered by unauthorized users</li> <li>Availability\u2014ensure systems and data are available to authorized users when they need it</li> </ul> </li> <li> <p>Thinking like a Security Engineer:</p> <ul> <li>When starting a new application or re-factoring an existing application, you should consider each functional feature, and consider:<ul> <li>Is the process surrounding this feature as safe as possible? In other words, is this a flawed process?</li> <li>If I were evil, how would I abuse this feature? Or more specifically failing to address how a feature can be abused can cause design flaws.</li> <li>Is the feature required to be on by default? If so, are there limits or options that could help reduce the risk from this feature?</li> </ul> </li> </ul> </li> <li> <p>Security Principles By OWASP (Open Web Application Security Project)</p> </li> <li>Minimize attack surface area:<ul> <li>Every feature that is added to an application adds a certain amount of risk to the overall application. The aim of secure development is to reduce the overall risk by reducing the attack surface area.</li> <li>For example, a web application implements online help with a search function. The search function may be vulnerable to SQL injection attacks. If the help feature was limited to authorized users, the attack likelihood is reduced. If the help feature\u2019s search function was gated through centralized data validation routines, the ability to perform SQL injection is dramatically reduced. However, if the help feature was re-written to eliminate the search function (through a better user interface, for example), this almost eliminates the attack surface area, even if the help feature was available to the Internet at large.</li> </ul> </li> <li>Establish secure defaults:<ul> <li>There are many ways to deliver an \u201cout of the box\u201d experience for users. However, by default, the experience should be secure, and it should be up to the user to reduce their security\u2014if they are allowed.</li> <li>For example, by default, password ageing and complexity should be enabled. Users might be allowed to turn these two features off to simplify their use of the application and increase their risk.</li> <li>Default Passwords of routers, IoT devices should be changed</li> </ul> </li> <li>Principle of Least privilege<ul> <li>The principle of least privilege recommends that accounts have the least amount of privilege required to perform their business processes. This encompasses user rights, resource permissions such as CPU limits, memory, network, and file system permissions.</li> <li>For example, if a middleware server only requires access to the network, read access to a database table, and the ability to write to a log, this describes all the permissions that should be granted. Under no circumstances should the middleware be granted administrative privileges.</li> </ul> </li> <li>Principle of Defense in depth<ul> <li>The principle of defence in depth suggests that where one control would be reasonable, more controls that approach risks in different fashions are better. Controls, when used in depth, can make severe vulnerabilities extraordinarily difficult to exploit and thus unlikely to occur.</li> <li>With secure coding, this may take the form of tier-based validation, centralized auditing controls, and requiring users to be logged on all pages.</li> <li>For example, a flawed administrative interface is unlikely to be vulnerable to an anonymous attack if it correctly gates access to production management networks, checks for administrative user authorization, and logs all access.</li> </ul> </li> <li> <p>Fail securely</p> <ul> <li>Applications regularly fail to process transactions for many reasons. How they fail can determine if an application is secure or not.   <pre><code>\n  is_admin = true;\n  try {\n    code_which_may_fail();\n    is_admin = is_user_assigned_role(\"Adminstrator\");\n  }\n  catch (Exception err) {\n    log.error(err.toString());\n  }\n  </code><pre>\n<li>If either <code>codeWhichMayFail()</code> or <code>isUserInRole</code> fails or throws an exception, the user is an admin by default. This is obviously a security risk.</li>\n\n\n<li>\n<p>Don\u2019t trust services</p>\n<ul>\n<li>Many organizations utilize the processing capabilities of third-party partners, who more than likely have different security policies and posture than you. It is unlikely that you can influence or control any external third party, whether they are home users or major suppliers or partners.</li>\n<li>Therefore, the implicit trust of externally run systems is not warranted. All external systems should be treated similarly.</li>\n<li>For example, a loyalty program provider provides data that is used by Internet Banking, providing the number of reward points and a small list of potential redemption items. However, the data should be checked to ensure that it is safe to display to end-users and that the reward points are a positive number, and not improbably large.</li>\n</ul>\n</li>\n<li>Separation of duties<ul>\n<li>The key to fraud control is the separation of duties. For example, someone who requests a computer cannot also sign for it, nor should they directly receive the computer. This prevents the user from requesting many computers and claiming they never arrived.</li>\n<li>Certain roles have different levels of trust than normal users. In particular, administrators are different from normal users. In general, administrators should not be users of the application.</li>\n<li>For example, an administrator should be able to turn the system on or off, set password policy but shouldn't be able to log on to the storefront as a super privileged user, such as being able to \"buy\" goods on behalf of other users.</li>\n</ul>\n</li>\n<li>Avoid security by obscurity<ul>\n<li>Security through obscurity is a weak security control, and nearly always fails when it is the only control. This is not to say that keeping secrets is a bad idea, it simply means that the security of systems should not be reliant upon keeping details hidden.</li>\n<li>For example, the security of an application should not rely upon knowledge of the source code being kept secret. The security should rely upon many other factors, including reasonable password policies, defence in depth, business transaction limits, solid network architecture, and fraud, and audit controls.</li>\n<li>A practical example is Linux. Linux\u2019s source code is widely available, and yet when properly secured, Linux is a secure and robust operating system.</li>\n</ul>\n</li>\n<li>Keep security simple<ul>\n<li>Attack surface area and simplicity go hand in hand. Certain software engineering practices prefer overly complex approaches to what would otherwise be a relatively straightforward and simple design.</li>\n<li>Developers should avoid the use of double negatives and complex architectures when a simpler approach would be faster and simpler.</li>\n<li>For example, although it might be fashionable to have a slew of singleton entity beans running on a separate middleware server, it is more secure and faster to simply use global variables with an appropriate mutex mechanism to protect against race conditions.</li>\n</ul>\n</li>\n<li>Fix security issues correctly<ul>\n<li>Once a security issue has been identified, it is important to develop a test for it and to understand the root cause of the issue. When design patterns are used, the security issue is likely widespread amongst all codebases, so developing the right fix without introducing regressions is essential.</li>\n<li>For example, a user has found that they can see another user\u2019s balance by adjusting their cookie. The fix seems to be relatively straightforward, but as the cookie handling code is shared among all applications, a change to just one application will trickle through to all other applications. The fix must, therefore, be tested on all affected applications.</li>\n</ul>\n</li>\n<li>Reliability &amp; Security<ul>\n<li>Reliability and security are both crucial components of a truly trustworthy system, but building systems that are both reliable and secure is difficult. While the requirements for reliability and security share many common properties, they also require different design considerations. It is easy to miss the subtle interplay between reliability and security that can cause unexpected outcomes</li>\n<li>Ex: A password management application failure was triggered by a reliability problem i.e poor load-balancing and load-shedding strategies and its recovery were later complicated by multiple measures (HSM mechanism which needs to be plugged into server racks, which works as an authentication &amp; the HSM token supposedly locked inside a case.. &amp; the problem can be further elongated) designed to increase the security of the system.</li>\n</ul>\n</li>"},{"location":"level101/security/fundamentals/#authentication-vs-authorization","title":"Authentication vs Authorization","text":"<ul>\n<li>Authentication is the act of validating that users are who they claim to be. Passwords are the most common authentication factor\u2014if a user enters the correct password, the system assumes the identity is valid and grants access.</li>\n<li>Other technologies such as One-Time Pins, authentication apps, and even biometrics can also be used to authenticate identity. In some instances, systems require the successful verification of more than one factor before granting access. This multi-factor authentication (MFA) requirement is often deployed to increase security beyond what passwords alone can provide.</li>\n<li>Authorization in system security is the process of giving the user permission to access a specific resource or function. This term is often used interchangeably with access control or client privilege. Giving someone permission to download a particular file on a server or providing individual users with administrative access to an application are good examples. In secure environments, authorization must always follow authentication, users should first prove that their identities are genuine before an organization\u2019s administrators grant them access to the requested resources.</li>\n</ul>"},{"location":"level101/security/fundamentals/#common-authentication-flow-local-authentication","title":"Common authentication flow (local authentication)","text":"<ul>\n<li>The user registers using an identifier like username/email/mobile</li>\n<li>The application stores user credentials in the database</li>\n<li>The application sends a verification email/message to validate the registration</li>\n<li>Post successful registration, the user enters credentials for logging in</li>\n<li>On successful authentication, the user is allowed access to specific resources</li>\n</ul>"},{"location":"level101/security/fundamentals/#openidoauth","title":"OpenID/OAuth","text":"<p>OpenID is an authentication protocol that allows us to authenticate users without using a local auth system. In such a scenario, a user has to be registered with an OpenID Provider and the same provider should be integrated with the authentication flow of your application. To verify the details, we have to forward the authentication requests to the provider. On successful authentication, we receive a success message and/or profile details with which we can execute the necessary flow.</p>\n<p>OAuth is an authorization mechanism that allows your application user access to a provider (Gmail/Facebook/Instagram/etc). On successful response, we (your application) receive a token with which the application can access certain APIs on behalf of a user. OAuth is convenient in case your business use case requires some certain user-facing APIs like access to Google Drive or sending tweets on your behalf. Most OAuth 2.0 providers can be used for pseudo authentication. Having said that, it can get pretty complicated if you are using multiple OAuth providers to authenticate users on top of the local authentication system.</p>"},{"location":"level101/security/fundamentals/#cryptography","title":"Cryptography","text":"<ul>\n<li>\n<p>It is the science and study of hiding any text in such a way that only the intended recipients or authorized persons can read it and that any text can even use things such as invisible ink or the mechanical cryptography machines of the past.</p>\n</li>\n<li>\n<p>Cryptography is necessary for securing critical or proprietary information and is used to encode private data messages by converting some plain text into ciphertext. At its core, there are two ways of doing this, more advanced methods are all built upon.</p>\n</li>\n</ul>"},{"location":"level101/security/fundamentals/#ciphers","title":"Ciphers","text":"<ul>\n<li>Ciphers are the cornerstone of cryptography. A cipher is a set of algorithms that performs encryption or decryption on a message. An encryption algorithm (E) takes a secret key (k) and a message (m) and produces a ciphertext (c). Similarly, a Decryption algorithm (D) takes a secret key (K) and the previous resulting Ciphertext (C). They are represented as follows:</li>\n</ul>\n<pre><code>\nE(k,m) = c\nD(k,c) = m\n\n</code></pre>\n<ul>\n<li>This also means that for it to be a cipher, it must satisfy the consistency equation as follows, making it possible to decrypt.</li>\n</ul>\n<pre><code>\nD(k,E(k,m)) = m\n</code></pre>\n<p>Stream Ciphers:</p>\n<ul>\n<li>The message is broken into characters or bits and enciphered with a key or keystream (should be random and generated independently of the message stream) that is as long as the plaintext bitstream.</li>\n<li>If the keystream is random, this scheme would be unbreakable unless the keystream was acquired, making it unconditionally secure. The keystream must be provided to both parties in a secure way to prevent its release.</li>\n</ul>\n<p>Block Ciphers:</p>\n<ul>\n<li>Block ciphers\u2014process messages in blocks, each of which is then encrypted or decrypted.</li>\n<li>\n<p>A block cipher is a symmetric cipher in which blocks of plaintext are treated as a whole and used to produce ciphertext blocks. The block cipher takes blocks that are b bits long and encrypts them to blocks that are also b bits long. Block sizes are typically 64 or 128 bits long. </p>\n<p>\n</p>\n</li>\n</ul>\n<p>Encryption</p>\n<ul>\n<li>Secret Key (Symmetric Key): the same key is used for encryption and decryption</li>\n<li>Public Key (Asymmetric Key): in an asymmetric, the encryption and decryption keys are different but related. The encryption key is known as the public key and the decryption key is known as the private key. The public and private keys are known as a key pair.</li>\n</ul>\n<p>Symmetric Key Encryption</p>\n<p>DES</p>\n<ul>\n<li>\n<p>The Data Encryption Standard (DES) has been the worldwide encryption standard for a long time. IBM developed DES in 1975, and it has held up remarkably well against years of cryptanalysis. DES is a symmetric encryption algorithm with a fixed key length of 56 bits. The algorithm is still good, but because of the short key length, it is susceptible to brute-force attacks that have sufficient resources.</p>\n</li>\n<li>\n<p>DES usually operates in block mode, whereby it encrypts data in 64-bit blocks. The same algorithm and key are used for both encryption and decryption.</p>\n</li>\n<li>\n<p>Because DES is based on simple mathematical functions, it can be easily implemented and accelerated in hardware.</p>\n</li>\n</ul>\n<p>Triple DES</p>\n<ul>\n<li>\n<p>With advances in computer processing power, the original 56-bit DES key became too short to withstand an attacker with even a limited budget. One way of increasing the effective key length of DES without changing the well-analyzed algorithm itself is to use the same algorithm with different keys several times in a row.</p>\n</li>\n<li>\n<p>The technique of applying DES three times in a row to a plain text block is called Triple DES (3DES). The 3DES technique is shown in Figure. Brute-force attacks on 3DES are considered unfeasible today. Because the basic algorithm has been tested in the field for more than 25 years, it is considered to be more trustworthy than its predecessor.\n</p>\n</li>\n</ul>\n<p>AES</p>\n<ul>\n<li>\n<p>On October 2, 2000, The U.S. National Institute of Standards and Technology (NIST) announced the selection of the Rijndael cipher as the AES algorithm. This cipher, developed by Joan Daemen and Vincent Rijmen, has a variable block length and key length. The algorithm currently specifies how to use keys with a length of 128, 192, or 256 bits to encrypt blocks with a length of 128, 192, or 256 bits (all nine combinations of key length and block length are possible). Both block and key lengths can be extended easily to multiples of 32 bits.</p>\n</li>\n<li>\n<p>AES was chosen to replace DES and 3DES because they are either too weak (DES, in terms of key length) or too slow (3DES) to run on modern, efficient hardware. AES is more efficient and much faster, usually by a factor of 5 compared to DES on the same hardware. AES is also more suitable for high throughput, especially if pure software encryption is used. However, AES is a relatively young algorithm, and as the golden rule of cryptography states, \u201cA more mature algorithm is always more trusted.\u201d</p>\n</li>\n</ul>\n<p>Asymmetric Key Algorithm</p>\n<p></p>\n<ul>\n<li>\n<p>In a symmetric key system, Alice first puts the secret message in a box and then padlocks the box using a lock to which she has a key. She then sends the box to Bob through regular mail. When Bob receives the box, he uses an identical copy of Alice's key (which he has obtained previously) to open the box and read the message.</p>\n</li>\n<li>\n<p>In an asymmetric key system, instead of opening the box when he receives it, Bob simply adds his own personal lock to the box and returns the box through public mail to Alice. Alice uses her key to remove her lock and returns the box to Bob, with Bob's lock still in place. Finally, Bob uses his key to remove his lock and reads the message from Alice.</p>\n</li>\n<li>The critical advantage in an asymmetric system is that Alice never needs to send a copy of her key to Bob. This reduces the possibility that a third party (for example, an unscrupulous postmaster) can copy the key while it is in transit to Bob, allowing that third party to spy on all future messages sent by Alice. In addition, if Bob is careless and allows someone else to copy his key, Alice's messages to Bob are compromised, but Alice's messages to other people remain secret</li>\n</ul>\n<p>NOTE: In terms of TLS key exchange, this is the common approach.</p>\n<p>Diffie-Hellman</p>\n<ul>\n<li>The protocol has two system parameters, p and g. They are both public and may be used by everybody. Parameter p is a prime number, and parameter g (usually called a generator) is an integer that is smaller than p, but with the following property: For every number, n between 1 and p \u2013 1 inclusive, there is a power k of g such that <code>n = gk mod p</code>.</li>\n<li>Diffie Hellman algorithm is an asymmetric algorithm used to establish a shared secret for a symmetric key algorithm. Nowadays most of the people use hybrid cryptosystem i.e, a combination of symmetric and asymmetric encryption. Asymmetric Encryption is used as a technique in key exchange mechanism to share a secret key and after the key is shared between sender and receiver, the communication will take place using symmetric encryption. The shared secret key will be used to encrypt the communication.</li>\n<li>Refer: https://medium.com/@akhigbemmanuel/what-is-the-diffie-hellman-key-exchange-algorithm-84d60025a30d</li>\n</ul>\n<p>RSA</p>\n<ul>\n<li>The RSA algorithm is very flexible and has a variable key length where, if necessary, speed can be traded for the level of security of the algorithm. The RSA keys are usually 512 to 2048 bits long. RSA has withstood years of extensive cryptanalysis. Although those years neither proved nor disproved RSA's security, they attest to a confidence level in the algorithm. RSA security is based on the difficulty of factoring very large numbers. If an easy method of factoring these large numbers were discovered, the effectiveness of RSA would be destroyed.</li>\n<li>\n<p>Refer: https://medium.com/curiositypapers/a-complete-explanation-of-rsa-asymmetric-encryption-742c5971e0f</p>\n<p>NOTE: RSA Keys can be used for key exchange just like Diffie Hellman</p>\n</li>\n</ul>\n<p>Hashing Algorithms</p>\n<ul>\n<li>\n<p>Hashing is one of the mechanisms used for data integrity assurance. Hashing is based on a one-way mathematical function, which is relatively easy to compute but significantly harder to reverse.</p>\n</li>\n<li>\n<p>A hash function, which is a one-way function to input data to produce a fixed-length digest (fingerprint) of output data. The digest is cryptographically strong; that is, it is impossible to recover input data from its digest. If the input data changes just a little, the digest (fingerprint) changes substantially in what is called an avalanche effect.</p>\n</li>\n<li>\n<p>More:</p>\n<ul>\n<li>https://medium.com/@rauljordan/the-state-of-hashing-algorithms-the-why-the-how-and-the-future-b21d5c0440de</li>\n<li>https://medium.com/@StevieCEllis/the-beautiful-hash-algorithm-f18d9d2b84fb</li>\n</ul>\n</li>\n</ul>\n<p>MD5</p>\n<ul>\n<li>MD5 is a one-way function with which it is easy to compute the hash from the given input data, but it is unfeasible to compute input data given only a hash.</li>\n</ul>\n<p>SHA-1</p>\n<ul>\n<li>MD5 is considered less secure than SHA-1 because MD5 has some weaknesses.</li>\n<li>HA-1 also uses a stronger, 160-bit digest, which makes MD5 the second choice as hash methods are concerned.</li>\n<li>The algorithm takes a message of less than 264 bits in length and produces a 160-bit message digest. This algorithm is slightly slower than MD5.</li>\n</ul>\n<p>NOTE: SHA-1 is also recently demonstrated to be broken, Minimum current recommendation is SHA-256</p>\n<p>Digital Certificates</p>\n<ul>\n<li>\n<p>Digital signatures, provide a means to digitally authenticate devices and individual users. In public-key cryptography, such as the RSA encryption system, each user has a key-pair containing both a public key and a private key. The keys act as complements, and anything encrypted with one of the keys can be decrypted with the other. In simple terms, a signature is formed when data is encrypted with a user's private key. The receiver verifies the signature by decrypting the message with the sender's public key.</p>\n</li>\n<li>\n<p>Key management is often considered the most difficult task in designing and implementing cryptographic systems. Businesses can simplify some of the deployment and management issues that are encountered with secured data communications by employing a Public Key Infrastructure (PKI). Because corporations often move security-sensitive communications across the Internet, an effective mechanism must be implemented to protect sensitive information from the threats presented on the Internet.</p>\n</li>\n<li>\n<p>PKI provides a hierarchical framework for managing digital security attributes. Each PKI participant holds a digital certificate that has been issued by a CA (either public or private). The certificate contains several attributes that are used when parties negotiate a secure connection. These attributes must include the certificate validity period, end-host identity information, encryption keys that will be used for secure communications, and the signature of the issuing CA. Optional attributes may be included, depending on the requirements and capability of the PKI.</p>\n</li>\n<li>A CA can be a trusted third party, such as VeriSign or Entrust, or a private (in-house) CA that you establish within your organization.</li>\n<li>The fact that the message could be decrypted using the sender's public key means that the holder of the private key created the message. This process relies on the receiver having a copy of the sender's public key and knowing with a high degree of certainty that it really does belong to the sender and not to someone pretending to be the sender.</li>\n<li>To validate the CA's signature, the receiver must know the CA's public key. Normally, this is handled out-of-band or through an operation performed during the installation of the certificate. For instance, most web browsers are configured with the root certificates of several CAs by default.</li>\n</ul>\n<p>CA Enrollment process</p>\n<ol>\n<li>The end host generates a private-public key pair.</li>\n<li>The end host generates a certificate request, which it forwards to the CA.</li>\n<li>Manual human intervention is required to approve the enrollment request, which is received by the CA.</li>\n<li>After the CA operator approves the request, the CA signs the certificate request with its private key and returns the completed certificate to the end host.</li>\n<li>The end host writes the certificate into a nonvolatile storage area (PC hard disk or NVRAM on Cisco routers).</li>\n</ol>\n<p>Refer: https://www.ssh.com/manuals/server-zos-product/55/ch06s03s01.html</p>"},{"location":"level101/security/fundamentals/#login-security","title":"Login Security","text":""},{"location":"level101/security/fundamentals/#ssh","title":"SSH","text":"<ul>\n<li>SSH, the Secure Shell, is a popular, powerful, software-based approach to network security. </li>\n<li>Whenever data is sent by a computer to the network, SSH automatically encrypts (scrambles) it. Then, when the data reaches its intended recipient, SSH automatically decrypts (unscrambles) it. </li>\n<li>The result is transparent encryption: users can work normally, unaware that their communications are safely encrypted on the network. In addition, SSH can use modern, secure encryption algorithms based on how it's being configured and is effective enough to be found within mission-critical applications at major corporations.</li>\n<li>SSH has a client/server architecture</li>\n<li>An SSH server program, typically installed and run by a system administrator, accepts or rejects incoming connections to its host computer. Users then run SSH client programs, typically on other computers, to make requests of the SSH server, such as \u201cPlease log me in,\u201d \u201cPlease send me a file,\u201d or \u201cPlease execute this command.\u201d All communications between clients and servers are securely encrypted and protected from modification.</li>\n</ul>\n\n<p>What SSH is not:</p>\n<ul>\n<li>Although SSH stands for Secure Shell, it is not a true shell in the sense of the Unix Bourne shell and C shell. It is not a command interpreter, nor does it provide wildcard expansion, command history, and so forth. Rather, SSH creates a channel for running a shell on a remote computer, with end-to-end encryption between the two systems.</li>\n</ul>\n<p>The major features and guarantees of the SSH protocol are:</p>\n<ul>\n<li>Privacy of your data, via strong encryption</li>\n<li>Integrity of communications, guaranteeing they haven\u2019t been altered</li>\n<li>Authentication, i.e., proof of identity of senders and receivers</li>\n<li>Authorization, i.e., access control to accounts</li>\n<li>Forwarding or tunnelling to encrypt other TCP/IP-based sessions</li>\n</ul>"},{"location":"level101/security/fundamentals/#kerberos","title":"Kerberos","text":"<ul>\n<li>According to Greek mythology Kerberos (Cerberus) was the gigantic, three-headed dog that guards the gates of the underworld to prevent the dead from leaving.</li>\n<li>\n<p>So when it comes to Computer Science, Kerberos is a network authentication protocol and is currently the default authentication technology used by Microsoft Active Directory to authenticate users to services within a local area network.</p>\n</li>\n<li>\n<p>Kerberos uses symmetric-key cryptography and requires a trusted third-party authentication service to verify user identities. So they used the name of Kerberos for their computer network authentication protocol as the three heads of the Kerberos represent:</p>\n</li>\n<li>a client: A user/ a service</li>\n<li>\n<p>a server: Kerberos protected hosts reside</p>\n<p></p>\n</li>\n<li>\n<p>a Key Distribution Center (KDC), which acts as the trusted third-party authentication service.</p>\n</li>\n</ul>\n<p>The KDC includes the following two servers:</p>\n<ul>\n<li>Authentication Server (AS) that performs the initial authentication and issues ticket-granting tickets (TGT) for users.</li>\n<li>\n<p>Ticket-Granting Server (TGS) that issues service tickets that are based on the initial ticket-granting tickets (TGT).</p>\n<p></p>\n</li>\n</ul>"},{"location":"level101/security/fundamentals/#certificate-chain","title":"Certificate Chain","text":"<p>The first part of the output of the OpenSSL command shows three certificates numbered 0, 1, and 2 (not 2 anymore). Each certificate has a subject, s, and an issuer, i. The first certificate, number 0, is called the end-entity certificate. The subject line tells us it\u2019s valid for any subdomain of <code>google.com</code> because its subject is set to <code>*.google.com</code>. </p>\n<pre><code>$ openssl s_client -connect www.google.com:443 -CApath /etc/ssl/certs\nCONNECTED(00000005)\ndepth=2 OU = GlobalSign Root CA - R2, O = GlobalSign, CN = GlobalSign\nverify return:1\ndepth=1 C = US, O = Google Trust Services, CN = GTS CA 1O1\nverify return:1\ndepth=0 C = US, ST = California, L = Mountain View, O = Google LLC, CN = www.google.com\nverify return:1`\n`---\nCertificate chain\n 0 s:/C=US/ST=California/L=Mountain View/O=Google LLC/CN=www.google.com\n   i:/C=US/O=Google Trust Services/CN=GTS CA 1O1\n 1 s:/C=US/O=Google Trust Services/CN=GTS CA 1O1\n   i:/OU=GlobalSign Root CA - R2/O=GlobalSign/CN=GlobalSign\n---\n</code></pre>\n<p>Server certificate</p>\n<ul>\n<li>The issuer line indicates it\u2019s issued by Google Internet Authority G2, which also happens to be the subject of the second certificate, number 1</li>\n<li>What the OpenSSL command line doesn\u2019t show here is the trust store that contains the list of CA certificates trusted by the system OpenSSL runs on.</li>\n<li>\n<p>The public certificate of GlobalSign Authority must be present in the system\u2019s trust store to close the verification chain. This is called a chain of trust, and the figure below summarizes its behaviour at a high level.</p>\n<p></p>\n</li>\n<li>\n<p>High-level view of the concept of chain of trust applied to verifying the authenticity of a website. The Root CA in the Firefox trust store provides the initial trust to verify the entire chain and trust the end-entity certificate.</p>\n</li>\n</ul>"},{"location":"level101/security/fundamentals/#tls-handshake","title":"TLS Handshake","text":"<ol>\n<li>The client sends a HELLO message to the server with a list of protocols and algorithms it supports.</li>\n<li>The server says HELLO back and sends its chain of certificates. Based on the capabilities of the client, the server picks a cipher suite.</li>\n<li>If the cipher suite supports ephemeral key exchange, like ECDHE does (ECDHE is an algorithm known as the Elliptic Curve Diffie-Hellman Exchange), the server and the client negotiate a pre-master key with the Diffie-Hellman algorithm. The pre-master key is never sent over the wire.</li>\n<li>The client and server create a session key that will be used to encrypt the data transiting through the connection.</li>\n</ol>\n<p>At the end of the handshake, both parties possess a secret session key used to encrypt data for the rest of the connection. This is what OpenSSL refers to as Master-Key.</p>\n<p>NOTE</p>\n<ul>\n<li>There are 3 versions of TLS, TLS 1.0, 1.1 &amp; 1.2</li>\n<li>TLS 1.0 was released in 1999, making it a nearly two-decade-old protocol. It has been known to be vulnerable to attacks\u2014such as BEAST and POODLE\u2014for years, in addition to supporting weak cryptography, which doesn\u2019t keep modern-day connections sufficiently secure.</li>\n<li>TLS 1.1 is the forgotten \u201cmiddle child.\u201d It also has bad cryptography like its younger sibling. In most software, it was leapfrogged by TLS 1.2 and it\u2019s rare to see TLS 1.1 used.</li>\n</ul>"},{"location":"level101/security/fundamentals/#perfect-forward-secrecy","title":"\u201cPerfect\u201d Forward Secrecy","text":"<ul>\n<li>The term \u201cephemeral\u201d in the key exchange provides an important security feature mis-named perfect forward secrecy (PFS) or just \u201cForward Secrecy\u201d.</li>\n<li>In a non-ephemeral key exchange, the client sends the pre-master key to the server by encrypting it with the server\u2019s public key. The server then decrypts the pre-master key with its private key. If at a later point in time, the private key of the server is compromised, an attacker can go back to this handshake, decrypt the pre-master key, obtain the session key, and decrypt the entire traffic. Non-ephemeral key exchanges are vulnerable to attacks that may happen in the future on recorded traffic. And because people seldom change their password, decrypting data from the past may still be valuable for an attacker.</li>\n<li>An ephemeral key exchange like DHE, or its variant on elliptic curve, ECDHE, solves this problem by not transmitting the pre-master key over the wire. Instead, the pre-master key is computed by both the client and the server in isolation, using nonsensitive information exchanged publicly. Because the pre-master key can\u2019t be decrypted later by an attacker, the session key is safe from future attacks: hence, the term perfect forward secrecy.</li>\n<li>Keys are changed every X blocks along the stream. That prevents an attacker from simply sniffing the stream and applying brute force to crack the whole thing. \"Forward secrecy\" means that just because I can decrypt block M, does not mean that I can decrypt block Q</li>\n<li>Downside:<ul>\n<li>The downside to PFS is that all those extra computational steps induce latency on the handshake and slow the user down. To avoid repeating this expensive work at every connection, both sides cache the session key for future use via a technique called session resumption. This is what the session-ID and TLS ticket are for: they allow a client and server that share a session ID to skip over the negotiation of a session key, because they already agreed on one previously, and go directly to exchanging data securely.</li>\n</ul>\n</li>\n</ul>"},{"location":"level101/security/intro/","title":"Security","text":""},{"location":"level101/security/intro/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>Linux Basics</p> </li> <li> <p>Linux Networking</p> </li> </ol>"},{"location":"level101/security/intro/#what-to-expect-from-this-course","title":"What to expect from this course","text":"<p>The course covers fundamentals of information security along with touching on subjects of system security, network &amp; web security. This course aims to get you familiar with the basics of information security in day-to-day operations and then as an SRE develop the mindset of ensuring that security takes a front-seat while developing solutions. The course also serves as an introduction to common risks and best practices along with practical ways to find out vulnerable systems and loopholes which might become compromised if not secured.</p>"},{"location":"level101/security/intro/#what-is-not-covered-under-this-course","title":"What is not covered under this course","text":"<p>The courseware is not an ethical hacking workshop or a very deep dive into the fundamentals of the problems. The course does not deal with hacking or breaking into systems but rather an approach on how to ensure you don\u2019t get into those situations and also to make you aware of different ways a system can be compromised.</p>"},{"location":"level101/security/intro/#course-contents","title":"Course Contents","text":"<ol> <li>Fundamentals</li> <li>Network Security</li> <li>Threats, Attacks &amp; Defence</li> <li>Writing Secure Code &amp; More</li> <li>Conclusion</li> </ol>"},{"location":"level101/security/network_security/","title":"Part II: Network Security","text":""},{"location":"level101/security/network_security/#introduction","title":"Introduction","text":"<ul> <li>TCP/IP is the dominant networking technology today. It is a five-layer architecture. These layers are, from top to bottom, the application layer, the transport layer (TCP), the network layer (IP), the data-link layer, and the physical layer. In addition to TCP/IP, there also are other networking technologies. For convenience, we use the OSI network model to represent non-TCP/IP network technologies. Different networks are interconnected using gateways. A gateway can be placed at any layer.</li> <li> <p>The OSI model is a seven-layer architecture. The OSI architecture is similar to the TCP/IP architecture, except that the OSI model specifies two additional layers between the application layer and the transport layer in the TCP/IP architecture. These two layers are the presentation layer and the session layer. Figure 5.1 shows the relationship between the TCP/IP layers and the OSI layers. The application layer in TCP/IP corresponds to the application layer and the presentation layer in OSI. The transport layer in TCP/IP corresponds to the session layer and the transport layer in OSI. The remaining three layers in the TCP/IP architecture are one-to-one correspondent to the remaining three layers in the OSI model.</p> <p> Correspondence between layers of the TCP/IP architecture and the OSI model. Also shown are placements of cryptographic algorithms in network layers, where the dotted arrows indicate actual communications of cryptographic algorithms</p> </li> </ul> <p>The functionalities of OSI layers are briefly described as follows:</p> <ol> <li>The application layer serves as an interface between applications and network programs. It supports application programs and end-user processing. Common application-layer programs include remote logins, file transfer, email, and Web browsing.</li> <li>The presentation layer is responsible for dealing with data that is formed differently. This protocol layer allows application-layer programs residing on different sides of a communication channel with different platforms to understand each other's data formats regardless of how they are presented.</li> <li>The session layer is responsible for creating, managing, and closing a communication connection.</li> <li>The transport layer is responsible for providing reliable connections, such as packet sequencing, traffic control, and congestion control.</li> <li>The network layer is responsible for routing device-independent data packets from the current hop to the next hop.</li> <li>The data-link layer is responsible for encapsulating device-independent data packets into device-dependent data frames. It has two sublayers: logical link control (LLC) and media access control (MAC).</li> <li> <p>The physical layer is responsible for transmitting device-dependent frames through some physical media.</p> </li> <li> <p>Starting from the application layer, data generated from an application program is passed down layer-by-layer to the physical layer. Data from the previous layer is enclosed in a new envelope at the current layer, where the data from the previous layer is also just an envelope containing the data from the layer before it. This is similar to enclosing a smaller envelope in a larger one. The envelope added at each layer contains sufficient information for handling the packet. Application-layer data are divided into blocks small enough to be encapsulated in an envelope at the next layer.</p> </li> <li> <p>Application data blocks are \u201cdressed up\u201d in the TCP/IP architecture according to the following basic steps. At the sending side, an application data block is encapsulated in a TCP packet when it is passed down to the TCP layer. In other words, a TCP packet consists of a header and a payload, where the header corresponds to the TCP envelope and the payload is the application data block. Likewise, the TCP packet will be encapsulated in an IP packet when it is passed down to the IP layer. An IP packet consists of a header and a payload, which is the TCP packet passed down from the TCP layer. The IP packet will be encapsulated in a device-dependent frame (e.g., an Ethernet frame) when it is passed down to the data-link layer. A frame has a header, and it may also have a trailer. For example, in addition to having a header, an Ethernet frame also has a 32-bit cyclic redundancy check (CRC) trailer. When it is passed down to the physical layer, a frame will be transformed into a sequence of media signals for transmission</p> <p>     Flow Diagram of a Packet Generation</p> </li> <li> <p>At the destination side, the medium signals are converted by the physical layer into a frame, which is passed up to the data-link layer. The data-link layer passes the frame payload (i.e., the IP packet encapsulated in the frame) up to the IP layer. The IP layer passes the IP payload, namely, the TCP packet encapsulated in the IP packet, up to the TCP layer. The TCP layer passes the TCP payload, namely, the application data block, up to the application layer. When a packet arrives at a router, it only goes up to the IP layer, where certain fields in the IP header are modified (e.g., the value of TTL is decreased by 1). This modified packet is then passed back down layer-by-layer to the physical layer for further transmission.</p> </li> </ol>"},{"location":"level101/security/network_security/#public-key-infrastructure","title":"Public Key Infrastructure","text":"<ul> <li>To deploy cryptographic algorithms in network applications, we need a way to distribute secret keys using open networks. Public-key cryptography is the best way to distribute these secret keys. To use public-key cryptography, we need to build a public-key infrastructure (PKI) to support and manage public-key certificates and certificate authority (CA) networks. In particular, PKIs are set up to perform the following functions:</li> <li>Determine the legitimacy of users before issuing public-key certificates to them.</li> <li>Issue public-key certificates upon user requests.</li> <li>Extend public-key certificates valid time upon user requests.</li> <li>Revoke public-key certificates upon users' requests or when the corresponding private keys are compromised.</li> <li>Store and manage public-key certificates.</li> <li>Prevent digital signature signers from denying their signatures.</li> <li>Support CA networks to allow different CAs to authenticate public-key certificates issued by other CAs.</li> <li>X.509: https://certificatedecoder.dev/?gclid=EAIaIQobChMI0M731O6G6gIVVSQrCh04bQaAEAAYASAAEgKRkPD_BwE</li> </ul>"},{"location":"level101/security/network_security/#ipsec-a-security-protocol-at-the-network-layer","title":"IPsec: A Security Protocol at the Network Layer","text":"<ul> <li>IPsec is a major security protocol at the network layer</li> <li>IPsec provides a potent platform for constructing virtual private networks (VPN). VPNs are private networks overlayed on public networks.</li> <li>The purpose of deploying cryptographic algorithms at the network layer is to encrypt or authenticate IP packets (either just the payloads or the whole packets).</li> <li>IPsec also specifies how to exchange keys. Thus, IPsec consists of authentication protocols, encryption protocols, and key exchange protocols. They are referred to, respectively, as authentication header (AH), encapsulating security payload (ESP), and Internet key exchange (IKE).</li> </ul>"},{"location":"level101/security/network_security/#pgp-smime-email-security","title":"PGP &amp; S/MIME : Email Security","text":"<ul> <li>There are several security protocols at the application layer. The most used of these protocols are email security protocols namely PGP and S/MIME.</li> <li>SMTP (\u201cSimple Mail Transfer Protocol\u201d) is used for sending and delivering from a client to a server via port 25: it\u2019s the outgoing server. On the contrary, POP (\u201cPost Office Protocol\u201d) allows the users to pick up the message and download it into their inbox: it\u2019s the incoming server. The latest version of the Post Office Protocol is named POP3, and it\u2019s been used since 1996; it uses port 110.</li> </ul> <p>PGP</p> <ul> <li>PGP implements all major cryptographic algorithms, the ZIP compression algorithm, and the Base64 encoding algorithm.</li> <li>It can be used to authenticate a message, encrypt a message, or both. PGP follows the following general process: authentication, ZIP compression, encryption, and Base64 encoding.</li> <li>The Base64 encoding procedure makes the message ready for SMTP transmission.</li> </ul> <p>GPG (GnuPG)</p> <ul> <li>GnuPG is another free encryption standard that companies may use that is based on OpenPGP.</li> <li>GnuPG serves as a replacement for Symantec\u2019s PGP.</li> <li>The main difference is the supported algorithms. However, GnuPG plays nice with PGP by design. Because GnuPG is open, some businesses would prefer the technical support and the user interface that comes with Symantec\u2019s PGP.</li> <li>It is important to note that there are some nuances between the compatibility of GnuPG and PGP, such as the compatibility between certain algorithms, but in most applications such as email, there are workarounds. One such algorithm is the IDEA Module which isn\u2019t included in GnuPG out of the box due to patent issues.</li> </ul> <p>S/MIME</p> <ul> <li>SMTP can only handle 7-bit ASCII text messages (You can use UTF-8 extensions to alleviate these limitations.) While POP can handle other content types besides 7-bit ASCII, POP may, under a common default setting, download all the messages stored in the mail server to the user's local computer. After that, if POP removes these messages from the mail server. This makes it difficult for the users to read their messages from multiple computers.</li> <li>The Multipurpose Internet Mail Extension protocol (MIME) was designed to support sending and receiving email messages in various formats, including nontext files generated by word processors, graphics files, sound files, and video clips. Moreover, MIME allows a single message to include mixed types of data in any combination of these formats.</li> <li>The Internet Mail Access Protocol (IMAP), operated on TCP port 143 (only for non-encrypted), stores (Configurable on both server &amp; client just like PoP) incoming email messages in the mail server until the user deletes them deliberately. This allows the users to access their mailbox from multiple machines and download messages to a local machine without deleting it from the mailbox in the mail server.</li> </ul> <p>SSL/TLS</p> <ul> <li>SSL uses a PKI to decide if a server\u2019s public key is trustworthy by requiring servers to use a security certificate signed by a trusted CA.</li> <li>When Netscape Navigator 1.0 was released, it trusted a single CA operated by the RSA Data Security corporation.</li> <li>The server\u2019s public RSA keys were used to be stored in the security certificate, which can then be used by the browser to establish a secure communication channel. The security certificates we use today still rely on the same standard (named X.509) that Netscape Navigator 1.0 used back then.</li> <li>Netscape intended to train users (though this didn\u2019t work out later) to differentiate secure communications from insecure ones, so they put a lock icon next to the address bar. When the lock is open, the communication is insecure. A closed lock means communication has been secured with SSL, which required the server to provide a signed certificate. You\u2019re obviously familiar with this icon as it\u2019s been in every browser ever since. The engineers at Netscape truly created a standard for secure Internet communications.</li> <li> <p>A year after releasing SSL 2.0, Netscape fixed several security issues and released SSL 3.0, a protocol that, albeit being officially deprecated since June 2015, remains in use in certain parts of the world more than 20 years after its introduction. To standardize SSL, the Internet Engineering Task Force (IETF) created a slightly modified SSL 3.0 and, in 1999, unveiled it as Transport Layer Security (TLS) 1.0. The name change between SSL and TLS continues to confuse people today. Officially, TLS is the new SSL, but in practice, people use SSL and TLS interchangeably to talk about any version of the protocol.</p> </li> <li> <p>Must See:</p> <ul> <li>https://tls.ulfheim.net/</li> <li>https://davidwong.fr/tls13/</li> </ul> </li> </ul>"},{"location":"level101/security/network_security/#network-perimeter-security","title":"Network Perimeter Security","text":"<p>Let us see how we keep a check on the perimeter, i.e the edges, the first layer of protection.</p>"},{"location":"level101/security/network_security/#general-firewall-framework","title":"General Firewall Framework","text":"<ul> <li>Firewalls are needed because encryption algorithms cannot effectively stop malicious packets from getting into an edge network.</li> <li>This is because IP packets, regardless of whether they are encrypted, can always be forwarded into an edge network.</li> <li>Firewalls that were developed in the 1990s are important instruments to help restrict network access. A firewall may be a hardware device, a software package, or a combination of both.</li> <li>Packets flowing into the internal network from the outside should be evaluated before they are allowed to enter. One of the critical elements of a firewall is its ability to examine packets without imposing a negative impact on communication speed while providing security protections for the internal network.</li> <li>The packet inspection that is carried out by firewalls can be done using several different methods. Based on the particular method used by the firewall, it can be characterized as either a packet filter, circuit gateway, application gateway, or dynamic packet filter.</li> </ul>"},{"location":"level101/security/network_security/#packet-filters","title":"Packet Filters","text":"<ul> <li>It inspects ingress packets coming to an internal network from outside and inspects egress packets going outside from an internal network</li> <li>Packet-filtering only inspects IP headers and TCP headers, not the payloads generated at the application layer.</li> <li>A packet-filtering firewall uses a set of rules to determine whether a packet should be allowed or denied to pass through.</li> <li> <p>2 types:</p> <ul> <li> <p>Stateless</p> <ul> <li>It treats each packet as an independent object, and it does not keep track of any previously processed packets. In other words, stateless filtering inspects a packet when it arrives and makes a decision without leaving any record of the packet being inspected.</li> </ul> </li> <li> <p>Stateful</p> <ul> <li>Stateful filtering, also referred to as connection-state filtering, keeps track of connections between an internal host and an external host. A connection state (or state, for short) indicates whether it is a TCP connection or a UDP connection and whether the connection is established.</li> </ul> </li> </ul> </li> </ul>"},{"location":"level101/security/network_security/#circuit-gateways","title":"Circuit Gateways","text":"<ul> <li>Circuit gateways, also referred to as circuit-level gateways, are typically operated at the transportation layer.</li> <li>They evaluate the information of the IP addresses and the port numbers contained in TCP (or UDP) headers and use it to determine whether to allow or to disallow an internal host and an external host to establish a connection.</li> <li>It is common practice to combine packet filters and circuit gateways to form a dynamic packet filter (DPF).</li> </ul>"},{"location":"level101/security/network_security/#application-gateways-alg","title":"Application Gateways (ALG)","text":"<ul> <li>Aka PROXY Servers</li> <li>An Application Level Gateway (ALG) acts as a proxy for internal hosts, processing service requests from external clients.</li> <li>An ALG performs deep inspections on each IP packet (ingress or egress).</li> <li>In particular, an ALG inspects application program formats contained in the packet (e.g., MIME format or SQL format) and examines whether its payload is permitted.<ul> <li>Thus, an ALG may be able to detect a computer virus contained in the payload. Because an ALG inspects packet payloads, it may be able to detect malicious code and quarantine suspicious packets, in addition to blocking packets with suspicious IP addresses and TCP ports. On the other hand, an ALG also incurs substantial computation and space overheads.</li> </ul> </li> </ul>"},{"location":"level101/security/network_security/#trusted-systems-bastion-hosts","title":"Trusted Systems &amp; Bastion Hosts","text":"<ul> <li>A Trusted Operating System (TOS) is an operating system that meets a particular set of security requirements. Whether an operating system can be trusted or not depends on several elements. For example, for an operating system on a particular computer to be certified trusted, one needs to validate that, among other things, the following four requirements are satisfied:</li> <li>Its system design contains no defects;</li> <li>Its system software contains no loopholes;</li> <li>Its system is configured properly; and</li> <li> <p>Its system management is appropriate.</p> </li> <li> <p>Bastion Hosts</p> <ul> <li>Bastion hosts are computers with strong defence mechanisms. They often serve as host computers for implementing application gateways, circuit gateways, and other types of firewalls. A bastion host is operated on a trusted operating system that must not contain unnecessary functionalities or programs. This measure helps to reduce error probabilities and makes it easier to conduct security checks. Only those network application programs that are necessary, for example, SSH, DNS, SMTP, and authentication programs, are installed on a bastion host.</li> <li>Bastion hosts are also primarily used as controlled ingress points so that the security monitoring can focus more narrowly on actions happening at a single point closely.</li> </ul> </li> </ul>"},{"location":"level101/security/network_security/#common-techniques-scannings-packet-capturing","title":"Common Techniques &amp; Scannings, Packet Capturing","text":""},{"location":"level101/security/network_security/#scanning-ports-with-nmap","title":"Scanning Ports with Nmap","text":"<ul> <li>Nmap (\"Network Mapper\") is a free and open-source (license) utility for network discovery and security auditing.  Many systems and network administrators also find it useful for tasks such as network inventory, managing service upgrade schedules, and monitoring host or service uptime.</li> <li>The best thing about Nmap is it\u2019s free and open-source and is very flexible and versatile.</li> <li>Nmap is often used to determine alive hosts in a network, open ports on those hosts, services running on those open ports, and version identification of that service on that port.</li> <li>More at http://scanme.nmap.org/.</li> </ul> <pre><code>nmap [scan type] [options] [target specification]\n</code></pre> <p>Nmap uses 6 different port states:</p> <ul> <li>Open\u2014An open port is one that is actively accepting TCP, UDP or SCTP connections. Open ports are what interests us the most because they are the ones that are vulnerable to attacks. Open ports also show the available services on a network.</li> <li>Closed\u2014A port that receives and responds to Nmap probe packets but there is no application listening on that port. Useful for identifying that the host exists and for OS detection.</li> <li>Filtered\u2014Nmap can\u2019t determine whether the port is open because packet filtering prevents its probes from reaching the port. Filtering could come from firewalls or router rules. Often little information is given from filtered ports during scans as the filters can drop the probes without responding or respond with useless error messages, e.g. destination unreachable.</li> <li>Unfiltered\u2014Port is accessible but Nmap doesn\u2019t know if it is open or closed. Only used in ACK scan which is used to map firewall rulesets. Other scan types can be used to identify whether the port is open.</li> <li>Open/filtered\u2014Nmap is unable to determine between open and filtered. This happens when an open port gives no response. No response could mean that the probe was dropped by a packet filter or any response is blocked.</li> <li>Closed/filtered\u2014Nmap is unable to determine whether a port is closed or filtered. Only used in the IP ID idle scan.</li> </ul>"},{"location":"level101/security/network_security/#types-of-nmap-scan","title":"Types of Nmap Scan:","text":"<ol> <li>TCP Connect<ul> <li>TCP Connect scan completes the three-way handshake.</li> <li>If a port is open, the operating system completes the TCP three-way handshake and the port scanner immediately closes the connection to avoid DOS. This is \u201cnoisy\u201d because the services can log the sender IP address and might trigger Intrusion Detection Systems.</li> </ul> </li> <li> <p>UDP Scan</p> <ul> <li>This scan checks to see if any UDP ports are listening.</li> <li>Since UDP does not respond with a positive acknowledgement like TCP and only responds to an incoming UDP packet when the port is closed.</li> </ul> </li> <li> <p>SYN Scan</p> <ul> <li>SYN scan is another form of TCP scanning.</li> <li>This scan type is also known as \u201chalf-open scanning\u201d because it never actually opens a full TCP connection.</li> <li>The port scanner generates a SYN packet. If the target port is open, it will respond with an SYN-ACK packet. The scanner host responds with an RST packet, closing the connection before the handshake is completed.</li> <li>If the port is closed but unfiltered, the target will instantly respond with an RST packet.</li> <li>SYN scan has the advantage that the individual services never actually receive a connection.</li> </ul> </li> <li> <p>FIN Scan</p> <ul> <li>This is a stealthy scan, like the SYN scan, but sends a TCP FIN packet instead.</li> </ul> </li> <li> <p>ACK Scan</p> <ul> <li>ACK scanning determines whether the port is filtered or not.</li> </ul> </li> <li>NULL Scan<ul> <li>Another very stealthy scan that sets all the TCP header flags to off or NULL.</li> <li>This is not normally a valid packet and some hosts will not know what to do with this.</li> </ul> </li> <li>XMAS Scan<ul> <li>Similar to the NULL scan except for all the flags in the TCP header is set to on.</li> </ul> </li> <li>RPC Scan<ul> <li>This special type of scan looks for machine answering to RPC (Remote Procedure Call) services.</li> </ul> </li> <li>IDLE Scan<ul> <li>It is a super stealthy method whereby the scan packets are bounced off an external host.</li> <li>You don\u2019t need to have control over the other host but it does have to set up and meet certain requirements. You must input the IP address of our \u201czombie\u201d host and what port number to use. It is one of the more controversial options in Nmap since it only has a use for malicious attacks.</li> </ul> </li> </ol> <p>Scan Techniques</p> <p>A couple of scan techniques which can be used to gain more information about a system and its ports. You can read more at https://medium.com/infosec-adventures/nmap-cheatsheet-a423fcdda0ca.</p>"},{"location":"level101/security/network_security/#openvas","title":"OpenVAS","text":"<ul> <li>OpenVAS is a full-featured vulnerability scanner. </li> <li>OpenVAS is a framework of services and tools that provides a comprehensive and powerful vulnerability scanning and management package</li> <li>OpenVAS, which is an open-source program, began as a fork of the once-more-popular scanning program, Nessus.</li> <li>OpenVAS is made up of three main parts. These are:<ul> <li>a regularly updated feed of Network Vulnerability Tests (NVTs);</li> <li>a scanner, which runs the NVTs; and</li> <li>an SQLite 3 database for storing both your test configurations and the NVTs\u2019 results and configurations.</li> <li>https://www.greenbone.net/en/install_use_gce/</li> </ul> </li> </ul>"},{"location":"level101/security/network_security/#wireshark","title":"Wireshark","text":"<ul> <li>Wireshark is a protocol analyzer.</li> <li>This means Wireshark is designed to decode not only packet bits and bytes but also the relations between packets and protocols.</li> <li>Wireshark understands protocol sequences.</li> </ul> <p>A simple demo of Wireshark</p> <ol> <li> <p>Capture only UDP packets:</p> <ul> <li><code>Capture filter = \u201cudp\u201d</code></li> </ul> </li> <li> <p>Capture only TCP packets:</p> <ul> <li><code>Capture filter = \u201ctcp\u201d</code></li> </ul> </li> <li> <p>TCP/IP three-way Handshake: </p> </li> <li> <p>Filter by IP address: displays all traffic from IP, be it source or destination</p> <ul> <li><code>ip.addr == 192.168.1.1</code></li> </ul> </li> <li> <p>Filter by source address: display traffic only from IP source</p> <ul> <li><code>ip.src == 192.168.0.1</code></li> </ul> </li> <li> <p>Filter by destination: display traffic only form IP destination</p> <ul> <li><code>ip.dst == 192.168.0.1</code></li> </ul> </li> <li> <p>Filter by IP subnet: display traffic from subnet, be it source or destination</p> <ul> <li><code>ip.addr = 192.168.0.1/24</code> </li> </ul> </li> <li> <p>Filter by protocol: filter traffic by protocol name</p> <ul> <li>dns</li> <li>http</li> <li>ftp</li> <li>arp</li> <li>ssh</li> <li>telnet</li> <li>icmp</li> </ul> </li> <li> <p>Exclude IP address: remove traffic from and to IP address</p> <ul> <li><code>!ip.addr ==192.168.0.1</code></li> </ul> </li> <li> <p>Display traffic between two specific subnet</p> <ul> <li><code>ip.addr == 192.168.0.1/24 and ip.addr == 192.168.1.1/24</code></li> </ul> </li> <li> <p>Display traffic between two specific workstations</p> <ul> <li><code>ip.addr == 192.168.0.1 and ip.addr == 192.168.0.2</code></li> </ul> </li> <li> <p>Filter by MAC</p> <ul> <li><code>eth.addr = 00:50:7f:c5:b6:78</code></li> </ul> </li> <li> <p>Filter TCP port</p> <ul> <li><code>tcp.port == 80</code></li> </ul> </li> <li> <p>Filter TCP port source</p> <ul> <li><code>tcp.srcport == 80</code></li> </ul> </li> <li> <p>Filter TCP port destination</p> <ul> <li><code>tcp.dstport == 80</code></li> </ul> </li> <li> <p>Find user agents</p> <ul> <li><code>http.user_agent contains Firefox</code></li> <li><code>!http.user_agent contains || !http.user_agent contains Chrome</code></li> </ul> </li> <li> <p>Filter broadcast traffic</p> <ul> <li><code>!(arp or icmp or dns)</code></li> </ul> </li> <li> <p>Filter IP address and port</p> <ul> <li><code>tcp.port == 80 &amp;&amp; ip.addr == 192.168.0.1</code></li> </ul> </li> <li> <p>Filter all HTTP GET requests</p> <ul> <li><code>http.request</code></li> </ul> </li> <li> <p>Filter all HTTP GET requests and responses</p> <ul> <li><code>http.request or http.response</code></li> </ul> </li> <li> <p>Filter three-way handshake</p> <ul> <li><code>tcp.flags.syn==1 or (tcp.seq==1 and tcp.ack==1 and tcp.len==0 and tcp.analysis.initial_rtt)</code></li> </ul> </li> <li> <p>Find files by type</p> <ul> <li><code>frame contains \u201c(attachment|tar|exe|zip|pdf)\u201d</code></li> </ul> </li> <li> <p>Find traffic based on keyword</p> <ul> <li><code>tcp contains facebook</code></li> <li><code>frame contains facebook</code></li> </ul> </li> <li> <p>Detecting SYN Floods</p> <ul> <li><code>tcp.flags.syn == 1 and tcp.flags.ack == 0</code></li> </ul> </li> </ol> <p>Wireshark Promiscuous Mode</p> <ul> <li>By default, Wireshark only captures packets going to and from the computer where it runs. By checking the box to run Wireshark in Promiscuous Mode in the Capture Settings, you can capture most of the traffic on the LAN.</li> </ul>"},{"location":"level101/security/network_security/#dumpcap","title":"Dumpcap","text":"<ul> <li>Dumpcap is a network traffic dump tool. It captures packet data from a live network and writes the packets to a file. Dumpcap\u2019s native capture file format is <code>pcapng</code>, which is also the format used by Wireshark.</li> <li>By default, Dumpcap uses the <code>pcap</code> library to capture traffic from the first available network interface and writes the received raw packet data, along with the packets\u2019 time stamps into a <code>pcapng</code> file. The capture filter syntax follows the rules of the <code>pcap</code> library.</li> <li>The Wireshark command-line utility called <code>dumpcap.exe</code> can be used to capture LAN traffic over an extended period of time.</li> <li>Wireshark itself can also be used, but Dumpcap does not significantly utilize the computer's memory while capturing for long periods.</li> </ul>"},{"location":"level101/security/network_security/#daemonlogger","title":"DaemonLogger","text":"<ul> <li>DaemonLogger is a packet logging application designed specifically for use in Network and Systems Management (NSM) environments.</li> <li>The biggest benefit DaemonLogger provides is that, like Dumpcap, it is simple to use for capturing packets. In order to begin capturing, you need only to invoke the command and specify an interface.<ul> <li><code>daemonlogger \u2013i eth1</code></li> <li>This option, by default, will begin capturing packets and logging them to the current working directory.</li> <li>Packets will be collected until the capture file size reaches 2 GB, and then a new file will be created. This will continue indefinitely until the process is halted.</li> </ul> </li> </ul>"},{"location":"level101/security/network_security/#netsniff-ng","title":"netsniff-ng","text":"<ul> <li>netsniff-ng is a high-performance packet capture utility</li> <li>While the utilities we\u2019ve discussed to this point rely on <code>libpcap</code> for capture, netsniff-ng utilizes zero-copy mechanisms to capture packets. This is done with the intent to support full packet capture over high throughput links.</li> <li>To begin capturing packets with netsniff-ng, we have to specify an input and output. In most cases, the input will be a network interface, and the output will be a file or folder on disk.</li> </ul> <pre><code>netsniff-ng \u2013i eth1 \u2013o data.pcap\n</code></pre>"},{"location":"level101/security/network_security/#netflow","title":"NetFlow","text":"<ul> <li> <p>NetFlow is a feature that was introduced on Cisco routers around 1996 that provides the ability to collect IP network traffic as it enters or exits an interface. By analyzing the data provided by NetFlow, a network administrator can determine things such as the source and destination of traffic, class of service, and the causes of congestion. A typical flow monitoring setup (using NetFlow) consists of three main components:<sup>[1]</sup></p> </li> <li> <p>Flow exporter: aggregates packets into flows and exports flow records towards one or more flow collectors.</p> </li> <li>Flow collector: responsible for reception, storage and pre-processing of flow data received from a flow exporter.</li> <li>Analysis application: analyzes received flow data in the context of intrusion detection or traffic profiling, for example.<ul> <li>Routers and switches that support NetFlow can collect IP traffic statistics on all interfaces where NetFlow is enabled, and later export those statistics as NetFlow records toward at least one NetFlow collector\u2014typically a server that does the actual traffic analysis.</li> </ul> </li> </ul>"},{"location":"level101/security/network_security/#ids","title":"IDS","text":"<p>A security solution that detects security-related events in your environment but does not block them. IDS sensors can be software- and hardware-based used to collect and analyze the network traffic. These sensors are available in two varieties, network IDS and host IDS.</p> <ul> <li>A host IDS is a server-specific agent running on a server with a minimum of overhead to monitor the operating system.</li> <li>A network IDS can be embedded in a networking device, a standalone appliance, or a module monitoring the network traffic.</li> </ul> <p>Signature Based IDS</p> <ul> <li>The signature-based IDS monitors the network traffic or observes the system and sends an alarm if a known malicious event is happening. </li> <li>It does so by comparing the data flow against a database of known attack patterns.</li> <li>These signatures explicitly define what traffic or activity should be considered as malicious. </li> <li>Signature-based detection has been the bread and butter of network-based defensive security for over a decade, partially because it is very similar to how malicious activity is detected at the host level with antivirus utilities</li> <li> <p>The formula is fairly simple: an analyst observes a malicious activity, derives indicators from the activity and develops them into signatures, and then those signatures will alert whenever the activity occurs again.</p> </li> <li> <p>ex: SNORT &amp; SURICATA</p> </li> </ul> <p>Policy-Based IDS</p> <ul> <li>The policy-based IDSs (mainly host IDSs) trigger an alarm whenever a violation occurs against the configured policy.</li> <li>This configured policy is or should be a representation of the security policies.</li> <li>This type of IDS is flexible and can be customized to a company's network requirements because it knows exactly what is permitted and what is not.</li> <li>On the other hand, the signature-based systems rely on vendor specifics and default settings.</li> </ul> <p>Anomaly Based IDS</p> <ul> <li>The anomaly-based IDS looks for traffic that deviates from the normal, but the definition of what is a normal network traffic pattern is the tricky part.</li> <li>Two types of anomaly-based IDS exist: statistical and nonstatistical anomaly detection</li> <li>Statistical anomaly detection learns the traffic patterns interactively over a period of time.</li> <li>In the nonstatistical approach, the IDS has a predefined configuration of the supposedly acceptable and valid traffic patterns.</li> </ul> <p>Host-Based IDS &amp; Network-Based IDS</p> <ul> <li> <p>A host IDS can be described as a distributed agent residing on each server of the network that needs protection. These distributed agents are tied very closely to the underlying operating system.</p> </li> <li> <p>Network IDSs, on the other hand, can be described as intelligent sniffing devices. Data (raw packets) is captured from the network by a network IDS, whereas host IDSs capture the data from the host on which they are installed.</p> </li> </ul> <p>Honeypots </p> <ul> <li>The use of decoy machines to direct intruders' attention away from the machines under protection is a major technique to preclude intrusion attacks. Any device, system, directory, or file used as a decoy to lure attackers away from important assets and to collect intrusion or abusive behaviors is referred to as a honeypot.</li> <li>A honeypot may be implemented as a physical device or as an emulation system. The idea is to set up decoy machines in a LAN, or decoy directories/files in a file system and make them appear important, but with several exploitable loopholes, to lure attackers to attack these machines or directories/files, so that other machines, directories, and files can evade intruders' attentions. A decoy machine may be a host computer or a server computer. Likewise, we may also set up decoy routers or even decoy LANs.</li> </ul>"},{"location":"level101/security/network_security/#chinks-in-the-armour-tcpip-security-issues","title":"Chinks In The Armour (TCP/IP Security Issues)","text":""},{"location":"level101/security/network_security/#ip-spoofing","title":"IP Spoofing","text":"<ul> <li>In this type of attack, the attacker replaces the IP address of the sender, or in some rare cases the destination, with a different address.</li> <li>IP spoofing is normally used to exploit a target host. In other cases, it is used to start a denial-of-service (DoS) attack.</li> <li>In a DoS attack, an attacker modifies the IP packet to mislead the target host into accepting the original packet as a packet sourced at a trusted host. The attacker must know the IP address of the trusted host to modify the packet headers (source IP address) so that it appears that the packets are coming from that host.</li> </ul> <p>IP Spoofing Detection Techniques</p> <ul> <li> <p>Direct TTL Probes</p> <ul> <li>In this technique, we send a packet to a host of suspect spoofed IP that triggers reply and compares TTL with suspect packet; if the TTL in the reply is not the same as the packet being checked; it is a spoofed packet.</li> <li>This Technique is successful when the attacker is in a different subnet from the victim. </li> </ul> </li> <li> <p>IP Identification Number.</p> </li> <li>Send a probe to the host of suspect spoofed traffic that triggers a reply and compares IP ID with suspect traffic.</li> <li> <p>If IP IDs are not in the near value of packet being checked, suspect traffic is spoofed.</p> </li> <li> <p>TCP Flow Control Method</p> <ul> <li>Attackers sending spoofed TCP packets will not receive the target\u2019s SYN-ACK packets.</li> <li>Attackers cannot, therefore, be responsive to change in the congestion window size.</li> <li>When the receiver still receives traffic even after a windows size is exhausted, most probably the packets are spoofed.</li> </ul> </li> </ul>"},{"location":"level101/security/network_security/#covert-channel","title":"Covert Channel","text":"<ul> <li>A covert or clandestine channel can be best described as a pipe or communication channel between two entities that can be exploited by a process or application transferring information in a manner that violates the system's security specifications.</li> <li> <p>More specifically for TCP/IP, in some instances, covert channels are established, and data can be secretly passed between two end systems.</p> <ul> <li>Ex: ICMP resides at the Internet layer of the TCP/IP protocol suite and is implemented in all TCP/IP hosts. Based on the specifications of the ICMP Protocol, an ICMP Echo Request message should have an 8-byte header and a 56-byte payload. The ICMP Echo Request packet should not carry any data in the payload. However, these packets are often used to carry secret information. The ICMP packets are altered slightly to carry secret data in the payload. This makes the size of the packet larger, but no control exists in the protocol stack to defeat this behavior. The alteration of ICMP packets allows intruders to program specialized client-server pairs. These small pieces of code export confidential information without alerting the network administrator.</li> <li> <p>ICMP can be leveraged for more than data exfiltration. For eg. some C&amp;C tools such as Loki used ICMP channel to establish encrypted interactive session back in 1996.</p> </li> <li> <p>Deep packet inspection has since come a long way. A lot of IDS/IPS detect ICMP tunnelling.</p> <ul> <li>Check for Echo responses that do not contain the same payload as request.</li> <li>Check for the volume of ICMP traffic especially for volumes beyond an acceptable threshold.</li> </ul> </li> </ul> </li> </ul>"},{"location":"level101/security/network_security/#ip-fragmentation-attack","title":"IP Fragmentation Attack","text":"<ul> <li>The TCP/IP protocol suite, or more specifically IP, allows the fragmentation of packets. (this is a feature &amp; not a bug)</li> <li>IP fragmentation offset is used to keep track of the different parts of a datagram.</li> <li>The information or content in this field is used at the destination to reassemble the datagrams.</li> <li> <p>All such fragments have the same Identification field value, and the fragmentation offset indicates the position of the current fragment in the context of the original packet.</p> </li> <li> <p>Many access routers and firewalls do not perform packet reassembly. In normal operation, IP fragments do not overlap, but attackers can create artificially fragmented packets to mislead the routers or firewalls. Usually, these packets are small and almost impractical for end systems because of data and computational overhead.</p> </li> <li>A good example of an IP fragmentation attack is the Ping of Death (PoD) attack. The Ping of Death attack sends fragments that, when reassembled at the end station, create a larger packet than the maximum permissible length.</li> </ul> <p>TCP Flags</p> <ul> <li>Data exchange using TCP does not happen until a three-way handshake has been completed. This handshake uses different flags to influence the way TCP segments are processed.</li> <li>There are 6 bits in the TCP header that are often called flags. Namely:</li> <li> <p>six different flags are part of the TCP header: Urgent pointer field (URG), Acknowledgment field (ACK), Push function (PSH), Reset the connection (RST), Synchronize sequence numbers (SYN), and the sender is finished with this connection (FIN).   </p> </li> <li> <p>Abuse of the normal operation or settings of these flags can be used by attackers to launch DoS attacks. This causes network servers or web servers to crash or hang.</p> </li> </ul> <pre><code>| SYN  | FIN  | PSH   | RST  | Validity|  \n|------|------|-------|------|---------|\n| 1    |1     |0      |0     |Illegal Combination\n| 1    |1     |1      |0     |Illegal Combination\n| 1    |1     |0      |1     |Illegal Combination\n| 1    |1     |1      |1     |Illegal Combination\n</code></pre> <ul> <li>The attacker's ultimate goal is to write special programs or pieces of code that can construct these illegal combinations resulting in an efficient DoS attack.</li> </ul> <p>SYN FLOOD</p> <ul> <li>The timers (or lack of certain timers) in three-way handshake are often used and exploited by attackers to disable services or even to enter systems.</li> <li>After step 2 of the three-way handshake, no limit is set on the time-to-wait after receiving a SYN. The attacker initiates many connection requests to the webserver of Company XYZ (almost certainly with a spoofed IP address).</li> <li>The SYN+ACK packets (Step 2) sent by the web server back to the originating source IP address are not replied to. This leaves a TCP session half-open on the webserver. Multiple packets cause multiple TCP sessions to stay open.</li> <li>Based on the hardware limitations of the server, a limited number of TCP sessions can stay open, and as a result, the webserver refuses further connection establishments attempts from any host as soon as a certain limit is reached. These half-open connections need to be completed or timed out before new connections can be established.</li> </ul> <p>FIN Attack</p> <ul> <li>In normal operation, the sender sets the TCP FIN flag indicating that no more data will be transmitted and the connection can be closed down.</li> <li> <p>This is a four-way handshake mechanism, with both sender and receiver expected to send an acknowledgement on a received FIN packet.</p> </li> <li> <p>During an attack that is trying to kill connections, a spoofed FIN packet is constructed. This packet also has the correct sequence number, so the packets are seen as valid by the targeted host. These sequence numbers are easy to predict. This process is referred to as TCP sequence number prediction, whereby the attacker either sniffs the current Sequence and Acknowledgment (SEQ/ACK) numbers of the connection or can algorithmically predict these numbers.</p> </li> </ul>"},{"location":"level101/security/network_security/#connection-hijacking","title":"Connection Hijacking","text":"<ul> <li>An authorized user (Employee X) sends HTTP requests over a TCP session with the webserver.</li> <li>The web server accepts the packets from Employee X only when the packet has the correct SEQ/ACK numbers. As seen previously, these numbers are important for the webserver to distinguish between different sessions and to make sure it is still talking to Employee X. Imagine that the cracker starts sending packets to the web server spoofing the IP address of Employee X, using the correct SEQ/ACK combination. The web server accepts the packet and increments the ACK number.</li> <li>In the meantime, Employee X continues to send packets but with incorrect SEQ/ACK numbers. As a result of sending unsynchronized packets, all data from Employee X is discarded when received by the webserver. The attacker pretends to be Employee X using the correct numbers. This finally results in the cracker hijacking the connection, whereby Employee X is completely confused and the webserver replies assuming the cracker is sending correct synchronized data.</li> </ul> <p>STEPS:</p> <ol> <li>The attacker examines the traffic flows with a network monitor and notices traffic from Employee X to a web server.</li> <li>The web server returns or echoes data back to the origination station (Employee X).</li> <li>Employee X acknowledges the packet.</li> <li>The cracker launches a spoofed packet to the server.</li> <li>The web server responds to the cracker. The cracker starts verifying SEQ/ACK numbers to double-check success. At this time, the cracker takes over the session from Employee X, which results in a session hanging for Employee X.</li> <li>The cracker can start sending traffic to the webserver.</li> <li>The web server returns the requested data to confirm delivery with the correct ACK number.</li> <li>The cracker can continue to send data (keeping track of the correct SEQ/ACK numbers) until eventually setting the FIN flag to terminate the session.</li> </ol>"},{"location":"level101/security/network_security/#buffer-overflow","title":"Buffer Overflow","text":"<ul> <li>A buffer is a temporary data storage area used to store program code and data.</li> <li>When a program or process tries to store more data in a buffer than it was originally anticipated to hold, a buffer overflow occurs.</li> <li>Buffers are temporary storage locations in memory (memory or buffer sizes are often measured in bytes) that can store a fixed amount of data in bytes. When more data is retrieved than can be stored in a buffer location, the additional information must go into an adjacent buffer, resulting in overwriting the valid data held in them.</li> </ul> <p>Mechanism:</p> <ul> <li>Buffer overflow vulnerabilities exist in different types. But the overall goal for all buffer overflow attacks is to take over the control of a privileged program and, if possible, the host. The attacker has two tasks to achieve this goal. First, the dirty code needs to be available in the program's code address space. Second, the privileged program should jump to that particular part of the code, which ensures that the proper parameters are loaded into memory.</li> <li>The first task can be achieved in two ways: by injecting the code in the right address space or by using the existing code and modifying certain parameters slightly. The second task is a little more complex because the program's control flow needs to be modified to make the program jump to the dirty code.</li> </ul> <p>Counter Measure:</p> <ul> <li>The most important approach is to have a concerted focus on writing correct code.</li> <li>A second method is to make the data buffers (memory locations) address space of the program code non-executable. This type of address space makes it impossible to execute code, which might be infiltrated in the program's buffers during an attack.</li> </ul>"},{"location":"level101/security/network_security/#more-spoofing","title":"More Spoofing","text":"<p>Address Resolution Protocol Spoofing</p> <ul> <li>The Address Resolution Protocol (ARP) provides a mechanism to resolve, or map, a known IP address to a MAC sublayer address.</li> <li>Using ARP spoofing, the cracker can exploit this hardware address authentication mechanism by spoofing the hardware address of Host B. Basically, the attacker can convince any host or network device on the local network that the cracker's workstation is the host to be trusted. This is a common method used in a switched environment.<ul> <li>ARP spoofing can be prevented with the implementation of static ARP tables in all the hosts and routers of your network. Alternatively, you can implement an ARP server that responds to ARP requests on behalf of the target host.</li> </ul> </li> </ul> <p>DNS Spoofing</p> <ul> <li>DNS spoofing is the method whereby the hacker convinces the target machine that the system it wants to connect to is the machine of the cracker.</li> <li>The cracker modifies some records so that name entries of hosts correspond to the attacker's IP address. There have been instances in which the complete DNS server was compromised by an attack.</li> <li>To counter DNS spoofing, the reverse lookup detects these attacks. The reverse lookup is a mechanism to verify the IP address against a name. The IP address and name files are usually kept on different servers to make compromise much more difficult.</li> </ul>"},{"location":"level101/security/threats_attacks_defences/","title":"Part III: Threats, Attacks &amp; Defense","text":""},{"location":"level101/security/threats_attacks_defences/#dns-protection","title":"DNS Protection","text":""},{"location":"level101/security/threats_attacks_defences/#cache-poisoning-attack","title":"Cache Poisoning Attack","text":"<ul> <li>Since DNS responses are cached, a quick response can be provided for repeated translations. DNS negative queries are also cached, e.g., misspelt words, and all cached data periodically times out. Cache poisoning is an issue in what is known as pharming. This term is used to describe a hacker\u2019s attack in which a website\u2019s traffic is redirected to a bogus website by forging the DNS mapping. In this case, an attacker attempts to insert a fake address record for an Internet domain into the DNS. If the server accepts the fake record, the cache is poisoned and subsequent requests for the address of the domain are answered with the address of a server controlled by the attacker. As long as the fake entry is cached by the server, browsers or e-mail servers will automatically go to the address provided by the compromised DNS server.  The typical time-to-live (TTL) for cached entries is a couple of hours, thereby permitting ample time for numerous users to be affected by the attack.</li> </ul>"},{"location":"level101/security/threats_attacks_defences/#dnssec-security-extension","title":"DNSSEC (Security Extension)","text":"<ul> <li>The long-term solution to these DNS problems is authentication. If a resolver cannot distinguish between valid and invalid data in a response, then add source authentication to verify that the data received in response is equal to the data entered by the zone administrator.</li> <li>DNS Security Extensions (DNSSEC) protects against data spoofing and corruption and provides mechanisms to authenticate servers and requests, as well as mechanisms to establish authenticity and integrity.</li> <li>When authenticating DNS responses, each DNS zone signs its data using a private key. It is recommended that this signing be done offline and in advance. The query for a particular record returns the requested resource record set (RRset) and signature (RRSIG) of the requested resource record set. The resolver then authenticates the response using a public key, which is pre-configured or learned via a sequence of key records in the DNS hierarchy.</li> <li>The goals of DNSSEC are to provide authentication and integrity for DNS responses without confidentiality or DDoS protection.</li> </ul>"},{"location":"level101/security/threats_attacks_defences/#bgp","title":"BGP","text":"<ul> <li>BGP stands for border gateway protocol. It is a routing protocol that exchanges routing information among multiple Autonomous Systems (AS)<ul> <li>An Autonomous System is a collection of routers or networks with the same network policy usually under single administrative control.</li> </ul> </li> <li>BGP tells routers which hop to use in order to reach the destination network.</li> <li>BGP is used for both communicating information among routers in an AS (interior) and between multiple ASes (exterior).</li> </ul>"},{"location":"level101/security/threats_attacks_defences/#how-bgp-works","title":"How BGP Works","text":"<ul> <li>BGP is responsible for finding a path to a destination router &amp; the path it chooses should be the shortest and most reliable one.</li> <li>This decision is done through a protocol known as Link state. With the link-state protocol, each router broadcasts to all other routers in the network the state of its links and IP subnets. Each router then receives information from the other routers and constructs a complete topology view of the entire network. The next-hop routing table is based on this topology view.</li> <li>The link-state protocol uses a famous algorithm in the field of computer science, Dijkstra\u2019s shortest path algorithm:<ul> <li>We start from our router considering the path cost to all our direct neighbours.</li> <li>The shortest path is then taken</li> <li>We then re-look at all our neighbours that we can reach and update our link state table with the cost information. We then continue taking the shortest path until every router has been visited.</li> </ul> </li> </ul>"},{"location":"level101/security/threats_attacks_defences/#bgp-vulnerabilities","title":"BGP Vulnerabilities","text":"<ul> <li>By corrupting the BGP routing table, we are able to influence the direction traffic flows on the Internet! This action is known as BGP hijacking.</li> <li>Injecting bogus route advertising information into the BGP-distributed routing database by malicious sources, accidentally or routers can disrupt Internet backbone operations. </li> <li>Blackholing traffic:</li> <li>Blackhole route is a network route, i.e., routing table entry, that goes nowhere and packets matching the route prefix are dropped or ignored. Blackhole routes can only be detected by monitoring the lost traffic.</li> <li>Blackhole routes are the best defence against many common viral attacks where the traffic is dropped from infected machines to/from command &amp; control hosts.</li> <li> <p>Infamous BGP Injection attack on Youtube</p> </li> <li> <p>Ex: In 2008, Pakistan decided to block YouTube by creating a BGP route that led into a black hole. Instead, this routing information got transmitted to a Hong Kong ISP and from there accidentally got propagated to the rest of the world meaning millions were routed through to this black hole and therefore unable to access YouTube.</p> </li> <li>Potentially, the greatest risk to BGP occurs in a denial-of-service attack in which a router is flooded with more packets than it can handle. Network overload and router resource exhaustion happen when the network begins carrying an excessive number of BGP messages, overloading the router control processors, memory, routing table and reducing the bandwidth available for data traffic.</li> <li>Refer: https://medium.com/bugbountywriteup/bgp-the-weak-link-in-the-internet-what-is-bgp-and-how-do-hackers-exploit-it-d899a68ba5bb</li> <li>Router flapping is another type of attack. Route flapping refers to repetitive changes to the BGP routing table, often several times a minute. Withdrawing and re-advertising at a high-rate can cause a serious problem for routers since they propagate the announcements of routes. If these route flaps happen fast enough, e.g., 30-50 times per second, the router becomes overloaded, which eventually prevents convergence on valid routes. The potential impact for Internet users is a slowdown in message delivery, and in some cases, packets may not be delivered at all.</li> </ul> <p>BGP Security</p> <ul> <li>Border Gateway Protocol Security recommends the use of BGP peer authentication since it is one of the strongest mechanisms for preventing malicious activity.<ul> <li>The authentication mechanisms are Internet Protocol Security (IPsec) or BGP MD5.</li> </ul> </li> <li>Another method, known as prefix limits, can be used to avoid filling router tables. In this approach, routers should be configured to disable or terminate a BGP peering session, and issue warning messages to administrators when a neighbour sends in excess of a preset number of prefixes.</li> <li>IETF is currently working on improving this space</li> </ul>"},{"location":"level101/security/threats_attacks_defences/#web-based-attacks","title":"Web-Based Attacks","text":""},{"location":"level101/security/threats_attacks_defences/#http-response-splitting-attacks","title":"HTTP Response Splitting Attacks","text":"<ul> <li>HTTP response splitting attack may happen where the server script embeds user data in HTTP response headers without appropriate sanitation.</li> <li>This typically happens when the script embeds user data in the redirection URL of a redirection response (HTTP status code 3xx), or when the script embeds user data in a cookie value or name when the response sets a cookie.</li> <li>HTTP response splitting attacks can be used to perform web cache poisoning and cross-site scripting (XSS) attacks.</li> <li>HTTP response splitting is the attacker\u2019s ability to send a single HTTP request that forces the webserver to form an output stream, which is then interpreted by the target as two HTTP responses instead of one response.</li> </ul>"},{"location":"level101/security/threats_attacks_defences/#cross-site-request-forgery-csrf-or-xsrf","title":"Cross-Site Request Forgery (CSRF or XSRF)","text":"<ul> <li>A Cross-Site Request Forgery attack tricks the victim\u2019s browser into issuing a command to a vulnerable web application.</li> <li>Vulnerability is caused by browsers automatically including user authentication data, session ID, IP address, Windows domain credentials, etc. with each request.</li> <li>Attackers typically use CSRF to initiate transactions such as transfer funds, login/logout user, close account, access sensitive data, and change account details.</li> <li>The vulnerability is caused by web browsers that automatically include credentials with each request, even for requests caused by a form, script, or image on another site. CSRF can also be dynamically constructed as part of a payload for a cross-site scripting attack.</li> <li>All sites relying on automatic credentials are vulnerable. Popular browsers cannot prevent cross-site request forgery. Logging out of high-value sites as soon as possible can mitigate CSRF risk. It is recommended that a high-value website must require a client to manually provide authentication data in the same HTTP request used to perform any operation with security implications. Limiting the lifetime of session cookies can also reduce the chance of being used by other malicious sites.</li> <li>OWASP recommends website developers include a required security token in HTTP requests associated with sensitive business functions in order to mitigate CSRF attacks.</li> </ul>"},{"location":"level101/security/threats_attacks_defences/#cross-site-scripting-xss-attacks","title":"Cross-Site Scripting (XSS) Attacks","text":"<ul> <li>Cross-Site Scripting occurs when dynamically generated web pages display user input, such as login information, that is not properly validated, allowing an attacker to embed malicious scripts into the generated page and then execute the script on the machine of any user that views the site.</li> <li>If successful, Cross-Site Scripting vulnerabilities can be exploited to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on end-user systems.</li> <li>Cross-Site Scripting (XSS or CSS) attacks involve the execution of malicious scripts on the victim\u2019s browser. The victim is simply a user\u2019s host and not the server. XSS results from a failure to validate user input by a web-based application.</li> </ul>"},{"location":"level101/security/threats_attacks_defences/#document-object-model-dom-xss-attacks","title":"Document Object Model (DOM) XSS Attacks","text":"<ul> <li>The Document Object Model (DOM) based XSS does not require the webserver to receive the XSS payload for a successful attack. The attacker abuses the runtime by embedding their data on the client-side. An attacker can force the client (browser) to render the page with parts of the DOM controlled by the attacker. </li> <li>When the page is rendered and the data is processed by the page, typically by a client-side HTML-embedded script such as JavaScript, the page\u2019s code may insecurely embed the data in the page itself, thus delivering the cross-site scripting payload. There are several DOM objects which can serve as an attack vehicle for delivering malicious script to victims browser.</li> </ul>"},{"location":"level101/security/threats_attacks_defences/#clickjacking","title":"Clickjacking","text":"<ul> <li>The technique works by hiding malicious link/scripts under the cover of the content of a legitimate site.</li> <li>Buttons on a website actually contain invisible links, placed there by the attacker. So, an individual who clicks on an object they can visually see is actually being duped into visiting a malicious page or executing a malicious script.</li> <li>When mouseover is used together with clickjacking, the outcome is devastating. Facebook users have been hit by a clickjacking attack, which tricks people into \u201cliking\u201d a particular Facebook page, thus enabling the attack to spread since Memorial Day 2010.</li> <li>There is not yet effective defence against clickjacking, and disabling JavaScript is the only viable method.</li> </ul>"},{"location":"level101/security/threats_attacks_defences/#database-attacks-defenses","title":"DataBase Attacks &amp; Defenses","text":""},{"location":"level101/security/threats_attacks_defences/#sql-injection-attacks","title":"SQL injection Attacks","text":"<ul> <li>It exploits improper input validation in database queries.</li> <li>A successful exploit will allow attackers to access, modify, or delete information in the database.</li> <li>It permits attackers to steal sensitive information stored within the backend databases of affected websites, which may include such things as user credentials, email addresses, personal information, and credit card numbers.</li> </ul> <pre><code>SELECT USERNAME,PASSWORD from USERS where USERNAME='&lt;username&gt;' AND PASSWORD='&lt;password&gt;';\n</code></pre> <p>Here, the username &amp; password is the input provided by the user. Suppose an attacker gives the input as <code>OR '1'='1'</code> in both fields. Therefore the SQL query will look like:</p> <pre><code>SELECT USERNAME,PASSWORD from USERS where USERNAME='' OR '1'='1' AND PASSOWRD='' OR '1'='1';\n</code></pre> <p>This query results in a true statement &amp; the user gets logged in. This example depicts the most basic type of SQL injection.</p>"},{"location":"level101/security/threats_attacks_defences/#sql-injection-attack-defenses","title":"SQL Injection Attack Defenses","text":"<ul> <li>SQL injection can be protected by filtering the query to eliminate malicious syntax, which involves the employment of some tools in order to (a) scan the source code.</li> <li>In addition, the input fields should be restricted to the absolute minimum, typically anywhere from 7-12 characters, and validate any data, e.g., if a user inputs an age, make sure the input is an integer with a maximum of 3 digits.</li> </ul>"},{"location":"level101/security/threats_attacks_defences/#vpn","title":"VPN","text":"<p>A virtual private network (VPN) is a service that offers a secure, reliable connection over a shared public infrastructure such as the Internet. Cisco defines a VPN as an encrypted connection between private networks over a public network. To date, there are three types of VPNs:</p> <ul> <li>Remote access</li> <li>Site-to-site</li> <li>Firewall-based</li> </ul>"},{"location":"level101/security/threats_attacks_defences/#security-breach","title":"Security Breach","text":"<p>In spite of the most aggressive steps to protect computers from attacks, attackers sometimes get through. Any event that results in a violation of any of the confidentiality, integrity, or availability (CIA) security tenets is a security breach.</p>"},{"location":"level101/security/threats_attacks_defences/#denial-of-service-attacks","title":"Denial of Service Attacks","text":"<ul> <li>Denial-of-service (DoS) attacks result in downtime or inability of a user to access a system. DoS attacks impact the availability of tenet of information systems security. A DoS attack is a coordinated attempt to deny service by occupying a computer to perform large amounts of unnecessary tasks. This excessive activity makes the system unavailable to perform legitimate operations</li> <li>Two common types of DoS attacks are as follows:</li> <li>Logic attacks\u2014Logic attacks use software flaws to crash or seriously hinder the performance of remote servers. You can prevent many of these attacks by installing the latest patches to keep your software up to date.</li> <li>Flooding attacks\u2014Flooding attacks overwhelm the victim computer\u2019s CPU, memory, or network resources by sending large numbers of useless requests to the machine.</li> <li>Most DoS attacks target weaknesses in the overall system architecture rather than a software bug or security flaw</li> <li>One popular technique for launching a packet flood is a SYN flood.</li> <li>One of the best defences against DoS attacks is to use intrusion prevention system (IPS) software or devices to detect and stop the attack.</li> </ul>"},{"location":"level101/security/threats_attacks_defences/#distributed-denial-of-service-attacks","title":"Distributed Denial-of-Service Attacks","text":"<ul> <li>DDoS attacks differ from regular DoS attacks in their scope. In a DDoS attack, attackers hijack hundreds or even thousands of Internet computers, planting automated attack agents on those systems. The attacker then instructs the agents to bombard the target site with forged messages. This overloads the site and blocks legitimate traffic. The key here is strength in numbers. The attacker does more damage by distributing the attack across multiple computers.</li> </ul>"},{"location":"level101/security/threats_attacks_defences/#wiretapping","title":"Wiretapping","text":"<ul> <li> <p>Although the term wiretapping is generally associated with voice telephone communications, attackers can also use wiretapping to intercept data communications.</p> </li> <li> <p>Attackers can tap telephone lines and data communication lines. Wiretapping can be active, where the attacker makes modifications to the line. It can also be passive, where an unauthorized user simply listens to the transmission without changing the contents. Passive intrusion can include the copying of data for a subsequent active attack.</p> </li> <li>Two methods of active wiretapping are as follows:<ul> <li>Between-the-lines wiretapping\u2014This type of wiretapping does not alter the messages sent by the legitimate user but inserts additional messages into the communication line when the legitimate user pauses.</li> <li>Piggyback-entry wiretapping\u2014This type of wiretapping intercepts and modifies the original message by breaking the communications line and routing the message to another computer that acts as a host.</li> </ul> </li> </ul>"},{"location":"level101/security/threats_attacks_defences/#backdoors","title":"Backdoors","text":"<ul> <li>Software developers sometimes include hidden access methods, called backdoors, in their programs. Backdoors give developers or support personnel easy access to a system without having to struggle with security controls. The problem is that backdoors don\u2019t always stay hidden. When an attacker discovers a backdoor, he or she can use it to bypass existing security controls such as passwords, encryption, and so on. Where legitimate users log on through front doors using a user ID and password, attackers use backdoors to bypass these normal access controls.</li> </ul>"},{"location":"level101/security/threats_attacks_defences/#malicious-attacks","title":"Malicious Attacks","text":""},{"location":"level101/security/threats_attacks_defences/#birthday-attack","title":"Birthday Attack","text":"<ul> <li>Once an attacker compromises a hashed password file, a birthday attack is performed. A birthday attack is a type of cryptographic attack that is used to make a brute-force attack of one-way hashes easier. It is a mathematical exploit that is based on the birthday problem in probability theory.</li> <li>Further Reading:<ul> <li>https://www.sciencedirect.com/topics/computer-science/birthday-attack</li> <li>https://www.internetsecurity.tips/birthday-attack/</li> </ul> </li> </ul>"},{"location":"level101/security/threats_attacks_defences/#brute-force-password-attacks","title":"Brute-Force Password Attacks","text":"<ul> <li>In a brute-force password attack, the attacker tries different passwords on a system until one of them is successful. Usually, the attacker employs a software program to try all possible combinations of a likely password, user ID, or security code until it locates a match. This occurs rapidly and in sequence. This type of attack is called a brute-force password attack because the attacker simply hammers away at the code. There is no skill or stealth involved\u2014just brute force that eventually breaks the code.</li> <li>Further Reading:<ul> <li>https://owasp.org/www-community/attacks/Brute_force_attack</li> <li>https://owasp.org/www-community/controls/Blocking_Brute_Force_Attacks</li> </ul> </li> </ul>"},{"location":"level101/security/threats_attacks_defences/#dictionary-password-attacks","title":"Dictionary Password Attacks","text":"<ul> <li>A dictionary password attack is a simple attack that relies on users making poor password choices. In a dictionary password attack, a simple password-cracker program takes all the words from a dictionary file and attempts to log on by entering each dictionary entry as a password.</li> <li>Further Reading:<ul> <li>https://capec.mitre.org/data/definitions/16.html</li> </ul> </li> </ul>"},{"location":"level101/security/threats_attacks_defences/#replay-attacks","title":"Replay Attacks","text":"<ul> <li>Replay attacks involve capturing data packets from a network and retransmitting them to produce an unauthorized effect. The receipt of duplicate, authenticated IP packets may disrupt service or have some other undesired consequence. Systems can be broken through replay attacks when attackers reuse old messages or parts of old messages to deceive system users. This helps intruders to gain information that allows unauthorized access into a system.</li> <li>Further reading:</li> <li>https://study.com/academy/lesson/replay-attack-definition-examples-prevention.html</li> </ul>"},{"location":"level101/security/threats_attacks_defences/#man-in-the-middle-attacks","title":"Man-in-the-Middle Attacks","text":"<ul> <li>A man-in-the-middle attack takes advantage of the multihop process used by many types of networks. In this type of attack, an attacker intercepts messages between two parties before transferring them on to their intended destination.</li> <li>Web spoofing is a type of man-in-the-middle attack in which the user believes a secure session exists with a particular web server. In reality, the secure connection exists only with the attacker, not the webserver. The attacker then establishes a secure connection with the webserver, acting as an invisible go-between. The attacker passes traffic between the user and the webserver. In this way, the attacker can trick the user into supplying passwords, credit card information, and other private data.</li> <li>Further Reading:<ul> <li>https://owasp.org/www-community/attacks/Man-in-the-middle_attack</li> </ul> </li> </ul>"},{"location":"level101/security/threats_attacks_defences/#masquerading","title":"Masquerading","text":"<ul> <li>In a masquerade attack, one user or computer pretends to be another user or computer. Masquerade attacks usually include one of the other forms of active attacks, such as IP address spoofing or replaying. Attackers can capture authentication sequences and then replay them later to log on again to an application or operating system. For example, an attacker might monitor usernames and passwords sent to a weak web application. The attacker could then use the intercepted credentials to log on to the web application and impersonate the user.</li> <li>Further Reading: <ul> <li>https://dl.acm.org/doi/book/10.5555/2521792</li> <li>https://ieeexplore.ieee.org/document/1653228</li> </ul> </li> </ul>"},{"location":"level101/security/threats_attacks_defences/#eavesdropping","title":"Eavesdropping","text":"<ul> <li>Eavesdropping, or sniffing, occurs when a host sets its network interface on promiscuous mode and copies packets that pass by for later analysis. Promiscuous mode enables a network device to intercept and read each network packet (of course given some conditions) given sec, even if the packet\u2019s address doesn\u2019t match the network device. It is possible to attach hardware and software to monitor and analyze all packets on that segment of the transmission media without alerting any other users. Candidates for eavesdropping include satellite, wireless, mobile, and other transmission methods.</li> </ul>"},{"location":"level101/security/threats_attacks_defences/#social-engineering","title":"Social Engineering","text":"<ul> <li>Attackers often use a deception technique called social engineering to gain access to resources in an IT infrastructure. In nearly all cases, social engineering involves tricking authorized users into carrying out actions for unauthorized users. The success of social engineering attacks depends on the basic tendency of people to want to be helpful.</li> </ul>"},{"location":"level101/security/threats_attacks_defences/#phreaking","title":"Phreaking","text":"<ul> <li>Phone phreaking, or simply phreaking, is a slang term that describes the activity of a subculture of people who study, experiment with, or explore telephone systems, telephone company equipment, and systems connected to public telephone networks. Phreaking is the art of exploiting bugs and glitches that exist in the telephone system.</li> </ul>"},{"location":"level101/security/threats_attacks_defences/#phishing","title":"Phishing","text":"<ul> <li>Phishing is a type of fraud in which an attacker attempts to trick the victim into providing private information such as credit card numbers, passwords, dates of birth, bank account numbers, automated teller machine (ATM) PINs, and Social Security numbers.</li> </ul>"},{"location":"level101/security/threats_attacks_defences/#pharming","title":"Pharming","text":"<ul> <li>Pharming is another type of attack that seeks to obtain personal or private financial information through domain spoofing. A pharming attack doesn\u2019t use messages to trick victims into visiting spoofed websites that appear legitimate, however. Instead, pharming \u201cpoisons\u201d a domain name on the domain name server (DNS), a process known as DNS poisoning. The result is that when a user enters the poisoned server\u2019s web address into his or her address bar, that user navigates to the attacker\u2019s site. The user\u2019s browser still shows the correct website, which makes pharming difficult to detect\u2014and therefore more serious. Where phishing attempts to scam people one at a time with an email or instant message, pharming enables scammers to target large groups of people at one time through domain spoofing.</li> </ul>"},{"location":"level101/security/writing_secure_code/","title":"PART IV: Writing Secure Code &amp; More","text":"<p>The first and most important step in reducing security and reliability issues is to educate developers. However, even the best-trained engineers make mistakes, security experts can write insecure code and SREs can miss reliability issues. It\u2019s difficult to keep the many considerations and tradeoffs involved in building secure and reliable systems in mind simultaneously, especially if you\u2019re also responsible for producing software.</p>"},{"location":"level101/security/writing_secure_code/#use-frameworks-to-enforce-security-and-reliability-while-writing-code","title":"Use frameworks to enforce security and reliability while writing code","text":"<ul> <li>A better approach is to handle security and reliability in common frameworks, languages, and libraries. Ideally, libraries only expose an interface that makes writing code with common classes of security vulnerabilities impossible.</li> <li>Multiple applications can use each library or framework. When domain experts fix an issue, they remove it from all the applications the framework supports, allowing this engineering approach to scale better.</li> </ul>"},{"location":"level101/security/writing_secure_code/#common-security-vulnerabilities","title":"Common Security Vulnerabilities","text":"<ul> <li>In large codebases, a handful of classes account for the majority of security vulnerabilities, despite ongoing efforts to educate developers and introduce code review. OWASP and SANS publish lists of common vulnerability classes</li> </ul>"},{"location":"level101/security/writing_secure_code/#write-simple-code","title":"Write Simple Code","text":"<p>Try to keep your code clean and simple.</p>"},{"location":"level101/security/writing_secure_code/#avoid-multi-level-nesting","title":"Avoid Multi-Level Nesting","text":"<ul> <li>Multilevel nesting is a common anti-pattern that can lead to simple mistakes. If the error is in the most common code path, it will likely be captured by the unit tests. However, unit tests don\u2019t always check error handling paths in multilevel nested code. The error might result in decreased reliability (for example, if the service crashes when it mishandles an error) or a security vulnerability (like a mishandled authorization check error).</li> </ul>"},{"location":"level101/security/writing_secure_code/#eliminate-yagni-smells","title":"Eliminate YAGNI Smells","text":"<ul> <li>Sometimes developers overengineer solutions by adding functionality that may be useful in the future, \u201cjust in case.\u201d This goes against the YAGNI (You Aren\u2019t Gonna Need It) principle, which recommends implementing only the code that you need. YAGNI code adds unnecessary complexity because it needs to be documented, tested, and maintained.</li> <li>To summarize, avoiding YAGNI code leads to improved reliability, and simpler code leads to fewer security bugs, fewer opportunities to make mistakes, and less developer time spent maintaining unused code.</li> </ul>"},{"location":"level101/security/writing_secure_code/#repay-technical-debt","title":"Repay Technical Debt","text":"<ul> <li>It is a common practice for developers to mark places that require further attention with TODO or FIXME annotations. In the short term, this habit can accelerate the delivery velocity for the most critical functionality, and allow a team to meet early deadlines\u2014but it also incurs technical debt. Still, it\u2019s not necessarily a bad practice, as long as you have a clear process (and allocate time) for repaying such debt.</li> </ul>"},{"location":"level101/security/writing_secure_code/#refactoring","title":"Refactoring","text":"<ul> <li>Refactoring is the most effective way to keep a codebase clean and simple. Even a healthy codebase occasionally needs to be.</li> <li>Regardless of the reasons behind refactoring, you should always follow one golden rule: never mix refactoring and functional changes in a single commit to the code repository. Refactoring changes are typically significant and can be difficult to understand.</li> <li>If a commit also includes functional changes, there\u2019s a higher risk that an author or reviewer might overlook bugs.</li> </ul>"},{"location":"level101/security/writing_secure_code/#unit-testing","title":"Unit Testing","text":"<ul> <li>Unit testing can increase system security and reliability by pinpointing a wide range of bugs in individual software components before a release. This technique involves breaking software components into smaller, self-contained \u201cunits\u201d that have no external dependencies, and then testing each unit.</li> </ul>"},{"location":"level101/security/writing_secure_code/#fuzz-testing","title":"Fuzz Testing","text":"<ul> <li>Fuzz testing is a technique that complements the previously mentioned testing techniques. Fuzzing involves using a fuzzing engine to generate a large number of candidate inputs that are then passed through a fuzz driver to the fuzz target. The fuzzer then analyzes how the system handles the input. Complex inputs handled by all kinds of software are popular targets for fuzzing\u2014for example, file parsers, compression algorithms, network protocol implementation and audio codec.</li> </ul>"},{"location":"level101/security/writing_secure_code/#integration-testing","title":"Integration Testing","text":"<ul> <li>Integration testing moves beyond individual units and abstractions, replacing fake or stubbed-out implementations of abstractions like databases or network services with real implementations. As a result, integration tests exercise more complete code paths. Because you must initialize and configure these other dependencies, integration testing may be slower and flakier than unit testing\u2014to execute the test, this approach incorporates real-world variables like network latency as services communicate end-to-end. As you move from testing individual low-level units of code to testing how they interact when composed together, the net result is a higher degree of confidence that the system is behaving as expected.</li> </ul>"},{"location":"level101/security/writing_secure_code/#last-but-not-the-least","title":"Last But not the least","text":"<ul> <li>Code Reviews</li> <li>Rely on Automation</li> <li>Don\u2019t check in Secrets</li> <li>Verifiable Builds</li> </ul>"},{"location":"level101/systems_design/availability/","title":"HA - Availability - Common \u201cNines\u201d","text":"<p>Availability is generally expressed as \u201cNines\u201d, common \u2018Nines\u2019  are listed below.</p> Availability % Downtime per year Downtime per month Downtime per week Downtime per day 99% (Two Nines) 3.65 days 7.31 hours 1.68 hours 14.40 minutes 99.5% (Two and a half Nines) 1.83 days 3.65 hours 50.40 minutes 7.20 minutes 99.9% (Three Nines) 8.77 hours 43.83 minutes 10.08 minutes 1.44 minutes 99.95% (Three and a half Nines) 4.38 hours 21.92 minutes 5.04 minutes 43.20 seconds 99.99% (Four Nines) 52.60 minutes 4.38 minutes 1.01 minutes 8.64 seconds 99.995% (Four and a half Nines) 26.30 minutes 2.19 minutes 30.24 seconds 4.32 seconds 99.999% (Five Nines) 5.26 minutes 26.30 seconds 6.05 seconds 864.0 ms"},{"location":"level101/systems_design/availability/#refer","title":"Refer","text":"<ul> <li>https://en.wikipedia.org/wiki/High_availability#Percentage_calculation</li> </ul>"},{"location":"level101/systems_design/availability/#ha-availability-serial-components","title":"HA - Availability Serial Components","text":"<p>A System with components is operating in the series if the failure of a part leads to the combination becoming inoperable.</p> <p>For example, if LB in our architecture fails, all access to app tiers will fail. LB and app tiers are connected serially.</p> <p>The combined availability of the system is the product of individual components availability:</p> <p>A = Ax x Ay x \u2026..</p>"},{"location":"level101/systems_design/availability/#refer_1","title":"Refer","text":"<ul> <li>http://www.eventhelix.com/RealtimeMantra/FaultHandling/system_reliability_availability.htm</li> </ul>"},{"location":"level101/systems_design/availability/#ha-availability-parallel-components","title":"HA - Availability Parallel Components","text":"<p>A System with components is operating in parallel if the failure of a part leads to the other part taking over the operations of the failed part.</p> <p>If we have more than one LB and if the rest of the LBs can take over the traffic during one LB failure, then LBs are operating in parallel.</p> <p>The combined availability of the system is</p> <p>A = 1 - ( (1-Ax) x (1-Ax) x \u2026.. )</p>"},{"location":"level101/systems_design/availability/#refer_2","title":"Refer","text":"<ul> <li>http://www.eventhelix.com/RealtimeMantra/FaultHandling/system_reliability_availability.htm</li> </ul>"},{"location":"level101/systems_design/availability/#ha-core-principles","title":"HA - Core Principles","text":"<p>Elimination of single points of failure (SPOF) This means adding redundancy to the system so that the failure of a component does not mean failure of the entire system.</p> <p>Reliable crossover In redundant systems, the crossover point itself tends to become a single point of failure. Reliable systems must provide for reliable crossover.</p> <p>Detection of failures as they occur If the two principles above are observed, then a user may never see a failure. </p>"},{"location":"level101/systems_design/availability/#refer_3","title":"Refer","text":"<ul> <li>https://en.wikipedia.org/wiki/High_availability#Principles</li> </ul>"},{"location":"level101/systems_design/availability/#ha-spof","title":"HA - SPOF","text":"<p>WHAT: Never implement and always eliminate single points of failure.</p> <p>WHEN TO USE: During architecture reviews and new designs.</p> <p>HOW TO USE: Identify single instances on architectural diagrams. Strive for active/active configurations. At the very least, we should have a standby to take control when active instances fail.</p> <p>WHY: Maximize availability through multiple instances.</p> <p>KEY TAKEAWAYS: Strive for active/active rather than active/passive solutions. Use load balancers to balance traffic across instances of a service. Use control services with active/passive instances for patterns that require singletons.</p>"},{"location":"level101/systems_design/availability/#ha-reliable-crossover","title":"HA - Reliable Crossover","text":"<p>WHAT: Ensure when system components failover they do so reliably.</p> <p>WHEN TO USE: During architecture reviews, failure modeling, and designs.</p> <p>HOW TO USE: Identify how available a system is during the crossover and ensure it is within acceptable limits. </p> <p>WHY: Maximize availability and ensure data handling semantics are preserved.  </p> <p>KEY TAKEAWAYS: Strive for active/active rather than active/passive solutions, they have a lesser risk of cross over being unreliable. Use LB and the right load-balancing methods to ensure reliable failover. Model and build your data systems to ensure data is correctly handled when crossover happens. Generally, DB systems follow active/passive semantics for writes. Masters accept writes and when the master goes down, the follower is promoted to master (active from being passive) to accept writes. We have to be careful here that the cutover never introduces more than one master. This problem is called a split brain.</p>"},{"location":"level101/systems_design/availability/#applications-in-sre-role","title":"Applications in SRE role","text":"<ol> <li>SRE works on deciding an acceptable SLA and make sure the system is available to achieve the SLA</li> <li>SRE is involved in architecture design right from building the data center to make sure the site is not affected by a network switch, hardware, power, or software failures</li> <li>SRE also run mock drills of failures to see how the system behaves in uncharted territory and comes up with a plan to improve availability if there are misses.  https://engineering.linkedin.com/blog/2017/11/resilience-engineering-at-linkedin-with-project-waterbear</li> </ol> <p>Post our understanding about HA, our architecture diagram looks something like this below:</p> <p></p>"},{"location":"level101/systems_design/conclusion/","title":"Conclusion","text":"<p>Armed with these principles, we hope the course will give a fresh perspective to design software systems. It might be over-engineering to get all this on day zero. But some are really important from day 0 like eliminating single points of failure, making scalable services by just increasing replicas. As a bottleneck is reached, we can split code by services, shard data to scale. As the organization matures, bringing in chaos engineering to measure how systems react to failure will help in designing robust software systems.</p>"},{"location":"level101/systems_design/fault-tolerance/","title":"Fault Tolerance","text":"<p>Failures are not avoidable in any system and will happen all the time, hence we need to build systems that can tolerate failures or recover from them.</p> <ul> <li>In systems, failure is the norm rather than the exception.</li> <li>\"Anything that can go wrong will go wrong\u201d\u2014Murphy\u2019s Law</li> <li>\u201cComplex systems contain changing mixtures of failures latent within them\u201d\u2014How Complex Systems Fail.</li> </ul>"},{"location":"level101/systems_design/fault-tolerance/#fault-tolerance-failure-metrics","title":"Fault Tolerance: Failure Metrics","text":"<p>Common failure metrics that get measured and tracked for any system.</p> <p>Mean time to repair (MTTR): The average time to repair and restore a failed system. </p> <p>Mean time between failures (MTBF): The average operational time between one device failure or system breakdown and the next. </p> <p>Mean time to failure (MTTF): The average time a device or system is expected to function before it fails. </p> <p>Mean time to detect (MTTD): The average time between the onset of a problem and when the organization detects it. </p> <p>Mean time to investigate (MTTI): The average time between the detection of an incident and when the organization begins to investigate its cause and solution. </p> <p>Mean time to restore service (MTRS): The average elapsed time from the detection of an incident until the affected system or component is again available to users.</p> <p>Mean time between system incidents (MTBSI): The average elapsed time between the detection of two consecutive incidents. MTBSI can be calculated by adding MTBF and MTRS (MTBSI = MTBF + MTRS).</p> <p>Failure rate: Another reliability metric, which measures the frequency with which a component or system fails. It is expressed as a number of failures over a unit of time.</p>"},{"location":"level101/systems_design/fault-tolerance/#refer","title":"Refer","text":"<ul> <li>https://www.splunk.com/en_us/data-insider/what-is-mean-time-to-repair.html</li> </ul>"},{"location":"level101/systems_design/fault-tolerance/#fault-tolerance-fault-isolation-terms","title":"Fault Tolerance: Fault Isolation Terms","text":"<p>Systems should have a short circuit. Say in our content sharing system, if \u201cNotifications\u201d is not working, the site should gracefully handle that failure by removing the functionality instead of taking the whole site down. </p> <p>Swimlane is one of the commonly used fault isolation methodologies. Swimlane adds a barrier to the service from other services so that failure on either of them won\u2019t affect the other. Say we roll out a new feature \u2018Advertisement\u2019 in our content sharing app. We can have two architectures</p> <p></p> <p>If Ads are generated on the fly synchronously during each Newsfeed request, the faults in the Ads feature get propagated to the Newsfeed feature. Instead if we swimlane the \u201cGeneration of Ads\u201d service and use a shared storage to populate Newsfeed App, Ads failures won\u2019t cascade to Newsfeed, and worst case if Ads don\u2019t meet SLA, we can have Newsfeed without Ads.</p> <p>Let's take another example, we have come up with a new model for our Content sharing App. Here, we roll out an enterprise content sharing App where enterprises pay for the service and the content should never be shared outside the enterprise. </p> <p></p>"},{"location":"level101/systems_design/fault-tolerance/#swimlane-principles","title":"Swimlane Principles","text":"<p>Principle 1: Nothing is shared (also known as \u201cshare as little as possible\u201d). The less that is shared within a swimlane, the more fault isolative the swimlane becomes. (as shown in Enterprise use-case)</p> <p>Principle 2: Nothing crosses a swimlane boundary. Synchronous (defined by expecting a request\u2014not the transfer protocol) communication never crosses a swimlane boundary; if it does, the boundary is drawn incorrectly. (as shown in Ads feature)</p>"},{"location":"level101/systems_design/fault-tolerance/#swimlane-approaches","title":"Swimlane Approaches","text":"<p>Approach 1: Swimlane the money-maker. Never allow your cash register to be compromised by other systems. (Tier 1  vs Tier 2 in enterprise use case)</p> <p>Approach 2: Swimlane the biggest sources of incidents. Identify the recurring causes of pain and isolate them. (If Ads feature is in code yellow, swimlaning it is the best option.)</p> <p>Approach 3: Swimlane natural barriers. Customer boundaries make good swimlanes. (Public vs Enterprise customers)</p>"},{"location":"level101/systems_design/fault-tolerance/#refer_1","title":"Refer","text":"<ul> <li>https://learning.oreilly.com/library/view/the-art-of/9780134031408/ch21.html#ch21</li> </ul>"},{"location":"level101/systems_design/fault-tolerance/#applications-in-sre-role","title":"Applications in SRE role","text":"<ol> <li>Work with the DC tech or cloud team to distribute infrastructure such that it's immune to switch or power failures by creating fault zones within a Data Center (https://docs.microsoft.com/en-us/azure/virtual-machines/manage-availability#use-availability-zones-to-protect-from-datacenter-level-failures).</li> <li>Work with the partners and design interaction between services such that one service breakdown is not amplified in a cascading fashion to all upstreams.</li> </ol>"},{"location":"level101/systems_design/intro/","title":"Systems Design","text":""},{"location":"level101/systems_design/intro/#prerequisites","title":"Prerequisites","text":"<p>Fundamentals of common software system components:</p> <ul> <li>Linux Basics</li> <li>Linux Networking</li> <li>Databases RDBMS</li> <li>NoSQL Concepts</li> </ul>"},{"location":"level101/systems_design/intro/#what-to-expect-from-this-course","title":"What to expect from this course","text":"<p>Thinking about and designing for scalability, availability, and reliability of large scale software systems.</p>"},{"location":"level101/systems_design/intro/#what-is-not-covered-under-this-course","title":"What is not covered under this course","text":"<p>Individual software components\u2019 scalability and reliability concerns like e.g. Databases, while the same scalability principles and thinking can be applied, these individual components have their own specific nuances when scaling them and thinking about their reliability.</p> <p>More light will be shed on concepts rather than on setting up and configuring components like Loadbalancers to achieve scalability, availability, and reliability of systems</p>"},{"location":"level101/systems_design/intro/#course-contents","title":"Course Contents","text":"<ul> <li>Introduction</li> <li>Scalability</li> <li>High Availability</li> <li>Fault Tolerance</li> </ul>"},{"location":"level101/systems_design/intro/#introduction","title":"Introduction","text":"<p>So, how do you go about learning to design a system?</p> <p>\"Like most great questions, it showed a level of naivety that was breathtaking. The only short answer I could give was, essentially, that you learned how to design a system by designing systems and finding out what works and what doesn\u2019t work.\"\u2014Jim Waldo, Sun Microsystems, On System Design</p> <p>As software and hardware systems have multiple moving parts, we need to think about how those parts will grow, their failure modes, their inter-dependencies, how it will impact the users and the business.</p> <p>There is no one-shot method or way to learn or do system design, we only learn to design systems by designing and iterating on them.</p> <p>This course will be a starter to make one think about scalability, availability, and fault tolerance during systems design.</p>"},{"location":"level101/systems_design/intro/#backstory","title":"Backstory","text":"<p>Let\u2019s design a simple content sharing application where users can share photos, media in our application which can be liked by their friends. Let\u2019s start with a simple design of the application and evolve it as we learn system design concepts.</p> <p></p>"},{"location":"level101/systems_design/scalability/","title":"Scalability","text":"<p>What does scalability mean for a system/service? A system is composed of services/components, each service/component scalability needs to be tackled separately, and the scalability of the system as a whole.</p> <p>A service is said to be scalable if, as resources are added to the system, it results in increased performance in a manner proportional to resources added.</p> <p>An always-on service is said to be scalable if adding resources to facilitate redundancy does not result in a loss of performance.</p>"},{"location":"level101/systems_design/scalability/#refer","title":"Refer","text":"<ul> <li>https://www.allthingsdistributed.com/2006/03/a_word_on_scalability.html</li> </ul>"},{"location":"level101/systems_design/scalability/#scalability-akf-scale-cube","title":"Scalability: AKF Scale Cube","text":"<p>The Scale Cube is a model for segmenting services, defining microservices, and scaling products. It also creates a common language for teams to discuss scale-related options in designing solutions. The following section talks about certain scaling patterns based on our inferences from the AKF cube.</p>"},{"location":"level101/systems_design/scalability/#scalability-horizontal-scaling","title":"Scalability: Horizontal scaling","text":"<p>Horizontal scaling stands for cloning of an application or service such that work can easily be distributed across instances with absolutely no bias.</p> <p>Let's see how our monolithic application improves with this principle.</p> <p></p> <p>Here, DB is scaled separately from the application. This is to let you know each component\u2019s scaling capabilities can be different. Usually, web applications can be scaled by adding resources unless there is state stored inside the application. But DBs can be scaled only for Reads by adding more followers but Writes have to go to only one leader to make sure data is consistent. There are some DBs that support multi-leader writes but we are keeping them out of scope at this point.</p> <p>Apps should be able to differentiate between Reads and Writes to choose appropriate DB servers. Load balancers can split traffic between identical servers transparently.</p> <p>WHAT:  Duplication of services or databases to spread transaction load.</p> <p>WHEN TO USE:  Databases with a very high read-to-write ratio (5:1 or greater\u2014the higher the better). Because only read replicas of DBs can be scaled, not the Leader.</p> <p>HOW TO USE: Simply clone services and implement a load balancer. For databases, ensure that the accessing code understands the difference between a read and a write.</p> <p>WHY: Allows for the fast scale of transactions at the cost of duplicated data and functionality.</p> <p>KEY TAKEAWAYS: This is fast to implement, is a low cost from a developer effort perspective, and can scale transaction volumes nicely. However, they tend to be high cost from the perspective of the operational cost of data. The cost here means if we have 3 followers and 1 Leader DB, the same database will be stored as 4 copies in the 4 servers. Hence added storage cost.</p>"},{"location":"level101/systems_design/scalability/#refer_1","title":"Refer","text":"<ul> <li>https://learning.oreilly.com/library/view/the-art-of/9780134031408/ch23.html </li> </ul>"},{"location":"level101/systems_design/scalability/#scalability-pattern-load-balancing","title":"Scalability Pattern: Load Balancing","text":"<p>Improves the distribution of workloads across multiple computing resources, such as computers, a computer cluster, network links, central processing units, or disk drives. A commonly used technique is load balancing traffic across identical server clusters. A similar philosophy is used to load balance traffic across network links by ECMP, disk drives by RAID, etc.</p> <p>Aims to optimize resource use, maximize throughput, minimize response time, and avoid overload of any single resource. Using multiple components with load balancing instead of a single component may increase reliability and availability through redundancy. In our updated architecture diagram, we have 4 servers to handle app traffic instead of a single server.</p> <p>The device or system that performs load balancing is called a load balancer, abbreviated as LB.</p>"},{"location":"level101/systems_design/scalability/#refer_2","title":"Refer","text":"<ul> <li>https://en.wikipedia.org/wiki/Load_balancing_(computing)</li> <li>https://blog.envoyproxy.io/introduction-to-modern-network-load-balancing-and-proxying-a57f6ff80236</li> <li>https://learning.oreilly.com/library/view/load-balancing-in/9781492038009/</li> <li>https://learning.oreilly.com/library/view/practical-load-balancing/9781430236801/</li> <li>https://shop.oreilly.com/product/9780596000509.do</li> </ul>"},{"location":"level101/systems_design/scalability/#scalability-pattern-lb-tasks","title":"Scalability Pattern: LB Tasks","text":"<p>What does an LB do?</p>"},{"location":"level101/systems_design/scalability/#service-discovery","title":"Service discovery:","text":"<p>What backends are available in the system? In our architecture, 4 servers are available to serve App traffic. LB acts as a single endpoint that clients can use transparently to reach one of the 4 servers.</p>"},{"location":"level101/systems_design/scalability/#health-checking","title":"Health checking:","text":"<p>What backends are currently healthy and available to accept requests? If one out of the 4 App servers turns bad, LB should automatically short circuit the path so that clients don\u2019t sense any application downtime.</p>"},{"location":"level101/systems_design/scalability/#load-balancing","title":"Load balancing:","text":"<p>What algorithm should be used to balance individual requests across the healthy backends? There are many algorithms to distribute traffic across one of the four servers. Based on observations/experience, SRE can pick the algorithm that suits their pattern.</p>"},{"location":"level101/systems_design/scalability/#scalability-pattern-lb-methods","title":"Scalability Pattern: LB Methods","text":"<p>Common Load Balancing Methods</p>"},{"location":"level101/systems_design/scalability/#least-connection-method","title":"Least Connection Method","text":"<p>This method directs traffic to the server with the fewest active connections. Most useful when there are a large number of persistent connections in the traffic unevenly distributed between the servers. Works if clients maintain long-lived connections.</p>"},{"location":"level101/systems_design/scalability/#least-response-time-method","title":"Least Response Time Method","text":"<p>This method directs traffic to the server with the fewest active connections and the lowest average response time. Here, response time is used to provide feedback of the server\u2019s health.</p>"},{"location":"level101/systems_design/scalability/#round-robin-method","title":"Round Robin Method","text":"<p>This method rotates servers by directing traffic to the first available server and then moves that server to the bottom of the queue. Most useful when servers are of equal specification and there are not many persistent connections.</p>"},{"location":"level101/systems_design/scalability/#ip-hash","title":"IP Hash","text":"<p>The IP address of the client determines which server receives the request. This can sometimes cause skewness in distribution but is useful if apps store some state locally and need some stickiness.</p> <p>More advanced client/server-side example techniques:</p> <ul> <li>https://docs.nginx.com/nginx/admin-guide/load-balancer/</li> <li>https://cbonte.github.io/haproxy-dconv/2.2/intro.html#3.3.5</li> <li>https://twitter.github.io/finagle/guide/Clients.html#load-balancing</li> </ul>"},{"location":"level101/systems_design/scalability/#scalability-pattern-cachingcontent-delivery-networks-cdn","title":"Scalability Pattern: Caching\u2014Content Delivery Networks (CDN)","text":"<p>CDNs are added closer to the client\u2019s location. If the app has static data like images, JavaScript, CSS which don\u2019t change very often, they can be cached. Since our example is a content-sharing site, static content can be cached in CDNs with a suitable expiry.</p> <p></p> <p>WHAT: Use CDNs (content delivery networks) to offload traffic from your site.</p> <p>WHEN TO USE: When speed improvements and scale warrant the additional cost.</p> <p>HOW TO USE: Most CDNs leverage DNS to serve content on your site\u2019s behalf. Thus you may need to make minor DNS changes or additions and move content to be served from new subdomains.</p> <p>Eg <code>media-exp1.licdn.com</code> is a domain used by Linkedin to serve static content</p> <p>Here, a CNAME points the domain to the DNS of the CDN provider.</p> <pre><code>dig media-exp1.licdn.com +short\n\n2-01-2c3e-005c.cdx.cedexis.net.\n</code></pre> <p>WHY: CDNs help offload traffic spikes and are often economical ways to scale parts of a site\u2019s traffic. They also often substantially improve page download times.</p> <p>KEY TAKEAWAYS: CDNs are a fast and simple way to offset the spikiness of traffic as well as traffic growth in general. Make sure you perform a cost-benefit analysis and monitor the CDN usage. If CDNs have a lot of cache misses, then we don\u2019t gain much from CDN and are still serving requests using our compute resources. </p>"},{"location":"level101/systems_design/scalability/#scalability-microservices","title":"Scalability: Microservices","text":"<p>This pattern represents the separation of work by service or function within the application. Microservices are meant to address the issues associated with growth and complexity in the codebase and datasets. The intent is to create fault isolation as well as to reduce response times.</p> <p>Microservices can scale transactions, data sizes, and codebase sizes. They are most effective in scaling the size and complexity of your codebase. They tend to cost a bit more than horizontal scaling because the engineering team needs to rewrite services or, at the very least, disaggregate them from the original monolithic application.</p> <p></p> <p>WHAT: Sometimes referred to as scale through services or resources, this rule focuses on scaling by splitting datasets, transactions, and engineering teams along verb (services) or noun (resources) boundaries.</p> <p>WHEN TO USE: Very large datasets where relations between data are not necessary. Large, complex systems where scaling engineering resources requires specialization.</p> <p>HOW TO USE:  Split up actions by using verbs, or resources by using nouns, or use a mix. Split both the services and the data along the lines defined by the verb/noun approach.</p> <p>WHY: Allows for efficient scaling of not only transactions but also very large datasets associated with those transactions. It also allows for the efficient scaling of teams.</p> <p>KEY TAKEAWAYS: Microservices allow for efficient scaling of transactions, large datasets, and can help with fault isolation. It helps reduce the communication overhead of teams. The codebase becomes less complex as disjoint features are decoupled and spun as new services thereby letting each service scale independently specific to its requirement.</p>"},{"location":"level101/systems_design/scalability/#refer_3","title":"Refer","text":"<ul> <li>https://learning.oreilly.com/library/view/the-art-of/9780134031408/ch23.html </li> </ul>"},{"location":"level101/systems_design/scalability/#scalability-sharding","title":"Scalability: Sharding","text":"<p>This pattern represents the separation of work based on attributes that are looked up to or determined at the time of the transaction. Most often, these are implemented as splits by requestor, customer, or client.</p> <p>Very often, a lookup service or deterministic algorithm will need to be written for these types of splits.</p> <p>Sharding aids in scaling transaction growth, scaling instruction sets, and decreasing processing time (the last by limiting the data necessary to perform any transaction). This is more effective at scaling growth in customers or clients. It can aid with disaster recovery efforts, and limit the impact of incidents to only a specific segment of customers.</p> <p></p> <p>Here the auth data is sharded based on user names so that DBs can respond faster as the amount of data DBs have to work on has drastically reduced during queries.</p> <p>There can be other ways to split </p> <p></p> <p>Here the whole data center is split and replicated and clients are directed to a data center based on their geography. This helps in improving performance as clients are directed to the closest data center and performance increases as we add more data centers. There are some replication and consistency overhead with this approach one needs to be aware of. This also gives fault tolerance by rolling out test features to one site and rollback if there is an impact to that geography.</p> <p>WHAT: This is very often a split by some unique aspect of the customer such as customer ID, name, geography, and so on.</p> <p>WHEN TO USE: Very large, similar datasets such as large and rapidly growing customer bases or when the response time for a geographically distributed customer base is important.</p> <p>HOW TO USE: Identify something you know about the customer, such as customer ID, last name, geography, or device, and split or partition both data and services based on that attribute.</p> <p>WHY: Rapid customer growth exceeds other forms of data growth, or you have the need to perform fault isolation between certain customer groups as you scale.</p> <p>KEY TAKEAWAYS: Shards are effective at helping you to scale customer bases but can also be applied to other very large datasets that can\u2019t be pulled apart using the microservices methodology.</p>"},{"location":"level101/systems_design/scalability/#refer_4","title":"Refer","text":"<ul> <li>https://learning.oreilly.com/library/view/the-art-of/9780134031408/ch23.html</li> </ul>"},{"location":"level101/systems_design/scalability/#applications-in-sre-role","title":"Applications in SRE role","text":"<ol> <li>SREs in coordination with the network team work on how to map users' traffic to a particular site. https://engineering.linkedin.com/blog/2017/05/trafficshift--load-testing-at-scale</li> <li>SREs work closely with the Dev team to split monoliths to multiple microservices that are easy to run and manage</li> <li>SREs work on improving Load Balancers' reliability, service discovery, and performance.</li> <li>SREs work closely to split Data into shards and manage data integrity and consistency.  https://engineering.linkedin.com/espresso/introducing-espresso-linkedins-hot-new-distributed-document-store</li> <li>SREs work to set up, configure, and improve the CDN cache hit rate.</li> </ol>"},{"location":"level102/containerization_and_orchestration/conclusion/","title":"Conclusion","text":"<p>In this sub-module we have toured the world of containers starting from why we use containers, how containers evolved from the virtual machine past (though they are, in no means, obsolete) and how they are different from virtual machines. We then saw how containers are implemented with emphasis on cgroups and namespaces along with some hands-on exercises. Finally we concluded our journey with container orchestration where we learnt a bit of Kubernetes with some practical examples.</p> <p>Hope this module gives you enough knowledge and interest to continue learning and applying these technologies in greater depth!</p>"},{"location":"level102/containerization_and_orchestration/containerization_with_docker/","title":"Containerization With Docker","text":""},{"location":"level102/containerization_and_orchestration/containerization_with_docker/#introduction","title":"Introduction","text":"<p>Docker has gained huge popularity among other container engines since it was released to the public in 2013. Here are some of the reasons why Docker so popular:</p> <ul> <li>Improved portability</li> </ul> <p>Docker containers can be shipped and run across environments be it local machine, on-prem or    cloud instances in the form of Docker images. Compared to docker containers, LXC containers have more machine specifications. - Lighter weight</p> <p>Docker images are light weight compared to VM images. For example, an Ubuntu 18.04 VM size is about 3GB whereas the docker image is 45MB!</p> <ul> <li>Versioning of container images</li> </ul> <p>Docker supports maintaining multiple versions of images which makes it easier to look up the history of an image and even rollback.</p> <ul> <li>Reuse of images</li> </ul> <p>Since Docker images are in the form of layers, one image can be used as base on top of which new images are built. For example, Alpine is a light weight image (5MB) which is commonly used as a base image. Docker layers are managed using storage drivers.</p> <ul> <li>Community support</li> </ul> <p>Docker hub is a container registry where anyone logged in can upload or download a container image. Docker images of popular OS distros are regularly updated in docker hub and receive large community support.</p> <p>Let\u2019s look at some terms which come up during our discussion of Docker.</p>"},{"location":"level102/containerization_and_orchestration/containerization_with_docker/#docker-terminology","title":"Docker terminology","text":"<ul> <li>Docker images</li> </ul> <p>Docker image contains the executable version of the application along with the dependencies (config files, libraries, binaries) required for the application to run as a standalone container. It can be understood as a snapshot of a container. Docker images are present as layers on top of the base layer. These layers are the ones that are versioned. The most recent version of layer is the one that is used on top of the base image.</p> <p><code>docker image ls</code> lists the images present in the host machine.</p> <ul> <li>Docker containers</li> </ul> <p>Docker container is the running instance of the docker image. While images are static, containers created from the images can be executed into and interacted with. This is actually the \u201ccontainer\u201d from the previous sections of the module.</p> <p><code>docker run</code>  is the command used to instantiate containers from images.</p> <p><code>docker ps</code> lists docker containers currently running in the host machine.</p> <ul> <li>Docker file</li> </ul> <p>It is a plain text file of instructions based on which an image is assembled by docker engine (daemon, to be precise). It contains information on base image, ENV variables to be injected.</p> <p><code>docker build</code> is used to build images from dockerfile.</p> <ul> <li>Docker hub</li> </ul> <p>It is Docker\u2019s official container registry of images. Any user with a docker login can upload custom images to Docker hub using <code>docker push</code> and fetch images using <code>docker pull</code>.</p> <p>Having known the basic terminologies let\u2019s look at how docker engine works; how CLI commands are interpreted and container life-cycle is managed.</p>"},{"location":"level102/containerization_and_orchestration/containerization_with_docker/#components-of-docker-engine","title":"Components of Docker engine","text":"<p>Let\u2019s start with the diagram of Docker Engine to understand better:</p> <p></p> <p>The docker engine follows a client-server architecture. It consists of 3 components:</p> <ul> <li>Docker client</li> </ul> <p>This is the component the user directly interacts with. When you execute docker commands which we saw earlier (push, pull, container ls, image ls) , we are actually using the docker client. A single docker client can communicate with multiple docker daemons.</p> <ul> <li>REST API</li> </ul> <p>Provides an interface for the docker client and daemon to communicate.</p> <ul> <li>Docker Daemon (server)</li> </ul> <p>This is the main component of the docker engine. It builds images from dockerfile, fetches images from docker registry, pushes images to the registry, stops, starts containers etc. It also manages networking between containers.</p>"},{"location":"level102/containerization_and_orchestration/containerization_with_docker/#lab","title":"LAB","text":"<p>The official docker github provides labs at several levels for learning Docker. We're linking one of the labs which we found great for people beginning from scratch. Please follow the labs in this order:</p> <ol> <li> <p>Setting up local environment for the labs</p> </li> <li> <p>Basics for using docker CLI</p> </li> <li> <p>Creating and containerizing a basic Flask app</p> </li> </ol> <p>Here is another beginner level lab for dockerizing a MERN (Mongo + React + Express) application and it\u2019s easy to follow along.</p>"},{"location":"level102/containerization_and_orchestration/containerization_with_docker/#advanced-features-of-docker","title":"Advanced features of Docker","text":"<p>While we have covered the basics of containerization and how a standalone application can be dockerized, processes in the real world need to communicate with each other. This need is particularly prevalent in applications which follow a microservice architecture.  </p> <p>Docker networks</p> <p>Docker networks facilitate the interaction between containers running on the same hosts or even different hosts. There are several options provided through docker network command which specifies how the container interacts with the host and with other containers. The <code>host</code> option allows sharing of network stack with the host, <code>bridge</code> allows communication between containers running on the same host but not external to the host, <code>overlay</code> facilitates interaction between containers across hosts attached to the same network and <code>macvlan</code> which assigns a separate MAC address to a container for legacy containers are some important types of networks supported by Docker.  This however is outside the scope of this module. The official documentation on docker networks itself is a good place to start.</p> <p>Volumes</p> <p>Apart from images, containers and networks, Docker also provides the option to create and mount volumes within containers. Generally, data within docker containers is non-persistent i.e once you kill the container the data is lost. Volumes are used for storing persistent data in containers. This Docker lab is a great place to start playing with volumes.</p> <p>In the next section we see how container deployments are orchestrated with Kubernetes.</p>"},{"location":"level102/containerization_and_orchestration/intro/","title":"Containers and orchestration","text":""},{"location":"level102/containerization_and_orchestration/intro/#introduction","title":"Introduction","text":"<p>Containers, Docker and Kubernetes are \"cool\" terms that are being spoken of by everyone involved with software in some way. Let's dive into each of these pieces of technology at enough depth to understand what the whole deal is about!</p> <p>In this module we talk about the ins and outs of containers: the internals and usage of containers; how they are implemented, how to containerize your application and finally, how to deploy containerized applications on a large scale without losing your sleep. We'll also get our hands dirty by trying out a few lab exercises.</p>"},{"location":"level102/containerization_and_orchestration/intro/#prerequisites","title":"Prerequisites","text":"<ul> <li>Basic knowledge of linux will be helpful understanding the internals of containers</li> <li>Basic knowledge of shell commands (will come handy when we're containerizing applications)</li> <li>Knowledge of running a basic web application. You can go through our Python And Web module to gain familiarity with this.</li> </ul>"},{"location":"level102/containerization_and_orchestration/intro/#what-to-expect-from-this-course","title":"What to expect from this course","text":"<p>This module is divided into 3 sub-modules. In the first sub module, we will cover the internals of  containerization and why they\u2019re used for.</p> <p>The second sub-module introduces Docker, a popular container engine and contains lab exercises on dockerizing a basic webapp.</p> <p>The last module talks about container orchestration with Kubernetes and some lab exercises to show how it makes the lives of SREs easy.</p>"},{"location":"level102/containerization_and_orchestration/intro/#what-is-not-covered-under-this-course","title":"What is not covered under this course","text":"<p>We will not cover advanced docker and kubernetes concepts. However, we will be leading you to links and references from where you can pick them up as per your interest.</p>"},{"location":"level102/containerization_and_orchestration/intro/#course-contents","title":"Course Contents","text":"<p>The following topics has been covered in this course:</p> <ul> <li>Introduction to containers<ul> <li>What are containers</li> <li>Why containers</li> <li>Difference between virtual machines and containers</li> <li>How are containers implemented</li> <li>Namespaces</li> <li>Cgroups</li> <li>Container engines</li> </ul> </li> <li>Containerization with Docker<ul> <li>Introduction</li> <li>Basic docker terminology</li> <li>Components of Docker engine</li> <li>Hands-on</li> <li>Introduction to Advanced Docker</li> </ul> </li> <li>Container orchestration with Kubernetes<ul> <li>Introduction</li> <li>Motivation to use Kubernetes</li> <li>Kubernetes Architecture</li> <li>Hands-on</li> <li>Introduction to Advanced Kubernetes concepts</li> </ul> </li> <li>Conclusion</li> </ul>"},{"location":"level102/containerization_and_orchestration/intro_to_containers/","title":"Introduction To Containers","text":""},{"location":"level102/containerization_and_orchestration/intro_to_containers/#what-are-containers","title":"What are containers","text":"<p>Here's a popular definition of containers according to Docker, a popular containerization engine :</p> <p>A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another</p> <p>Let's break this down. A container is your code bundled along with its entire runtime environment. That includes your system libraries, binaries and config files needed for your application to run.</p>"},{"location":"level102/containerization_and_orchestration/intro_to_containers/#why-containers","title":"Why containers","text":"<p>You might wonder why we need to pack your application along with its dependencies. This is where the second part of the definition comes,</p> <p>...so the application runs quickly and reliably from one computing environment to another.</p> <p>Developers usually write code in their dev environment (or local machine), test it in one or two staging/test environments before pushing their code into production. Ideally, for reliably testing applications before pushing to production, we need all these environments to be uniform to a tee (underlying OS, system libraries etc).</p> <p>Of course, the ideal is hard to achieve especially when we're using a mix of on-prem (complete control) and cloud  infrastructure providers (more restrictive in terms of control of hardware and security options), a scenario which is more common today.</p> <p>This is exactly why we need to package not only the code but also the dependencies; so that your application runs reliably irrespective of which infrastructure or environment it runs on.</p> <p>We can run several containers on a single host. Due to how containers are implemented, each container has its own isolated environment within the same host. This means that a monolithic application can be broken down into micro-services and packaged into containers. Each microservice runs in the host machine in isolated environments. This is another reason why containers are used: separation of concerns.</p> <p>Providing isolated environments does not let the failure of one application in one container affect the other. This is called fault isolation. Isolation also gives the added benefit of increased security due to restricted visibility of processes in a container.</p> <p>Due to how most of the containerization solutions are implemented, we also have the option to cap the amount of resources consumed by applications running within a container. This is called resource limiting. Will will discuss this feature in more detail in the section on cgroups.</p>"},{"location":"level102/containerization_and_orchestration/intro_to_containers/#difference-between-virtual-machines-and-containers","title":"Difference between virtual machines and containers","text":"<p>Let's digress a little and go into some history. In the previous section we talked about how containers help us in achieving separation of concerns. Before the wide-spread usage of containers, virtualization was used for running applications in isolated environments in the same host (it\u2019s still being used today in some cases).</p> <p>In plain terms, virtualization is where we package software along with a copy of the OS on which it runs. This package is called a virtual machine (VM). The image of the OS bundled in the VM is called Guest OS. A component called Hypervisor sits between the Guest and the Host OS and is responsible for facilitating the access of the underlying OS\u2019s hardware to the Guest OS. You can learn more about hypervisors here.</p> <p></p> <p>Similar to how multiple containers can be run in a single host machine, multiple VMs can be run on a single host and in this way, it\u2019s possible to run applications (or each microservice) in a separate VM and achieve separation of concerns. </p> <p>The main focus here is on the size of the VMs and containers. VMs come along with a copy of the guest operating system and therefore are heavy-weight compared to containers. If you\u2019re more interested in comparison of VMs and containers, you can check these articles from Backblaze and NetApp.</p> <p>While it is possible to run an operating system on a host with an incompatible kernel using hypervisors (e.g Windows 10 VM on CentOS 7), in cases where kernels can be shared (e.g Ubuntu on CentOS 7) containers are preferred over VMs due to the size factor. Sharing kernels, as you will see later, also gives containers many performance benefits over VMs like quicker boot-ups. Let\u2019s look at the diagram of how containers work.</p> <p></p> <p>Comparing the two diagrams, we notice two things:</p> <ul> <li> <p>Containers do not have a separate (guest) OS</p> </li> <li> <p>Container engine is the intermediary between containers and Host OS. It is used to facilitate the life-cycle of a container on the Host OS (it is not a necessity, however).</p> </li> </ul> <p>The next section explains in detail how containers share the same operating system (kernel, to be precise) as the host machine and yet provide isolated environments for applications to run.</p>"},{"location":"level102/containerization_and_orchestration/intro_to_containers/#how-are-containers-implemented","title":"How are containers implemented","text":"<p>We\u2019ve talked about how containers, unlike virtual machines, share the same kernel as the host operating system and provide isolated environments for applications to run. This is achieved without the overhead of running a guest operating system on the host OS, thanks to two features of linux kernel called cgroups and kernel namespaces.</p> <p>Now that we are touching upon the internals of containers, it would be appropriate to give a more technically accurate representation of what they are. A container is a linux process or a group of linux processes which is restricted in - visibility into processes outside the container (implemented using namespace) - quantity of resources it can use (implemented using cgroups)  and  - system calls that can be made from the container. Refer seccomp, if interested in knowing more.</p> <p>These restrictions are what make a containerized application remain isolated from other processes running in the same host. </p> <p>Now let\u2019s talk about namespaces and cgroup in a little more detail.</p>"},{"location":"level102/containerization_and_orchestration/intro_to_containers/#namespaces","title":"Namespaces","text":"<p>Visibility of processes inside a container should be restricted within itself. This is what linux namespaces do. The idea is that processes within a namespace can\u2019t affect those which it can\u2019t \u201csee\u201d. Processes sharing a single namespace have identities, service and/or interfaces unique to the namespace they exist in. Here\u2019s a list of namespaces in linux:</p> <ul> <li>Mount</li> </ul> <p>Process groups sharing a mount namespace share a separate, private set of mount points and file system view. Any modifications made to these namespaced mount points are not visible outside the namespace. For example it is possible to have a /var within the a mount namespace which is different from /var in the host.</p> <ul> <li>PID</li> </ul> <p>A processes in a pid namespace have process ids which are unique only within the namespace. A process can be a root process (pid 1) in its own pid namespace and have an entire tree of processes under it.</p> <ul> <li>Network</li> </ul> <p>Each network namespace will have its own network device instances that can be configured with individual network addresses. Processes in the same network namespace can have their own ports and route tables.</p> <ul> <li>User</li> </ul> <p>User namespaces can have their own users and group ids. It\u2019s possible for a process using a non-privileged user in the host machine to have a root user identity within a user namespace.</p> <ul> <li>Cgroup</li> </ul> <p>Allows creation of cgroups which can be used only within the cgroup namespace. Cgroups will be covered in more detail in the following section.</p> <ul> <li>UTS</li> </ul> <p>This namespace has its own hostname and domain name IPC. Each IPC namespace has its own System V and POSIX message queues. </p> <p>As complex as it seems, creating namespaces in linux is quite simple. Let\u2019s see a quick demo to create a PID namespace. You\u2019ll need a linux based OS with sudoers permission to follow along.</p>"},{"location":"level102/containerization_and_orchestration/intro_to_containers/#demo-namespaces","title":"DEMO: namespaces","text":"<ul> <li>First we check which processes are running in the host system (output varies from system to system). Note the process with pid 1.</li> </ul> <ul> <li>Let\u2019s create a PID namespace with the unshare command and create a bash process in the namespace</li> </ul> <p>You can see that <code>ps aux</code> (which itself is a process launched in the PID namespace so created) can only see processes within its own namespace. Hence, the output shows only 2 processes running within the namespace. Also note, the root process (pid 1) in the namespace is not init but it is the bash shell which we specified while creating the namespace.</p> <ul> <li>Let\u2019s create another process in the same namespace which sleeps for 1000 seconds in the background. In my case the pid of the sleep process is 44 within the PID namespace.</li> </ul> <p></p> <p></p> <ul> <li>On a separate terminal, check for the process id of the sleep process as seen from the host.</li> </ul> <p></p> <p>Note the difference in pid (23844 in the host and 44 within the namespace) though both refer to the same process (start time and all other attributes are same).</p> <p>It\u2019s also possible to nest namespaces i.e create a pid namespace from another pid namespace. Try out <code>sudo nsenter -t 23844 --pid -r bash</code> to reenter the namespace and create another pid namespace within it. It should be fun to do!</p>"},{"location":"level102/containerization_and_orchestration/intro_to_containers/#cgroups","title":"Cgroups","text":"<p>A cgroup can be defined as a set of processes whose usage of resources is metered and monitored. The resources can be memory pages, disk i/o, CPU etc. In fact, cgroups are classified based on which resource the limit is imposed on and nature of action taken when a limit is violated.</p> <p>The component in the cgroup which tracks resource utilization and controls the behaviour of processes in a cgroup is called resource-subsystem or resource controller.</p> <p>Following is the set of resource controllers and their function according to RHEL\u2019s introduction to cgroups:</p> <ul> <li>blkio \u2014 this subsystem sets limits on input/output access to and from block devices such as physical drives (disk, solid state, or USB).</li> <li>cpu \u2014 this subsystem uses the scheduler to provide cgroup processes access to the CPU. cpuacct \u2014 this subsystem generates automatic reports on CPU resources used by processes in a cgroup.</li> <li>cpuset \u2014 this subsystem assigns individual CPUs (on a multicore system) and memory nodes to processes in a cgroup.</li> <li>devices \u2014 this subsystem allows or denies access to devices by processes in a cgroup.</li> <li>freezer \u2014 this subsystem suspends or resumes processes in a cgroup.</li> <li>memory \u2014 this subsystem sets limits on memory use by processes in a cgroup and generates automatic reports on memory resources used by those processes.</li> </ul> <p>Cgroups follow a hierarchical, tree-like structure for each resource controller i.e one cgroup exists for each controller. Each cgroup in a hierarchy inherits certain attributes (e.g limits) from its parent cgroup.</p> <p>Let\u2019s try out a quick demo with memory cgroups to wrap our heads around the above ideas. You\u2019ll need a linux based OS (here, RedHat) with sudo permission to follow along.</p>"},{"location":"level102/containerization_and_orchestration/intro_to_containers/#demo-cgroups","title":"DEMO: cgroups","text":"<ul> <li>Let\u2019s start by checking if cgroup tools are installed in your machine. Execute <code>mount | grep \"^cgroup\"</code>. If you have the tools installed you\u2019ll see a output like this:</li> </ul> <p>If not, install the tools with <code>sudo yum install libcgroup-tools -y</code>.</p> <ul> <li>Now, we create a memory cgroup called mem_group with \u201croot\u201d as the owner of the cgroup.  Command executed <code>sudo cgcreate -a root -g memory:mem_group</code>. Verify that cgroup is created. </li> </ul> <p></p> <p><code>/sys/fs/cgroup/&lt;cgroup type&gt;</code> is the pseudo filesystem where a newly created cgroup is added as a sub-group.</p> <ul> <li>Memory cgroup puts a limit on the memory usage of processes in the cgroup. Let\u2019s see what the limits are for mem_group. The file for checking the memory limit is memory.limit_in_bytes(more information here , if you\u2019re interested).</li> </ul> <p></p> <ul> <li>Note that mem_group has inherited the limit from its parent cgroup</li> </ul> <p></p> <ul> <li>Now, let\u2019s reduce the memory usage limit to 20KB for the purpose of our demo (the actual limit is rounded off to the nearest power of 2).</li> </ul> <p></p> <p>This limit is too low and hence most of the processes attached to mem_group should be OOM killed.</p> <ul> <li>Create a new shell and attach it to the cgroup. We need sudo permissions for this.</li> </ul> <p></p> <p>The process is OOM killed as expected. You can confirm the same with dmesg logs (mm_fault_error).</p> <p>If you want to try out a more in-depth exercise on cgroups, check out this tutorial from Geeks for Geeks.</p> <p>Let\u2019s come back to containers again. Containers share the same kernel as the underlying host operating system and provide an isolated environment of the application within. Cgroups help in managing resources used by processes within a container and namespaces help isolate network stack, pids, users, group ids and mount points in a container from another container running on the same host.</p> <p>Of course, there are more components to containers which truly make it fully functional but that discussion is out of scope of this module.</p>"},{"location":"level102/containerization_and_orchestration/intro_to_containers/#container-engine","title":"Container engine","text":"<p>Container engines ease the process of creating and managing containers in a host machine. How?</p> <ul> <li>The container creation workflow typically begins with a container image. A container image is a packaged, portable version of the target application bundled with all dependencies for it to run.</li> <li>These container images are either available on the host machine (container host) from previous builds or need to be pulled from a remote repository of images. Sometimes the container engine might need to build the container image from a set of instructions.</li> <li>Finally once the container image is fetched/built, the container engine unpacks the image and creates an isolated environment for the application as per the image specifications. </li> <li>The files in the container image are then mounted to the isolated environment to get the  application up and running within the container.</li> </ul> <p>There are several container engines available like Docker, RKT, LXC (one of the first container engines) which require different image formats (Docker, LXD). OCI (Open Container Initiative) is a collaborative project started by Docker that aims to standardize container runtime specifications and image formats across vendors. OCI FAQ section is a good place to start if you\u2019re curious about this project. We will focus on Docker in the next section.</p>"},{"location":"level102/containerization_and_orchestration/orchestration_with_kubernetes/","title":"Orchestration With Kubernetes","text":""},{"location":"level102/containerization_and_orchestration/orchestration_with_kubernetes/#introduction","title":"Introduction","text":"<p>Now we finally arrive at the most awaited part: running and managing containers at scale. So far, we have seen how Docker facilitates managing the life-cycle of containers and provides improved portability of applications. Docker does provide a solution for easing the deployment of containers on a large scale ( you can check out Docker Swarm, if interested) which integrates well with Docker containers. However, Kubernetes has become the de-facto tool for orchestrating the management of microservices (as containers) in large distributed environments. </p> <p>Let\u2019s see the points of interest for us, SREs, to use container orchestration tools and Kubernetes in particular.</p>"},{"location":"level102/containerization_and_orchestration/orchestration_with_kubernetes/#motivation-to-use-kubernetes","title":"Motivation to use Kubernetes","text":"<ul> <li>Ease of usage</li> </ul> <p>Though there is a steep learning curve associated with Kubernetes, once learnt , can be used as  a one stop tool to manage your microservices. With a single command it is possible to deploy full fledged production ready environments. The desired state of an application needs to be recorded as a YAML manifest and Kubernetes manages the application for you.</p> <ul> <li>Ensure optimum usage of resources</li> </ul> <p>We can specify limits on resources used by each container in a deployment. We can also specify our choice of nodes where Kubernetes can schedule nodes to be deployed (e.g microservices with high CPU consumption can be instructed to be deployed in high compute nodes).</p> <ul> <li>Fault tolerance</li> </ul> <p>Self-healing is built into basic resource types of Kubernetes. This removes the headache of designing a fault tolerant application system from scratch. This applies especially to stateless applications.</p> <ul> <li>Infrastructure agnostic</li> </ul> <p>Kubernetes does not have vendor lock-in. It can be set up in multiple cloud environments or in on-prem data centers. </p> <ul> <li>Strong community support and documentation</li> </ul> <p>Kubernetes is open-source and many technologies like operators, service mesh etc. have been built by the community to manage and monitor Kubernetes-orchestrated applications better.</p> <ul> <li>Extensible and customisable</li> </ul> <p>We can build our custom resource definitions which fit our use case for managing applications and use Kubernetes to manage them (with custom controllers).</p> <p>You can check out this article if you are more interested in this topic.</p>"},{"location":"level102/containerization_and_orchestration/orchestration_with_kubernetes/#architecture-of-kubernetes","title":"Architecture of Kubernetes","text":"<p>Here\u2019s a diagram (from the official Kubernetes documentation) containing different components which make Kubernetes work:</p> <p></p> <p>Kubernetes components can be divided into two parts: control plane components and data plane components. </p> <p>A Kubernetes cluster consists of 1 or more host machines (called nodes) where the containers managed by Kubernetes are run. This constitutes the data plane (or node plane). </p> <p>The brain of Kubernetes which responds to events from the node plane (e.g create a pod, replicas mismatch) and does the main orchestration is called the control plane. All control plane components are typically installed in a master node. This master node does not run any user containers.</p> <p>The Kubernetes components themselves are run as containers wrapped in Pods (which is the most basic kubernetes resource object).</p> <ul> <li>Control plane components:</li> <li>kube-apiserver</li> <li>etcd</li> <li>kube-scheduler</li> <li>kube-controller-manager</li> <li>Node plane components</li> <li>kubelet</li> <li>kube-proxy</li> </ul> <p>This workflow might help you understand the working on components better:</p> <ul> <li> <p>An SRE installs <code>kubectl</code> in their local machine. This is the client which interacts with the Kubernetes control plane (and hence the cluster).</p> </li> <li> <p>They create a YAML file, called manifest which specifies the desired state of the resource (e.g a deployment names \u201cfrontend\u201d needs 3 pods to always be running)</p> </li> <li> <p>When they issue a command to create objects based in the YAML file, the kubectl CLI tool sends a rest API request to the <code>kube-apiserver</code>.</p> </li> <li> <p>If the manifest is valid, it is stored as key value pairs in the <code>etcd</code> server on the control plane.</p> </li> <li> <p><code>kube-scheduler</code> chooses which nodes to put the containers on (basically schedules them)</p> </li> <li> <p>There are controller processes (managed by <code>kube-controller</code> manager) which makes sure the current state of the cluster is equivalent to the desired state (here, 3 pods are indeed running in the cluster -&gt; all is fine).</p> </li> <li> <p>On the node plane side, <code>kubelet</code> makes sure that pods are locally kept in running state.</p> </li> </ul>"},{"location":"level102/containerization_and_orchestration/orchestration_with_kubernetes/#lab","title":"LAB","text":""},{"location":"level102/containerization_and_orchestration/orchestration_with_kubernetes/#prerequisites","title":"Prerequisites","text":"<p>The best way to start this exercise is to use a Play with kubernetes lab. </p> <p>The environment gets torn down after 4 hours. So make sure that you save your files if you want to resume them. For persistent kubernetes clusters, you can set it up either in your local (using minikube) or you can create a kubernetes cluster in Azure, GCP or any other cloud provider.</p> <p>Knowledge of YAML is nice to have for understanding the manifest files.</p>"},{"location":"level102/containerization_and_orchestration/orchestration_with_kubernetes/#hands-on","title":"Hands-on","text":""},{"location":"level102/containerization_and_orchestration/orchestration_with_kubernetes/#lab-1","title":"Lab 1:","text":"<p>We are going to create an object called Pod which is the most basic unit for running a container in Kubernetes. Here, we will create a pod called \u2018nginx-pod\u201d which contains an nginx container called \u201cweb\u201d. We will also expose port 80 in the container so that we can interact with the nginx container. Save the below manifest in a file called nginx-pod.yaml</p> <pre><code>apiVersion: v1                  #[1]\nkind: Pod                       #[2]\nmetadata:                       #[3]\n name: nginx-pod                #[4]\n labels:                        #[5]\n   app: nginx      \nspec:                           #[6]\n containers:                    #[7]\n   - name: web                  #[8]\n     image: nginx               #[9]\n     ports:                     #[10]\n       - name: web              #[11]\n         containerPort: 80      #[12]\n         protocol: TCP          #[13]\n</code></pre> <p>Let\u2019s very briefly understand what\u2019s here:</p> <ul> <li><code>#[2]</code> - kind: The \u201ckind\u201d of object that\u2019s being created. Here it is a Pod</li> <li><code>#[1]</code> - apiVersion: The apiVersion of the \u201cPod\u201d resource. There could be minor changes in the values or keys in the yaml file if the version varies.</li> <li><code>#[3]</code> - metadata: The metadata section of the file where pod labels and name is given</li> <li><code>#[6]</code> - spec: This is the main part where the things inside the pod are defined</li> </ul> <p>These are not random key value pairs! They have to be interpretable by the kubeapiserver. You can check which key value pairs are optional/mandatory using <code>kubectl explain pod</code> command. Do try it out!</p> <ul> <li>Apply the manifest using the command <code>kubectl apply -f nginx-pod.yaml</code>. This creates the \u201cnginx-pod\u201d pod in the kubernetes cluster.</li> </ul> <p></p> <ul> <li>Verify that the pod is in running state using <code>kubectl get pod</code>.</li> </ul> <p></p> <p>It shows that nginx-pod is in Running state. 1/1 indicates that out of 1 out of 1 container(s) inside the pod is healthy.</p> <ul> <li>To check if the container running in \u201cnginx-pod\u201d is indeed \u201cweb\u201d we do the <code>kubectl describe pod/nginx-pod</code> command. This gives a lengthy output with a detailed description of the pod and the events  that happened since the pod was created. This command is very useful for debugging.  The part we are concerned here is this:</li> </ul> <p></p> <p>You can see \u201cweb\u201d under the Containers section with Image as nginx. This is what we are looking for.</p> <ul> <li>How do we access the welcome page of nginx \u201cweb\u201d container? In the describe command you can see the IP address of the pod.  Each pod is assigned an IP address on creation.</li> </ul> <p></p> <p>Here, this is 10.244.1.3 </p> <ul> <li> <p>Issue a curl request from the host <code>curl 10.244.1.3:80</code>. You will get the welcome page!</p> </li> <li> <p>Let\u2019s say we want to use a specific tag of nginx (say 1.20.1) in the same pod i.e we want to modify some property of the pod. You can try editing nginx-pod.yaml (image: nginx:1.20.1 in #[9])and reapplying (step 2.). It will create a new container in the same pod with the new image.</p> </li> </ul> <p>A container is created within the pod but the pod is the same. You can verify by checking the pod start time in describe command. It would show a much older time.</p> <p>What if we want to change the image to 1.20.1 for 1000 nginx pods? Stepping a little back, what if we want to create 1000 nginx pods. Of course, we can write a script but Kubernetes already offers a resource type called \u201cdeployment\u201d to manage large scale deployments better.</p>"},{"location":"level102/containerization_and_orchestration/orchestration_with_kubernetes/#lab-2","title":"Lab 2:","text":"<p>We\u2019ll go a step further to see how we can create more than a single instance of the nginx pod at the same time. </p> <ul> <li>We will first create Save the below manifest in a file called nginx-deploy.yaml</li> </ul> <pre><code>apiVersion: apps/v1\nkind: Deployment             #[1]\nmetadata:\n name: nginx-deployment\n labels:\n   app: nginx     \nspec:\n replicas: 3                 #[2]\n selector:\n   matchLabels:\n     app: nginx              #[3]\n template:                   #[4]\n   metadata:\n     labels:\n       app: nginx            #[5]\n   spec:\n     containers:\n     - name: web\n       image: nginx\n       ports:\n       - name: web\n         containerPort: 80\n         protocol: \"TCP\"\n</code></pre> <p>You can see that it is similar to a pod definition till spec (<code>#[1]</code> has Deployment as kind, api version is also different). </p> <p>Another thing interesting observation is the metadata and spec parts under <code>#[4]</code> is almost the same as the metadata and spec section under the Pod definition in Lab 1 (do go up and cross check this). What this implies is that we are deploying 3 nginx pods similar to Lab1. Also, the labels in matchLabels should be the same as labels under <code>#[4]</code>.</p> <ul> <li>Now apply the manifest using <code>kubectl apply -f nginx-deploy.yaml</code></li> </ul> <p></p> <p>Verify that 3 pods are indeed created.</p> <p></p> <p>If you\u2019re curious, check the output of <code>kubectl get deploy</code> and <code>kubectl describe deploy nginx-deployment</code>.</p> <ul> <li>Delete one of the 3 pods using <code>kubectl delete pod &lt;pod name&gt;</code>. After a few seconds again do <code>kubectl get pod</code>.</li> </ul> <p></p> <p>You can see that a new pod is spawned to keep the total number of pods as 3 (see AGE 15s compared to others created 27 minutes ago)! This is a demonstration of how Kubernetes does fault tolerance.</p> <p>This is a property of Kubernetes deployment object (kill the pod from Lab1, it won\u2019t be respawned :) )</p> <ul> <li>Let\u2019s say we want to increase the number of pods to 10. Try out <code>kubectl scale deploy  --replicas=10 nginx-deployment</code>.</li> </ul> <p></p> <p>You can see that 3/10 pods are older than the rest. This means Kubernetes has added 7 extra pods to scale the deployment to 10. This shows how simple it is to scale up and scale down containers using Kubernetes. </p> <ul> <li>Let\u2019s put all these pods behind a ClusterIP service. Execute <code>kubectl expose deployment nginx-deployment --name=nginx-service</code>. </li> </ul> <p></p> <p>Curl the IP corresponding to 10.96.114.184. This curl request reaches one of the 10 pods in the deployment \u201cnginx-deployment\u201d in a round robin fashion. What happens when we execute the <code>expose</code> command is that a kubernetes <code>Service</code> is created of type Cluster IP so that all the pods behind this service are accessible through a single local IP (10.96.114.184, here).</p> <p>It is possible to have a public IP instead (i.e an actual external load balancer) by creating a Service of type LoadBalancer. Do feel free to play around with it!</p> <p>The above exercises a pretty good exposure to using Kubernetes to manage large scale deployments. Trust me, the process is very similar to the above for operating 1000 deployments and containers too! While a Deployment object is good enough for managing stateless applications, Kubernetes provides other resources like Job, Daemonset, Cronjob, Statefulset etc. to manage special use cases. </p> <p>eAdditional labs: https://kubernetes.courselabs.co/ (Huge number of free follow-along exercises to play with Kubernetes)</p>"},{"location":"level102/containerization_and_orchestration/orchestration_with_kubernetes/#advanced-topics","title":"Advanced topics","text":"<p>Most often than not, microservices orchestrated with Kubernetes contain dozens of instances of resources like deployment, services and configs. The manifests for these applications can be auto- generated with Helm templates and passed on as Helm charts. Similar to how we have PiPy for python packages there are remote repositories like Bitnami where Helm charts (e.g for setting up a production-ready Prometheus or Kafka with a single click) can be downloaded and used. This is a good place to begin.</p> <p>Kubernetes provides the flexibility to create our custom resources (similar to Deployment or the Pod which we saw). For instance, if you want to create 5 instances of a resource with kind as  SchoolOfSre you can! The only thing is that you have to write your custom resource for it. You can also build a custom operator for your custom resource to take certain actions on the resource instance. You can check here for more information.</p>"},{"location":"level102/continuous_integration_and_continuous_delivery/cicd_brief_history/","title":"Brief History","text":""},{"location":"level102/continuous_integration_and_continuous_delivery/cicd_brief_history/#the-evolution-of-the-cicd","title":"The Evolution of the CI/CD","text":"<p>Traditional development approaches have been around for a very long time. The waterfall model has been widely used in both large and small projects and has been successful. Despite the success, it has a lot of drawbacks like longer cycle times or delivery.</p> <p>While multiple team members are working on the project, the code changes get accumulated and never integrated until the planned build date. The build usually happens on agreed cycles that range from a month to a quarter. This results in several integration issues and build failures as the developers were working on their features in silos.</p> <p>It was a nightmare situation for the operations teams/for anyone to deploy the new builds/releases to the production environment because of lack of proper documentation on every change and the configuration requirements. So, to deploy successfully, often it required hot fixes and immediate patches.</p> <p>Another big challenge was collaboration. It is rare that the developer meets the operation engineers and does not have a full understanding of the production environment. All these challenges have given rise to longer cycle times for the delivery of the code changes.</p> <p>Agile methodology prescribes the delivery of incremental delivery of features in multiple iterations. So, the developers commit their code changes in smaller increments and roll out more frequently. Every code commit triggers a new build, and the integration issues are identified much early.  This has improved the build process and thereby reduced the cycle time. This process is known as continuous integration or CI.</p> <p>The big barrier between the developers and the operation teams has been shrunken with the emergence of the trend where organizations are adapting to the DevOps and SRE disciplines. The collaboration between the developers and the operation teams is improved. Moreover, the use of the same tools and processes by both the teams has improved coordination and avoided conflicting understanding of the process. One of the main drivers in this regard is the continuous delivery (CD) process that ensures the incremental deployment of smaller changes. There are multiple pre-production environments also called the staging environments before deploying to production environments.</p>"},{"location":"level102/continuous_integration_and_continuous_delivery/cicd_brief_history/#cicd-and-devops","title":"CI/CD and DevOps","text":"<p>The term DevOps represents the combination of Development (Dev) and Operations (Ops) teams. That is bringing developers and operations teams together for more collaboration. The development team often wants to introduce more features and more changes while the operation teams are more focused on the stability of the application in production. A change is always taken as a threat by the operations team as it can shake the stability of the environment. DevOps is termed as a culture that introduces the processes to reduce the barriers between developers and operations.</p> <p>The collaboration between Dev and Ops allows better follow-up of end-to-end production deployments and more frequent deployments. So, thus CI/CD is a key element in the DevOps processes.</p>"},{"location":"level102/continuous_integration_and_continuous_delivery/conclusion/","title":"Conclusion","text":""},{"location":"level102/continuous_integration_and_continuous_delivery/conclusion/#applications-in-sre-role","title":"Applications in SRE Role","text":"<p>The Monitoring, Automation and Eliminating the toil are some of the core pillars of the SRE discipline. As an SRE, you may require spending about 50% of time on automating the repetitive tasks and to eliminate the toil. CI/CD pipelines are one of the crucial tools for the SRE. They help in delivering the quality application with the smaller and regular and more frequent builds. Additionally, the CI/CD metrics such as Deployment time, Success rate, Cycle time and Automated test success rate etc. are the key things to watch to improve the quality of the product thus improving the reliability of the applications.</p> <ul> <li>Infrastructure-as-code is one of the standard practices followed in SRE for automating the repetitive configuration tasks. Every configuration is maintained as code, so it can be deployed using CI/CD pipelines. It is important to deliver the configuration changes to the production environments through CI/CD pipelines to maintain the versioning, consistency of the changes across environments and to avoid manual errors.</li> <li>Often, as an SRE, you are required to review the application CI/CD pipelines and recommend additional stages such as static code analysis and the security and privacy checks in the code to improve the security and reliability of the product.</li> </ul>"},{"location":"level102/continuous_integration_and_continuous_delivery/conclusion/#conclusion","title":"Conclusion","text":"<p>In this chapter, we have studied the CI/CD pipelines with brief history on the challenges with the traditional build practices. We have also looked at how the CI/CD pipelines augments the SRE discipline. Use of CI/CD pipelines in software development life cycle is a modern approach in the SRE realm that helps achieve greater efficiency.</p> <p>We have also performed a hands-on lab activity on creating the CI/CD pipeline using Jenkins.</p>"},{"location":"level102/continuous_integration_and_continuous_delivery/conclusion/#references","title":"References","text":"<ol> <li>Continuous Integration(martinfowler.com)</li> <li>CI/CD for microservices - Azure Architecture Center | Microsoft Docs</li> <li>SREFoundationBlueprint_2 (devopsinstitute.com)</li> <li>Jenkins User Documentation</li> </ol>"},{"location":"level102/continuous_integration_and_continuous_delivery/continuous_delivery_release_pipeline/","title":"Continuous Delivery and Deployment","text":"<p>Continuous Delivery means deploying the application builds more frequently in the non-production environments such as SIT, UAT, INT and performing the integration tests and the acceptance tests automatically.</p> <p>In the CD, the tests are performed on the integrated application instead of the single microservice in the cases of microservice based application. The tests must include all the functional tests and the acceptance tests that may contain the UI tests. The build must be immutable in nature, that is the same package must be deployed across all the environments including the Production.</p> <p>The deployment to the Production is often manual after performing additional acceptance tests such as performance tests etc. So, the fully automated deployment to the Production environments is called the Continuous Deployment (whereas CD \u2013 Continuous delivery doesn\u2019t automatically deploy to Production). The continuous deployment must have a feature toggle so that a feature can be toggled off without the need for redeploying the code.</p> <p>Often, the deployment involves more than one production environment, for example in blue-green environments the application is first deployed to the blue environment and then to the green environment so that the downtime is not required.</p> <p></p> <p>Fig 3: Continuous Delivery Pipeline</p>"},{"location":"level102/continuous_integration_and_continuous_delivery/continuous_integration_build_pipeline/","title":"Continuous Integration","text":"<p>CI is a software development practice where members of a team integrate their work frequently. Each integration is verified by an automated build (including test) to detect integration errors as quickly as possible.</p> <p>Continuous integration requires that all the code changes be maintained in a single code repository where all the members can push the changes to their feature branches regularly. The code changes must be quickly integrated with the rest of the code and automated builds should happen and feedback to the member to resolve them early.</p> <p>There should be a CI server where it can trigger a build as soon as the code is pushed by a member. The build typically involves compiling the code and transforming it to an executable file such as JARs or DLLs etc. called packaging. It must also perform unit tests with code coverage. Optionally, the build process can have additional stages such as static code analysis and vulnerability checks etc.</p> <p>Jenkins, Bamboo, Travis CI, GitLab, Azure DevOps etc. are the few popular CI tools. These tools provide various plugins and integration such as ant, maven etc. for building and packaging, and Junit, selenium etc. are for performing the unit tests. SonarQube can be used for static code analysis and code security.</p> <p></p> <p>Fig 1: Continuous Integration Pipeline</p> <p></p> <p>Fig 2: Continuous Integration Process</p>"},{"location":"level102/continuous_integration_and_continuous_delivery/introduction/","title":"Introduction","text":""},{"location":"level102/continuous_integration_and_continuous_delivery/introduction/#prerequisites","title":"Prerequisites","text":"<ol> <li>Software Development and Maintenance</li> <li>Git</li> <li>Docker</li> </ol>"},{"location":"level102/continuous_integration_and_continuous_delivery/introduction/#what-to-expect-from-this-course","title":"What to expect from this course?","text":"<p>In this course, you will learn the basics of CI/CD and how it helps drive the SRE discipline in an organization. It also discusses the various DevOps tools in CI/CD practice and a hands-on lab session on Jenkins based pipeline. Finally, it will conclude by explaining the role in the growing SRE philosophy.</p>"},{"location":"level102/continuous_integration_and_continuous_delivery/introduction/#what-is-not-covered-under-this-course","title":"What is not covered under this course?","text":"<p>The course does not cover DevOps elements such as Infrastructure as a code, continuous monitoring applications and infrastructure comprehensively.</p>"},{"location":"level102/continuous_integration_and_continuous_delivery/introduction/#table-of-contents","title":"Table of Contents","text":"<ul> <li>What is CI/CD?</li> <li>Brief History to CI/CD and DevOps</li> <li>Continuous Integration</li> <li>Continuous Delivery and Deployment</li> <li>Jenkins based CI/CD pipeline - Hands-on</li> <li>Conclusion</li> </ul>"},{"location":"level102/continuous_integration_and_continuous_delivery/introduction_to_cicd/","title":"What is CI/CD?","text":"<p>Continuous Integration and Continuous Delivery, also known as CI/CD, is a set of processes that helps in faster integration of software code changes and deployment to the end user in a reliable manner. The more frequent integrations and deployments helps reduce the software development lifecycle.  There are three practices in CI/CD:</p> <ul> <li>Continuous Integration</li> <li>Continuous Delivery</li> <li>Continuous Deployment Let\u2019s look in detail at each of these in the coming sections.</li> </ul>"},{"location":"level102/continuous_integration_and_continuous_delivery/introduction_to_cicd/#the-benefits-of-cicd","title":"The Benefits of CI/CD","text":"<ol> <li>Significant reduction in integration problems.</li> <li>Teams can develop cohesive software more rapidly.</li> <li>Improved Collaboration between developers and operation teams can reduce the production integration issues.</li> <li>Faster delivery of new features with less friction</li> <li>Better debugging the production issues and fixing them in the next release/patch.</li> </ol>"},{"location":"level102/continuous_integration_and_continuous_delivery/jenkins_cicd_pipeline_hands_on_lab/","title":"CI/CD Pipeline - Hands-on","text":""},{"location":"level102/continuous_integration_and_continuous_delivery/jenkins_cicd_pipeline_hands_on_lab/#jenkins-based-cicd-pipeline","title":"Jenkins based CI/CD Pipeline","text":"<p>Jenkins is an open-source continuous integration server for orchestrating the CI/CD pipelines. It supports integration with several components, infrastructure such as git, cloud etc. that helps in complete software development life cycle.</p> <p>In this hands-on lab, let us: * Create a build pipeline (CI) for a simple java application. * Adding Test stage to build pipeline</p> <p>This hands-on is based on the Jenkins running on docker on your local workstation, designed for Windows OS. For Linux OS, please follow the demo</p> <p>Note: The hands-on lab is designed with Jenkins on the docker. However, the steps are applicable for the direct docker installation on your windows workstation as well.</p>"},{"location":"level102/continuous_integration_and_continuous_delivery/jenkins_cicd_pipeline_hands_on_lab/#installing-git-docker-and-jenkins","title":"Installing Git, Docker and Jenkins:","text":"<ul> <li>Install git command line tool on your workstation. (Follow this to install Git Locally\u00b7) </li> <li>Docker Desktop for windows is installed on the workstation. Follow the instructions to install docker. </li> <li>Ensure that your Docker for Windows installation is configured to run Linux Containers rather than Windows Containers. See the Docker documentation for instructions to switch to Linux containers.</li> <li>Refer this to run and setup the Jenkins on docker.</li> <li>Configure Jenkins with initial steps such as create an admin user etc. Follow Setup wizard.</li> <li>If you have installed the Jenkins on your local workstation, make sure the maven tool is installed. Follow this to installl maven.</li> </ul>"},{"location":"level102/continuous_integration_and_continuous_delivery/jenkins_cicd_pipeline_hands_on_lab/#forking-sample-java-application","title":"Forking Sample java application:","text":"<p>For this hands-on, let us fork a simple java application from the GitHub simple-java-maven-app. 1.  Sign up for the GitHub account Join GitHub \u00b7 GitHub. Once signed up, proceed to login. 2.  Open the simple-java-maven-app by clicking on this link  3.  On the top right corner, click on the \u2018Fork\u2019 to create a copy of the project to your GitHub account. (Refer Fork A Repo) 4.  Once forked, clone this repository to your local workstation. </p>"},{"location":"level102/continuous_integration_and_continuous_delivery/jenkins_cicd_pipeline_hands_on_lab/#create-jenkins-project","title":"Create Jenkins Project:","text":"<ol> <li>Login to the Jenkins portal at http://localhost:8080 using the admin account created earlier during Jenkins\u2019s setup.</li> <li>On your first login, the following screen will appear. Click on \u201cCreate a Job\u201d.</li> </ol> <p>Fig 4: Jenkins - Create a Job</p> <ol> <li>On the next screen, type simple-java-pipeline in the Enter an Item Name field. Select Pipeline from the list of items and click OK.</li> </ol> <p></p> <p>Fig 5: Jenkins - Create Pipeline</p> <ol> <li>Click the Pipeline tab at the top of the page to scroll down to the Pipeline section.</li> <li>From the Definition field, choose the Pipeline script from SCM option. This option instructs Jenkins to obtain your Pipeline from Source Control Management (SCM), which will be your locally cloned Git repository.</li> <li>From the SCM field, choose Git.</li> <li>In the Repository URL field, specify the directory path of your locally cloned repository from the Forking Sample Java application section above.</li> </ol> <p>Screen looks like below after entering the details.</p> <p></p> <p>Fig 6: Jenkins - Pipeline Configuration</p>"},{"location":"level102/continuous_integration_and_continuous_delivery/jenkins_cicd_pipeline_hands_on_lab/#create-build-pipeline-using-the-jenkinsfile","title":"Create Build pipeline using the Jenkinsfile:","text":"<p>Jenkinsfile is a script file containing the pipeline configuration and the stages and other instructions to Jenkins to create a pipeline from the file. This file will be saved at the root of the code repository. 1.  Using your favorite text editor or IDE, create and save a new text file with the name Jenkinsfile at the root of your local simple-java-maven-app Git repository. 2.  Copy the following declarative pipeline code and paste it into the empty Jenkinsfile. </p> <pre><code>pipeline {\n    agent {\n        docker {\n            image 'maven:3.8.1-adoptopenjdk-11' \n            args '-v /root/.m2:/root/.m2' \n        }\n    }\n    stages {\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package' \n            }\n        }\n    }\n}\n</code></pre> <p>Note: If you are running Jenkins on your local workstation without the docker, please change the agent to any as shown below so that it runs on the localhost. Please ensure that the maven tool is installed on your local workstation.</p> <pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package' \n            }\n        }\n    }\n}\n</code></pre> <p>In the above Jenkinsfile:  * We specified an agent where the pipeline should run. 'docker\u2019 in the agent section indicates to run a new docker container with the specified image. * In the stages section, we can define multiple steps as different stages. Here, we have a stage called \u2018Build\u2019, with the maven command for building the java application.</p> <ol> <li>Save your Jenkinsfile and commit and push to your forked repository. Run the following commands from the command prompt.</li> </ol> <pre><code>cd &lt;your local simple-java-maven-app repo cloned folder&gt;\ngit add .\ngit commit -m \"Add initial Jenkinsfile\"\ngit push origin master\n</code></pre> <ol> <li>Go to Jenkins portal on your browser and click on the Dashboard. Open the simple-java-pipeline and from the left-menu, click on Build Now.</li> </ol> <p></p> <p>Fig 7: Jenkins - Building the Pipeline</p> <ol> <li>Notice the build running under the Build History menu. Click on the build number and it shows the stages.</li> </ol> <p></p> <p>Fig 8: Jenkins - View Running Builds</p> <ol> <li>We have successfully created a build pipeline with single stage and ran it. We can check the logs by clicking on the Console Output menu.</li> </ol>"},{"location":"level102/continuous_integration_and_continuous_delivery/jenkins_cicd_pipeline_hands_on_lab/#additional-stages-in-the-build-pipeline","title":"Additional stages in the build pipeline:","text":"<p>In the previous section, we have created the pipeline with a single stage. Typically, your CI pipeline contains multiple stages such as Build, Test and other optional stages such Code scanning etc. In this section, let us add a Test stage to the build pipeline and run.</p> <ol> <li>Go back to your text editor/IDE and open Jenkinsfile and the Test stage shown below.</li> </ol> <pre><code>stage('Test') {\n            steps {\n                sh 'mvn test'\n            }\n            post {\n                always {\n                    junit 'target/surefire-reports/*.xml'\n                }\n            }\n        }\n</code></pre> <p>The Jenkinsfile looks like below after adding the Test stage.</p> <pre><code>pipeline {\n    agent {\n        docker {\n            image 'maven:3.8.1-adoptopenjdk-11' \n            args '-v /root/.m2:/root/.m2' \n        }\n    }\n    stages {\n        stage('Build') { \n            steps {\n                sh 'mvn -B -DskipTests clean package' \n            }\n        }\n        stage('Test') {\n            steps {\n                sh 'mvn test'\n            }\n            post {\n                always {\n                    junit 'target/surefire-reports/*.xml'\n                }\n            }\n        }\n    }\n}\n</code></pre> <ul> <li>Here the stage \u2018Test\u2019 is added which runs the maven command test.</li> <li>The post -&gt; always section ensures that this step is executed always after the steps are completed. The test report is available through Jenkins\u2019s interface.</li> </ul> <p>Note: If you are running Jenkins on your local workstation without the docker, please change the agent to any so that it runs on the localhost. Please ensure that the maven tool is installed on your local workstation.</p> <pre><code>pipeline {\n    agent any\n\n    stages {\u2026\n\n    }\n}\n</code></pre> <ol> <li>Save your Jenkinsfile and commit and push to your forked repository. Run the following commands from the command prompt.</li> </ol> <pre><code>cd &lt;your local simple-java-maven-app repo cloned folder&gt;\ngit add .\ngit commit -m \"Test stage is added to Jenkinsfile\"\ngit push origin master\n</code></pre> <ol> <li>Go to Jenkins portal on your browser and click on the Dashboard. Open the simple-java-pipeline and from the left-menu, click on Build Now.</li> <li>Notice the Build and Test stages are showing in the Build screen. </li> </ol> <p></p> <p>Fig 9: Jenkins - Viewing the Running Builds with Test stage Included</p> <p>We have now successfully created CI pipeline with two stages: Build and Test stages.</p>"},{"location":"level102/linux_intermediate/archiving_backup/","title":"Archiving and Backup","text":""},{"location":"level102/linux_intermediate/archiving_backup/#introduction","title":"Introduction","text":"<p>One of the things SREs make sure of is the services are up all the time (at least 99.99% of the time), but the amount of data generated at each server running those services are immense. This data could be logs, user data in the database, or any other kind of metadata. Hence we need to compress, archive, rotate, and Backup the data in a timely manner for data safety and to make sure we don\u2019t run out of space.</p>"},{"location":"level102/linux_intermediate/archiving_backup/#archiving","title":"Archiving","text":"<p>We usually archive the data that are no longer needed but are kept mostly for compliance purposes. This helps in storing the data into compressed format saving a lot of space. Below section is to familiarize with the archiving tools and commands.</p>"},{"location":"level102/linux_intermediate/archiving_backup/#gzip","title":"gzip","text":"<p>gzip is a program used to compress one or more files, it replaces the original file with a compressed version of the original file.</p> <p></p> <p>Here we can see that the messages log file is compressed to almost one-fifth of the original size and replaced with messages.gz. We can uncompress this file using gunzip command.</p>"},{"location":"level102/linux_intermediate/archiving_backup/#tar","title":"tar","text":"<p>tar program is a tool for archiving files and directories into a single file (often called tarball). This tool is usually used to prepare archives of files before it is transferred to a long term backup server. tar doesn\u2019t replace the existing files and folders but creates a new file with extension .tar . It provides lot of flag to choose from for archiving</p> Flags Description -c Creates archive -x Extracts the archive -f Creates archive with the given filename -t Displays or lists files in archived file -u Archives and adds to an existing archive file -v Displays verbose information -A Concatenates the archived file -z Compresses the tar file using gzip -j Compresses the tar file using bzip2 -W Verifies an archive file -r Updates or adds file or directory in already existing .tar file"},{"location":"level102/linux_intermediate/archiving_backup/#create-an-archive-with-files-and-folder","title":"Create an archive with files and folder","text":"<p>Flag <code>c</code> is used for creating the archive where <code>f</code> is the filename.</p> <p></p>"},{"location":"level102/linux_intermediate/archiving_backup/#listing-files-in-the-archive","title":"Listing files in the archive","text":"<p>We can use flag <code>t</code> for listing out what an archive contains.</p> <p></p>"},{"location":"level102/linux_intermediate/archiving_backup/#extract-files-from-the-archive","title":"Extract files from the archive","text":"<p>We can use flag <code>x</code> to unarchive the archive.</p> <p></p>"},{"location":"level102/linux_intermediate/archiving_backup/#backup","title":"Backup","text":"<p>Backup is a process of copying/duplicating the existing data, This backup can be used to restore the dataset in case of data loss. Data backup also becomes critical when the data is not needed in a day to day job but can be referred to as a source of truth and for compliance reasons in future. Different types of backup are :</p>"},{"location":"level102/linux_intermediate/archiving_backup/#incremental-backup","title":"Incremental backup","text":"<p>Incremental backup is the backup of data since the last backup, this reduces data redundancy and storage efficiency.</p>"},{"location":"level102/linux_intermediate/archiving_backup/#differential-backup","title":"Differential backup","text":"<p>Sometimes our data keeps on modifying/updating. In that case we take backup of changes that occurred since the last backup called differential backup.</p>"},{"location":"level102/linux_intermediate/archiving_backup/#network-backup","title":"Network backup","text":"<p>Network backup refers to sending out data over the network from the source to a backup destination in a client-server model. This backup destination can be centralized or decentralized. Decentralized backups are useful for disaster recovery scenarios.</p> <p><code>rsync</code> is one of the linux command which sync up file from one server to the destination server over the network.</p> <p></p> <p>The syntax for rsync goes like <code>rsync \\[options\\] &lt;source&gt; &lt;destination&gt;</code>. We can locate the file on the path specified after <code>:</code> (colon) in the \u201cdestination\u201d. If nothing is specified the default path is the home directory of the user used for backup. <code>/home/azureuser</code> in this case. You can always look for different options for rsync using the <code>man rsync</code> command.</p>"},{"location":"level102/linux_intermediate/archiving_backup/#cloud-backup","title":"Cloud Backup","text":"<p>There are various third parties which provide the backup of data to the cloud. These cloud backups are much more reliable than stored backups on local machines or any server without RAID configuration as these providers manage redundancy of data, data recovery along with the data security. Two most widely used cloud backup options are Azure backup (from Microsoft) and Amazon Glacier backup (from AWS).</p>"},{"location":"level102/linux_intermediate/bashscripting/","title":"Bash Scripting","text":""},{"location":"level102/linux_intermediate/bashscripting/#introduction","title":"Introduction","text":"<p>As an SRE, the Linux system sits at the core of our day to day work and so is bash scripting. It\u2019s a scripting language that is run by Linux Bash Interpreter. Until now we have covered a lot of features mostly on a command line, now we will use this command line as an interpreter to write programs that will ease our day to day job as an SRE.</p>"},{"location":"level102/linux_intermediate/bashscripting/#writing-the-first-bash-script","title":"Writing the first bash script:","text":"<p>We will start with a simple program, we will use Vim as the editor during the whole journey.</p> <pre><code>#!/bin/bash\n\n# This if my first bash script\n# Line starting with # is commented\n\necho \"Hello world!\"\n</code></pre> <p>The first line of the script starting with \u201c#!\u201d is called she-bang. This is simply to let the system which interpreter to use while executing the script.</p> <p>Any Line starting with \u201c#\u201d (other than #!) is referred to as comments in script and is ignored by the interpreter while executing the script. Line 6 shows the \u201cecho\u201d command that we would be running.</p> <p>We will save this script as \u201cfirstscript.sh\u201d and make the script executable using <code>chmod</code>.</p> <p></p> <p>Next thing is to run the script with the explicit path. We can see the desired \u201cHello World!\u201d as output.</p>"},{"location":"level102/linux_intermediate/bashscripting/#taking-user-input-and-working-with-variables","title":"Taking user input and working with variables:","text":"<p>Taking standard input using the <code>read</code> command and working with variables in bash.</p> <pre><code>#!/bin/bash\n\n#We will take standard input\n#Will list all files at the path\n#We will concate variable and string\n\necho \"Enter the path\"\nread path\n\necho \"How deep in directory you want to go:\"\nread depth\n\necho \"All files at path \" $path\n\ndu -d $depth -all -h $path\n</code></pre> <p>We are reading path in variable \u201cpath\u201d and variable \u201cdepth\u201d to list files and directories up to that depth. We concatenated strings with variables. We always use <code>$</code> (dollar-sign) to reference the value it contains.</p> <p></p> <p>We pass these variables to the <code>du</code> command to list out all the files and directories in that path upto the desired depth.</p>"},{"location":"level102/linux_intermediate/bashscripting/#exit-status","title":"Exit status:","text":"<p>Every command and script when it completes executing, returns an integer in the range from 0 to 255 to the system, this is called exit status. \u201c0\u201d denotes success of the command while non-zero return code usually indicates various kinds of errors.</p> <p></p> <p>We use <code>$?</code> special shell variable to get exit status of the last executed script or command.</p>"},{"location":"level102/linux_intermediate/bashscripting/#command-line-arguments-and-understanding-if-else-branching","title":"Command line arguments and understanding If \u2026 else branching:","text":"<p>Another way to pass some values to the script is using command line arguments. Usually command line arguments in bash are accessed by $ followed by the index. The 0th index refers to the file itself, <code>$1</code> to the first argument and so on. We use <code>$#</code> to check the count of arguments passed to the script.</p> <p>Making decisions in the programming language is it\u2019s integral part, and to tackle different conditions we use if \u2026 else statements or some more nested variant of it.</p> <p>The below script uses multiple concepts in one script. The aim of the script is to get some properties of the file.</p> <p>Line 4 to 7 is the standard example of \"if statement\" in bash. Syntax is as explained below:</p> <pre><code>If [ condition ]; then\n\nIf_block_to_execute\n\nelse\n\nelse_block_to_execute\n\nfi\n</code></pre> <p>fi is to close the if \u2026 else block. We are comparing count of argument($#) if it is equal to 1 or not. If not we prompt for only one argument and exit the script with status code 1(not a success). One or more if statements can exist without else statement but vice versa doesn\u2019t make any sense.</p> <p>Operator -ne is used to compare two integers, read as \u201cinteger1 not equal to integer 2\u201d. Other comparison operators are:</p> Operations Description num1 -eq num2 check if 1st number is equal to 2nd number num1 -ge num2 checks if 1st number is greater than or equal to 2nd number num1 -gt num2 checks if 1st number is greater than 2nd number num1 -le num2 checks if 1st number is less than or equal to 2nd number num1 -lt num2 checks if 1st number is less than 2nd number <pre><code>#!/bin/bash\n# This script evaluate the status of a file\n\nif [ $# -ne 1 ]; then\n    echo \"Please pass one file name as argument\"\n    exit 1\nfi\n\nFILE=$1\nif [ -e \"$FILE\" ]; then\n    if [ -f \"$FILE\" ]; then\n        echo \"$FILE is a regular file.\"\n    fi\n    if [ -d \"$FILE\" ]; then\n        echo \"$FILE is a directory.\"\n    fi\n    if [ -r \"$FILE\" ]; then\n        echo \"$FILE is readable.\"\n    fi\n    if [ -w \"$FILE\" ]; then\n        echo \"$FILE is writable.\"\n    fi\n    if [ -x \"$FILE\" ]; then\n        echo \"$FILE is executable/searchable.\"\n    fi\nelse\n    echo \"$FILE does not exist\"\n    exit 2\nfi\n\nexit 0\n</code></pre> <p>There are lots of file expressions to evaluate file,like in bash script \u201c-e\u201d in line 10 returns true if the file passed as argument exist, false otherwise. Below are the some widely used file expressions:</p> File Operations Description -e file File exists -d file File exists and is directory -f file File exists and is regular file -L file File exists and is symbolic link -r file File exists and has readable permission -w file File exists and has writable permission -x file File exists and has executable permission -s file File exists and size is greater than zero -S file File exists and is a network socket. <p></p> <p>Exit status is 2 when the file is not found. And if the file is found it prints out the properties it holds with exit status 0(success).</p>"},{"location":"level102/linux_intermediate/bashscripting/#looping-over-to-do-a-repeated-task","title":"Looping over to do a repeated task.","text":"<p>We usually come up with tasks that are mostly repetitive, looping helps us to code those repetitive tasks in a more formal manner. There are different types of loop statement we can use in bash:</p> Loop Syntax while while [ expression ]do\u00a0\u00a0\u00a0\u00a0\u00a0[ while_block_to_execute ]done for for variable in 1,2,3 .. ndo\u00a0\u00a0\u00a0\u00a0\u00a0[ for_block_to_execute ]done until until [ expression ]\u00a0do\u00a0\u00a0\u00a0\u00a0\u00a0[ until_block_to_execute ]done <pre><code>#!/bin/bash\n#Script to monitor the server\n\nhosts=`cat host_list`\n\nwhile true\ndo\n    for i in $hosts\n    do\n        h=\"$i\"\n        ping -c 1 -q \"$h\" &amp;&gt;/dev/null\n        if [ $? -eq 0 ]\n        then\n            echo `date` \"server $h alive\"\n        else\n            echo `date` \"server $h is dead\"\n        fi\n    done\n    sleep 60\ndone\n</code></pre> <p>Monitoring a server is an important part of being an SRE. The file \u201chost_list\u201d contains the list of host which we want to monitor.</p> <p>We used an infinite \u201cwhile\u201d loop that will sleep every 60seconds. And for each host in the host_list we want to ping that host and check if that ping was successful with its exit status, if it\u2019s successful we say server is live or it\u2019s dead.</p> <p></p> <p>The output of the script shows it is running every minute with the timestamp.</p>"},{"location":"level102/linux_intermediate/bashscripting/#function","title":"Function","text":"<p>Developers always try to make their applications/programs in modular fashion so that they don\u2019t have to write the same code every time and everywhere to carry out similar tasks. Functions help us achieve this.</p> <p>We usually call functions with some arguments and expect result based on that argument.</p> <p>The backup process we discussed in earlier section, we will try to automate that process using the below script and also get familiar with some more concepts like string comparison, functions and logical AND and OR operations.</p> <p>In the below code \u201clog_backup\u201d is a function which won\u2019t be executed until it is called.</p> <p>Line37 will be executed first where we will check the no. of arguments passed to the script.</p> <p>There are many logical operators like AND,OR, XOR etc.</p> Logical Operator Symbol AND &amp;&amp; OR | NOT ! <p>Passing the wrong argument to script \u201cbackup.sh\u201d will prompt for correct usage. We have to pass whether we want to have incremental backup of the directory or the full backup along with the path of the directory we want to backup. If we want the incremental backup we will an additional argument as a meta file which is used to store the information of previous backed up files.(usually a metafile is .snar extension).</p> <pre><code>#!/bin/bash\n#Scripts to take incremental and full backup\n\nbackup_dir=\"/mnt/backup/\"\ntime_stamp=\"`date +%d-%m-%Y-%Hh-%Mm-%Ss`\"\n\nlog_backup(){\n    if [ $# -lt 2 ]; then\n        echo \"Usage: ./backup.sh [backup_type] [log_path]\"\n        exit 1;\n    fi\n    if [ $1 == \"incremental\" ]; then\n        if [ $# -ne 3 ]; then\n            echo \"Usage: ./backup.sh [backup_type] [log_path] [meta_file]\"\n            exit 3;\n        fi\n        tar --create --listed-incremental=$3 --verbose --verbose --file=\"${backup_dir}incremental-${time_stamp}.tar\" $2\n        if [ $? -eq 0 ]; then\n            echo \"Incremental backup succesful at '${backup_dir}incremental-${time_stamp}.tar'\"\n        else\n            echo \"Incremental Backup Failure\"\n        fi\n\n    elif [ $1 == \"full\" ];then\n        tar cf \"${backup_dir}fullbackup-${time_stamp}.tar\" $2\n        if [ $? -eq 0 ];then\n            echo \"Full backup successful at '${backup_dir}fullbackup-${time_stamp}.tar'\"\n        else\n            echo \"Full Backup Failure\"\n        fi\n    else\n        echo \"Unknown parameter passed\"\n        echo \"Usage: ./backup.sh [incremental|full] [log_path]\"\n        exit 2;\n    fi\n}\n\nif [ $# -lt 2 ] || [ $# -gt 3 ];then\n    echo \"Usage: ./backup.sh [incremental|full] [log_path]\"\n    exit 1\nelif [ $# -eq 2 ];then\n    log_backup $1 $2\nelif [ $# -eq 3 ];then\n    log_backup $1 $2 $3\nfi\nexit 0\n</code></pre> <p>Passing all 3 arguments for incremental backup will take incremental backup at \u201c/mnt/backup/\u201d with each archive having timestamp concatenated to each file.</p> <p></p> <p>The arguments passed inside the function can be accessed via <code>$</code> followed by the index. The 0th index refers to the function itself,</p> <p><code>$1</code> to the first argument and so on. We use <code>#$</code> to check the count of arguments passed to the function.</p> <p>Once we pass the string \u201cincremental\u201d or \u201cfull\u201d it gets compared inside the function and the specific block is executed. Below are some more operations that can be performed over strings.</p> String Operations Description string1 == string2 Returns true if string1 equals string 2 otherwise false. string1 != string2 Returns true if string NOT equal string 2 otherwise false. string1 ~= regex Returns true if string1 matches the extended regular expression. -z string Returns true if string length is zero otherwise false. -n string Returns true if string length is non-zero otherwise false."},{"location":"level102/linux_intermediate/conclusion/","title":"Conclusion","text":"<p>Understanding package management is very crucial as an SRE, we always want the right set of software with their compatible versions to work in harmony to drive the big infrastructure and organization. </p> <p>We also saw how we can configure and use storage drives and how we can have redundancy of data using RAID to avoid the data loss, how data is placed over disk and use of file systems.</p> <p>Archiving and Backup is also a crucial part of being an SRE, It\u2019s our responsibility to keep the data safe and in a more efficient manner. </p> <p>Bash is very useful to automate the day to day toil that an SRE stumbles into. The above walkthrough of bash gives us an idea to get started, but mere reading through it won\u2019t take you much further. I believe \u201ctaking action and practicing the topic\u201d would give you confidence and will help you become a better SRE. </p>"},{"location":"level102/linux_intermediate/introduction/","title":"Linux-Intermediate","text":""},{"location":"level102/linux_intermediate/introduction/#prerequisites","title":"Prerequisites","text":"<ul> <li>Expect to have gone through the School Of SRE Linux Basics.</li> </ul>"},{"location":"level102/linux_intermediate/introduction/#what-to-expect-from-this-course","title":"What to expect from this course","text":"<p>This course is divided into two sections. In the first section we will cover where we left off the Linux Basics, earlier in the School of SRE curriculum, we will deep dive into some of the more advanced linux commands and concepts.</p> <p>In this second section we will discuss how we use Bash scripting in day to day work, automation and toil reduction as an SRE with the help of real life examples of any SRE.</p>"},{"location":"level102/linux_intermediate/introduction/#what-is-not-covered-under-this-course","title":"What is not covered under this course","text":"<p>This course aims to make you familiar with the intersection of Linux commands, shell scripting and how SRE uses it. We would not be covering Linux internals.</p>"},{"location":"level102/linux_intermediate/introduction/#lab-environment-setup","title":"Lab Environment Setup","text":"<ul> <li> <p>Install docker on your system. https://docs.docker.com/engine/install/</p> </li> <li> <p>We would be using RedHat Enterprise Linux (RHEL) 8.</p> </li> </ul> <p></p> <ul> <li>We would be running most of the commands in the above docker container.</li> </ul> <p>__________________________________________________________________________</p>"},{"location":"level102/linux_intermediate/introduction/#course-content","title":"Course Content","text":"<p>Package Management</p> <ul> <li> <p>Package:</p> </li> <li> <p>Dependencies</p> </li> <li> <p>Repository</p> </li> <li> <p>High Level and Low-Level Package management tools</p> </li> </ul> <p>Storage Media</p> <ul> <li> <p>Listing the mounted storage devices</p> </li> <li> <p>Creating a FileSystem</p> </li> <li> <p>Mounting the device</p> </li> <li> <p>Unmounting the device</p> </li> <li> <p>Making it easier with /etc/fstab file?</p> </li> <li> <p>Checking and Repairing FS</p> </li> <li> <p>RAID</p> <ul> <li> <p>RAID levels</p> </li> <li> <p>RAID 0 (Striping)</p> </li> <li> <p>RAID 1(Mirroring)</p> </li> <li> <p>RAID 5(Striping with distributed parity)</p> </li> <li> <p>RAID 6(Striping with double parity)</p> </li> <li> <p>RAID 10(RAID 1+0 : Mirroring and Striping)</p> </li> <li> <p>Commands to monitor RAID</p> </li> </ul> </li> <li> <p>LVM</p> </li> </ul> <p>Archiving and Backup</p> <ul> <li> <p>Archiving</p> <ul> <li> <p>gzip</p> </li> <li> <p>tar</p> </li> <li> <p>Create an archive with files and folder</p> </li> <li> <p>Listing files in the archive</p> </li> <li> <p>Extract files from the archive</p> </li> </ul> </li> <li> <p>Backup</p> <ul> <li> <p>Incremental backup</p> </li> <li> <p>Differential backup</p> </li> <li> <p>Network backup</p> </li> <li> <p>Cloud Backup</p> </li> </ul> </li> </ul> <p>Introduction to Vim</p> <ul> <li> <p>Opening a file and using insert mode</p> </li> <li> <p>Saving a file</p> </li> <li> <p>Exiting the VIM editor</p> </li> </ul> <p>Bash Scripting</p> <ul> <li> <p>Writing the first bash script</p> </li> <li> <p>Taking user input and working with variables</p> </li> <li> <p>Exit status</p> </li> <li> <p>Command line arguments and understanding If \u2026 else branching</p> </li> <li> <p>Looping over to do a repeated task</p> </li> <li> <p>Function</p> </li> </ul> <p>Conclusion</p>"},{"location":"level102/linux_intermediate/introvim/","title":"Introduction to Vim","text":""},{"location":"level102/linux_intermediate/introvim/#introduction","title":"Introduction","text":"<p>As an SRE we several times log into into the servers and make changes to the config file, edit and modify scripts and the editor which comes handy and available in almost all linux distribution is Vim. Vim is an open-source and free command line editor, widely accepted and used. We will see some basics of how to use vim for creating and editing files. This knowledge will help us in understanding the next section, Scripting.</p>"},{"location":"level102/linux_intermediate/introvim/#opening-a-file-and-using-insert-mode","title":"Opening a file and using insert mode","text":"<p>We use the command <code>vim filename</code> to open a file <code>filename</code>. The terminal will open an editor but once you start writing, it won\u2019t work. It\u2019s because we are not in \"INSERT\" mode in vim.</p> <p>Press <code>i</code> and get into insert mode and start writing.</p> <p></p> <p>You will see on the bottom left \u201cINSERT\u201d after pressing \u201ci\u201d . You can use *<code>ESC</code>\u201d key to get back to normal mode.</p>"},{"location":"level102/linux_intermediate/introvim/#saving-a-file","title":"Saving a file","text":"<p>After you insert your text in INSERT mode press ESC(escape) key on your keyboard to get out of it. Press <code>:</code>(colon shift +;) and press <code>w</code> and hit enter, the text you entered will get written in the file.</p> <p></p>"},{"location":"level102/linux_intermediate/introvim/#exiting-the-vim-editor","title":"Exiting the VIM editor","text":"<p>Exiting vim can get real challenging for the beginners. There are various ways you can exit the Vim like exit without saving the work, exit with saving the work.</p> <p>Try below commands after exiting insert mode and pressing <code>:</code>(colon).</p> Vim Commands Description :q Exit the file but won\u2019t exit if file has unsaved changes :wq Write(save) and exit the file. :q! Exit without saving the changes. <p>This is basic we would be needing in bash scripting in the next section. You can always visit tutorial for learning more. For quick practice of vim commands visit: https://www.openvim.com/</p>"},{"location":"level102/linux_intermediate/package_management/","title":"Package Management","text":""},{"location":"level102/linux_intermediate/package_management/#introduction","title":"Introduction","text":"<p>One of the main features of any operating system is the ability to run other programs and softwares, and hence Package management comes into picture. Package management is a method of installing and maintaining software programs on any operating system.</p>"},{"location":"level102/linux_intermediate/package_management/#package","title":"Package","text":"<p>In the early days of Linux, one had to download source code of any software and compile it to install and run the software. As the Linux space became more mature, it is  understood the software landscape is very dynamic and started distributing software in the form of packages. Package file is a compressed collection of files that contains software, its dependencies, installation instructions and metadata about the package.</p>"},{"location":"level102/linux_intermediate/package_management/#dependencies","title":"Dependencies","text":"<p>It is rare that a software package is stand-alone, it depends on the different software, libraries and modules. These subroutines are stored and made available in the form of shared libraries which may serve more than one program. These shared resources are called dependencies. Package management does this hard job of resolving dependencies and installing them for the user along with the software.</p>"},{"location":"level102/linux_intermediate/package_management/#repository","title":"Repository","text":"<p>Repository is a storage location where all the packages, updates, dependencies are stored. Each repository can contain thousands of software packages hosted on a remote server intended to be installed and updated on linux systems. We usually update the package information ( often referred to as metadata) by running \u201csudo dnf update\u201d.</p> <p></p> <p>Try out <code>sudo dnf repolist all</code> to list all the repositories.</p> <p>We usually add repositories for installing packages from third party vendors.</p> <p>dnf config-manager --add-repo http://www.example.com/example.repo</p>"},{"location":"level102/linux_intermediate/package_management/#high-level-and-low-level-package-management-tools","title":"High Level and Low-Level Package management tools","text":"<p>There are mainly two types of packages management tools:</p> <p>1. Low-level tools: This is mostly used for installing, removing and upgrading package files.</p> <p>2. High-Level tools: In addition to Low-level tools, High-level tools do metadata searching and dependency resolution as well.</p> Linux Distribution Low-Level Tools High-Level tools Debian dpkg apt-get Fedora, RedHat dnf dnf"},{"location":"level102/linux_intermediate/storage_media/","title":"Storage Media","text":""},{"location":"level102/linux_intermediate/storage_media/#introduction","title":"Introduction","text":"<p>Storage media are devices which are used to store data and information. Linux has amazing capabilities when it comes to handling external devices including storage devices. There are many kinds of storage devices physical storage devices like hard drives, virtual storage devices like RAID or LVM, network storage and so on.</p> <p>In this section we will learn to work with any storage device and configure it to our needs.</p>"},{"location":"level102/linux_intermediate/storage_media/#listing-the-mounted-storage-devices","title":"Listing the mounted storage devices:","text":"<p>We can use command <code>mount</code> to list all the storage devices mounted to your computer.</p> <p></p> <p>The format in which we see above output is:</p> <p><code>device</code> on <code>mount_point</code> type <code>file\\_system\\_type (options)</code></p> <p>For example in the first line the device virtual sysfs is mounted at /sys path and has a sysfs file system. Now let\u2019s see what and how a filesystem is created.</p>"},{"location":"level102/linux_intermediate/storage_media/#creating-a-filesystem","title":"Creating a FileSystem","text":"<p>Imagine a disk where all the data stored in the disk is in the form of one large chunk, there is nothing to figure out where one piece of data starts and ends, which piece of data is located at which place of the whole chunk of data and hence the File System comes into picture. File System(fs) is responsible for data storage, indexing and retrieval on any storage device.</p> <p>Below are the most popularly used file systems:</p> FS Type Description FAT File Allocation Table, initially used on DOS and Microsoft Windows and now widely used for portable USB storage NTFS (New Technology File System) Used on Microsoft\u2019s Windows based operating systems ext Extended file system, designed for Linux systems. ext4 Fourth extended filesystem, is a journaled file system that is commonly used by the Linux kernel. HFS Hierarchical File System, in use until HFS+ was introduced on Mac OS 8.1. HFS+ Supports file system journaling, enabling recovery of data after a system crash. NFS Network File System originally from Sun Microsystems is the standard in UNIX-based networks. <p>We will try to create an ext4 file system which is linux native fs using mkfs.</p> <p>Discalimer: Run this command on empty disk as this will wipe out the existing data.</p> <p></p> <p>Here the device /dev/sdb1 is formatted and it\u2019s filesystem is changed to ext4.</p>"},{"location":"level102/linux_intermediate/storage_media/#mounting-the-device","title":"Mounting the device:","text":"<p>In Linux systems all files are arranged in a tree structure with (/) as root. Mounting a fs simply means making that fs accessible to a certain point in the Linux directory tree.</p> <p>We need a mount point(location) where we want to mount the above formatted device.</p> <p></p> <p>We created a mount point /mount and used the mount command to attach the filesystem. Here -t flag specifies what is the fs type and after that the /dev/sdb1 (device name) and /mount (mount point we created earlier).</p>"},{"location":"level102/linux_intermediate/storage_media/#unmounting-the-device","title":"Unmounting the device:","text":"<p>Now let\u2019s see how we can unmount the device, which is equally important if we have removable storage media and want to mount on another host. We use umount for unmounting the device.</p> <p></p> <p>Our first attempt did not unmount the /sdb1 because we were inside the storage device and it was being used. Once we jumped back to the home directory we were successfully able to unmount the device.</p>"},{"location":"level102/linux_intermediate/storage_media/#making-it-easier-with-etcfstab-file","title":"Making it easier with /etc/fstab file?","text":"<p>In our production environment, we can have servers with many storage devices that need to be mounted, and it is not feasible to mount each device using the command every time we reboot the system. To ease this burden, we can make use of configuration table called \u201cfstab\u201d usually found in <code>/etc/fstab</code> on Linux systems.</p> <p></p> <p>Here on the first line we have /dev/mapper/rootvg-rootlv (storage device) mounted on / (root mount point) which has the xfs filesystem type followed by options.</p> <p>We can run <code>mount -a</code> to reload this file after making changes.</p>"},{"location":"level102/linux_intermediate/storage_media/#checking-and-repairing-fs","title":"Checking and Repairing FS","text":"<p>Filesystems encounter issues in case of any hardware failure, power failure and sometimes due to improper shutdown. Linux usually checks and repairs the corrupted disk if any during startup. We can also manually check for filesystem corruption using the command fsck.</p> <p></p> <p>We can repair the same filesystem using <code>fsck -y /dev/sdb1</code>.</p> <p>There are error codes attached to each kind of file system error ,and A sum of active errors is returned.</p> Error Codes Description 0 No errors 1 Filesystem errors corrected 2 System should be rebooted 4 Filesystem errors left uncorrected 8 Operational error 16 Usage or syntax error 32 Checking canceled by user request 128 Shared-library error <p>In the above fs check we got return code as 12 which is the sum of error code 8(operational error) and 4(uncorrected FS error).</p>"},{"location":"level102/linux_intermediate/storage_media/#raid","title":"RAID","text":"<p>RAID or \u201cRedundant Arrays of Independent Disks\u201d is a technique that distributes I/O across multiple disks to achieve increased performance and data redundancy. RAID has the ability to increase overall disk performance and survive disk failures. Software RAID uses the computer\u2019s CPU to carry out RAID operations whereas hardware RAID uses specialized processors, on disk controllers, to manage the disks. Three essential features of RAID are mirroring, striping and parity.</p>"},{"location":"level102/linux_intermediate/storage_media/#raid-levels","title":"RAID levels","text":"<p>The below section discusses the RAID levels that are commonly used. For information on all RAID levels, please refer to here .</p>"},{"location":"level102/linux_intermediate/storage_media/#raid-0-striping","title":"RAID 0 (Striping)","text":"<p>Striping is the method by which data is split up into \u201cblocks\u201d and written across all the disks present in the array. By spreading data across multiple drives, it means multiple disks can access the file, resulting in faster read/write speeds. The first disk in the array is not reused until an equal amount of data is written to each of the other disks in the array.</p> <p></p> <p>Advantages</p> <ul> <li> <p>It can be easily implemented.</p> </li> <li> <p>Bottlenecks caused due to I/O operations from the same disk are avoided, increasing the performance of such operations.</p> </li> </ul> <p>Disadvantages</p> <ul> <li>It does not offer any kind of redundancy. If any one of the disks fails, then the data of the entire disk is lost and cannot be recovered.</li> </ul> <p>Use cases</p> <p>RAID 0 can be used for systems with non-critical data that has to be read at high speed, such as a video/audio editing station or gaming environments.</p>"},{"location":"level102/linux_intermediate/storage_media/#raid-1mirroring","title":"RAID 1(Mirroring)","text":"<p>Mirroring writes a copy of data to each disk which is part of the array. This means that the data is written as many times as disks in the array . It stores an exact replica of all data on a separate disk or disks. As expected, this would result in a slow write performance compared to that of a single disk. On the other hand, read operations can be done parallelly improving read performance.</p> <p></p> <p>Advantages</p> <ul> <li> <p>RAID 1 offers a better read performance than RAID 0 or single disk.</p> </li> <li> <p>It can survive multiple disk failures without the need for special data recovery algorithms</p> </li> </ul> <p>Disadvantages</p> <ul> <li>It is costly since the effective storage capacity is only half of the number of disks due to replication of data.</li> </ul> <p>Use cases</p> <p>Applications that require low downtime but can have a slight hit on write performance.</p>"},{"location":"level102/linux_intermediate/storage_media/#raid-4striping-with-dedicated-parity","title":"RAID 4(Striping with dedicated parity)","text":"<p>RAID 4 works uses block-level striping (data can be striped in blocks of a variety of sizes depending on the applications and data to be stored) and a dedicated drive used to store parity information.The parity information is generated by an algorithm every time data is written to an array disk. The use of a parity bit is a way of adding checksums into data that can enable the target device to determine whether the data has been received correctly. In the event of a drive failure , the algorithm can be reversed and missing data can be generated based on the remaining data and parity information.</p> <p></p> <p>Advantages</p> <ul> <li> <p>Each drive in a RAID 4 array operates independently so I/O requests take place in parallel, speeding up performance over previous RAID levels.</p> </li> <li> <p>It can survive multiple disk failures without the need for special data recovery algorithms</p> </li> </ul> <p>Disadvantages</p> <ul> <li> <p>A minimum of 3 disks is required for setup.</p> </li> <li> <p>It needs hardware support for parity calculation.</p> </li> <li> <p>Write speeds are slow since parity relies on a single disk drive and carry out modifications of parity blocks for each I/O session.</p> </li> </ul> <p>Use cases</p> <p>Operations dealing with really large files \u2013 when sequential read and write data process is used</p>"},{"location":"level102/linux_intermediate/storage_media/#raid-5striping-with-distributed-parity","title":"RAID 5(Striping with distributed parity)","text":"<p>RAID 5 is similar to RAID 4, except that the parity information is spread across all drives in the array. This helps reduce the bottleneck inherent in writing parity information to a single drive during each write operation. RAID 5 is the most common secure RAID level.</p> <p></p> <p>Advantages</p> <ul> <li> <p>Read data transactions are fast as compared to write data transactions that are somewhat slow due to the calculation of parity.</p> </li> <li> <p>Data remains accessible even after drive failure and during replacement of a failed hard drive because the storage controller rebuilds the data on the new drive.</p> </li> </ul> <p>Disadvantages</p> <ul> <li> <p>RAID 5 requires a minimum of 3 drives and can work up to a maximum of 16 drives</p> </li> <li> <p>It needs hardware support for parity calculation.</p> </li> <li> <p>More than two drive failures can cause data loss.</p> </li> </ul> <p>Use cases</p> <p>File storage and application servers, such as email, general storage servers, etc.</p>"},{"location":"level102/linux_intermediate/storage_media/#raid-6striping-with-double-parity","title":"RAID 6(Striping with double parity)","text":"<p>RAID 6 is similar to RAID 5 with an added advantage of double distributed parity, which provides fault tolerance up to two failed drives.</p> <p></p> <p>Advantages</p> <ul> <li> <p>Read data transactions are fast.</p> </li> <li> <p>This provides a fault tolerance up to 2 failed drives.</p> </li> <li> <p>RAID 6 is more resilient than RAID 5.</p> </li> </ul> <p>Disadvantages</p> <ul> <li> <p>Write data transactions are slow due to double parity.</p> </li> <li> <p>Rebuilding the RAID array takes a longer time because of complex structure.</p> </li> </ul> <p>Use cases</p> <p>Office automation, online customer service, and applications that require very high availability.</p>"},{"location":"level102/linux_intermediate/storage_media/#raid-10raid-10-mirroring-and-striping","title":"RAID 10(RAID 1+0 : Mirroring and Striping)","text":"<p>RAID 10 is a combination of RAID 0 and RAID 1. It means that both mirroring and striping in one single RAID array.</p> <p></p> <p>Advantages</p> <ul> <li> <p>Rebuilding the RAID array is fast.</p> </li> <li> <p>Read and write operations performance are good.</p> </li> </ul> <p>Disadvantages</p> <ul> <li> <p>Just like RAID 1, only half the drive capacity is available.</p> </li> <li> <p>It can be expensive to implement RAID 10.</p> </li> </ul> <p>Use cases</p> <p>Transactional databases with sensitive information that require high performance and high data security.</p>"},{"location":"level102/linux_intermediate/storage_media/#commands-to-monitor-raid","title":"Commands to monitor RAID","text":"<p>The command <code>cat /proc/mdstat</code> will give the status of a software RAID. Let us examine the output of the command:</p> <pre><code>Personalities : [raid1]\n\nmd0 : active raid1 sdb1[2] sda1[0]\n\n10476544 blocks super 1.1 [2/2] [UU]\n\nbitmap: 0/1 pages [0KB], 65536KB chunk\n\nmd1 : active raid1 sdb2[2] sda2[0]\n\n10476544 blocks super 1.1 [2/2] [UU]\n\nbitmap: 1/1 pages [4KB], 65536KB chunk\n\nmd2 : active raid1 sdb3[2]\n\n41909248 blocks super 1.1 [2/1] [_U]\n\nbitmap: 1/1 pages [4KB], 65536KB chunk\n</code></pre> <p>The \u201cpersonalities\u201d gives us the raid level that the raid is configured. In the above example, the raid is configured with <code>RAID 1. md0 : active raid1 sdb1[2] sda1[0]</code> tells us that there is an active raid of RAID 1 between sdb1(which is device 2) and sda1(which is device 0).An inactive array generally means that one of the disks are faulty. Md2 in the above example shows that we have <code>41909248 blocks super 1.1 [2/1] [_U]</code> , this means that one disk is down in this particular raid.</p> <p>The command <code>mdadm --detail /dev/&lt;raid-array&gt;</code> gives detailed information about that particular array.</p> <pre><code>sudo mdadm --detail /dev/md0\n\n/dev/md0:\n\nVersion : 1.1\n\nCreation Time : Fri Nov 17 11:49:20 2019\n\nRaid Level : raid1\n\nArray Size : 10476544 (9.99 GiB 10.32 GB)\n\nUsed Dev Size : 10476544 (9.99 GiB 10.32 GB)\n\nRaid Devices : 2\n\nTotal Devices : 2\n\nPersistence : Superblock is persistent\n\nIntent Bitmap : Internal\n\nUpdate Time : Sun Dec 2 01:00:53 2019\n\nState : clean\n\nActive Devices : 2\n\nWorking Devices : 2\n\nFailed Devices : 0\n\nSpare Devices : 0\n\nUUID : xxxxxxx:yyyyyy:zzzzzz:ffffff\n\nEvents : 987\n\nNumber Major Minor RaidDevice State\n\n0 8 1 0 active sync /dev/sda1\n\n1 8 49 1 active sync /dev/sdb1\n</code></pre> <p>Incase of a missing disk in the above example, the State of the raid would be \u2018dirty\u2019 and Active Devices and Working Devices would be reduced to one. One of the entries(either /dev/sda1 or /dev/sdb1 depending on the missing disk) would have their RaidDevice changed to faulty.</p>"},{"location":"level102/linux_intermediate/storage_media/#lvm","title":"LVM","text":"<p>LVM stands for Logical Volume Management. In the above section we saw how we can create FS and use individual disks according to our need the traditional way but using LVM we can achieve more flexibility in storage allocation like we can stitch three 2TB disks to make one single partition of 6TB, or we can attach another physical disk of 4TB to the server and add that disk to the logical volume group to make it 10TB in total.</p> <p>Refer to know more about LVM: https://www.redhat.com/sysadmin/lvm-vs-partitioning</p>"},{"location":"level102/networking/conclusion/","title":"Conclusion","text":"<p>This course would have given some background on deploying services in datacentre and various parameters to consider and available solutions. It has to be noted that, each of the solution discussed here have various pros and cons, so specific to the scenario/requirement, the right fit among these are to be identified and used. As we didnt go the depth of various technologies/solution in this course, it might have made the reader curious to know about some of the topics. Here are some of the reference or online training content, for further learning.</p> <p>linked engineering blog  : has information about how Linkedin datacentres are setup and some of the key problems are solved.</p> <p>IPSpace blog : Has lot of articles about datacentre networking.</p> <p>Networking Basics course in edx.</p> <p>Happy learning !!</p>"},{"location":"level102/networking/infrastructure-features/","title":"Infrastructure Services","text":"<p>Some of the aspects to consider are, whether the underlying data centre infrastructure supports ToR resiliency, i.e. features like link bundling (bonds), BGP, support for anycast service, load balancer, firewall, Quality of Service.</p> <p>As seen in previous sections, to deploy applications at scale, it will need certain capabilities to be supported from the infrastructure. This section will cover different options available, and their suitability.</p>"},{"location":"level102/networking/infrastructure-features/#tor-connectivity","title":"ToR connectivity","text":"<p>This being one of the most frequent points of failure (considering the scale of deployment), there are different options available to connect the servers to the ToR. We are going to see them in detail below,</p>"},{"location":"level102/networking/infrastructure-features/#single-tor","title":"Single ToR","text":"<p>This is the simplest of all the options. Where a NIC of the server is connected to one ToR. The advantage of this approach is, there is a minimal number of switch ports used, allowing the DC fabric to support the rapid growth of server infrastructure (Note: Not only the ToR ports are used efficiently, but the upper switching layer in DC fabric as well,  the port usage will be efficient). On the downside, the servers can be unreachable if there is an issue with the ToR, link or NIC. This will impact the stateful apps more, as the existing connections get abruptly disconnected.</p> <p></p> <p>Fig 4: Single ToR design</p>"},{"location":"level102/networking/infrastructure-features/#dual-tor","title":"Dual ToR","text":"<p>In this option, each server is connected to two ToR, of the same cabinet. This can be set up in active/passive mode, thereby providing resiliency during ToR/link/NIC failures. The resiliency can be achieved either in layer 2 or in layer 3.</p>"},{"location":"level102/networking/infrastructure-features/#layer-2","title":"Layer 2","text":"<p>In this case, both the links are bundled together as a bond on the server side (with one NIC taking the active role and the other being passive). On the switch side, these two links are made part of multi-chassis lag (similar to bonding, but spread across switches). The prerequisite here is, both the ToR should be part of the same layer 2 domain. The IP addresses are configured on the bond interface on the server and SVI on the switch side.</p> <p></p> <p>Note: In this, the ToR 2 role is only to provide resiliency.</p> <p>Fig 5: Dual ToR layer 2 setup</p>"},{"location":"level102/networking/infrastructure-features/#layer-3","title":"Layer 3","text":"<p>In this case, both the links are configured as separate layer 3 interfaces. The resiliency is achieved by setting up a routing protocol (like BGP). Wherein one link is given higher preference over the other. In this case, the two ToR's can be set up independently, in layer 3 mode. The servers would need a virtual address, to which the services have to be bound.</p> <p></p> <p>Note: In this, the ToR 2 role is only to provide resiliency.</p> <p>Fig 6: Dual ToR layer 3 setup</p> <p>Though the resiliency is better with dual ToR, the drawback is, the number of ports being used. As the access port in the ToR doubles up, the number of ports required in the Spine layer also doubles up, and this keeps cascading to higher layers.</p> Type Single ToR Dual ToR (layer  2) Dual ToR (layer 3) Resiliency<sup>1</sup> No<sup>2</sup> Yes Yes Port usage 1:1 1:2 1:2 Cabling Less More More Cost of DC fabric Low High High ToR features required Low High Medium <p><sup>1</sup> Resiliency in terms of ToR/Link/NIC</p> <p><sup>2</sup> As an alternative, resiliency can be addressed at the application layer.</p> <p>Along with the above-mentioned ones, an application might need more capabilities out of the infrastructure to deploy at scale. Some of them are,</p>"},{"location":"level102/networking/infrastructure-features/#anycast","title":"Anycast","text":"<p>As seen in the previous section, of deploying at scale, anycast is one of the means to have services distributed across cabinets and still have traffic flowing to each one of the servers. To achieve this, two things are required</p> <ol> <li> <p>Routing protocol between ToR and server (to announce the anycast address)</p> </li> <li> <p>Support for ECMP (Equal Cost Multi-Path) load balancing in the infrastructure, to distribute the flows across the cabinets.</p> </li> </ol>"},{"location":"level102/networking/infrastructure-features/#load-balancing","title":"Load balancing","text":"<p>Similar to Anycast, another means to achieve load balancing across servers (host a particular app), is using load balancers. These could be implemented in different ways</p> <ol> <li> <p>Hardware load balancers: A LB device is placed inline of the traffic flow, and looks at the layer 3 and layer 4 information in an incoming packet. Then determine the set of real hosts, to which the connections are to be redirected. As covered in the Scale topic, these load balancers can be set up in two ways,</p> <ul> <li> <p>Single-arm mode: In this mode, the load balancer handles only the incoming requests to the VIP. The response from the server goes directly to the clients. There are two ways to implement this,</p> <ul> <li> <p>L2 DSR: Where the load balancer and the real servers remain in the same VLAN. Upon getting an incoming request, the load balancer identifies the real server to redirect the request and then modifies the destination mac address of that Ethernet frame. Upon processing this packet, the real server responds directly to the client.</p> </li> <li> <p>L3 DSR: In this case, the load balancer and real servers need not be in the same VLAN (does away with layer 2 complexities like running STP, managing wider broadcast domain, etc). Upon incoming request, the load balancer redirects to the real server, by modifying the destination IP address of the packet. Along with this, the DSCP value of the packet is set to a predefined value (mapped for that VIP). Upon receipt of this packet, the real server uses the DSCP value to determine the loopback address (VIP address). The response again goes directly to the client.</p> </li> </ul> </li> <li> <p>Two arm mode: In this case, the load balancer is in line for incoming and outgoing traffic.</p> </li> </ul> </li> <li> <p>DNS based load balancer: Here the DNS servers keep a check of the health of the real servers and resolve the domain in such a way that the client can connect to different servers in that cluster. This part was explained in detail in the deployment at scale section.</p> </li> <li> <p>IPVS based load balancing: This is another means, where an IPVS server presents itself as the service endpoint to the clients. Upon incoming request, the IPVS directs the request to the real servers. The IPVS can be set up to do health for the real servers.</p> </li> </ol>"},{"location":"level102/networking/infrastructure-features/#nat","title":"NAT","text":"<p>Network Address Translation (NAT) will be required for hosts that need to connect to destinations on the Internet, but don't want to expose their configured NIC address. In this case, the address (of the internal server) is translated to a public address by a firewall. Few examples of this are proxy servers, mail servers, etc.</p>"},{"location":"level102/networking/infrastructure-features/#qos","title":"QoS","text":"<p>Quality of Service is a means to provide, differentiate treatment to few packets over others. These could provide priority in forwarding queues, or bandwidth reservations. In the data centre scenario, depending upon the bandwidth subscription ratio, the need for QoS varies,</p> <ol> <li> <p>1:1 bandwidth subscription ratio: In this case, the server to ToR connectivity (all servers in that cabinet) bandwidth should be equivalent to the ToR to Spine switch connectivity. Similarly for the upper layers as well. In this design, congestion on a link is not going to happen, as enough bandwidth will always be available. In this case, the only difference QoS can bring, it provides priority treatment for certain packets in the forwarding queue. Note: Packet buffering happens, when the packet moves between ports of different speeds, like 100Gbps, 10Gbps.</p> </li> <li> <p>Oversubscribed network: In this case, not all layers maintain a bandwidth subscription ratio, for example, the ToR uplink may be of lower bandwidth, compared to ToR to Server bandwidth (This is sometimes referred to as oversubscription ratio). In this case, there is a possibility of congestion. Here QoS might be required, to give priority as well as bandwidth reservation, for certain types of traffic flows.</p> </li> </ol>"},{"location":"level102/networking/introduction/","title":"Prerequisites","text":"<p>It is recommended to have basic knowledge of network security, TCP and datacenter setup and the common terminologies used in them. Also, the readers are expected to go through the School of Sre contents - </p> <ul> <li> <p>Linux Networking</p> </li> <li> <p>system design</p> </li> <li> <p>security</p> </li> </ul>"},{"location":"level102/networking/introduction/#what-to-expect-from-this-course","title":"What to expect from this course","text":"<p>This part will cover how a datacenter infrastructure is segregated for different application needs as well as the consideration of deciding where to place an application. These will be broadly based on, Security, Scale, RTT (latency), Infrastructure features.</p> <p>Each of these topics will be covered in detail,</p> <p>Security - Will cover threat vectors faced by services facing external/internal clients. Potential mitigation options to consider while deploying them. This will touch upon perimeter security, DDoS protection, Network demarcation and ring-fencing the server clusters.</p> <p>Scale - Deploying large scale applications, require a better understanding of infrastructure capabilities, in terms of resource availability, failure domains, scaling options like using anycast, layer 4/7 load balancer, DNS based load balancing.</p> <p>RTT (latency) - Latency plays a key role in determining the overall performance of the distributed service/application, where calls are made between hosts to serve the users.</p> <p>Infrastructure features - Some of the aspects to consider are, whether the underlying data centre infrastructure supports ToR resiliency, i.e., features like link bundling (bonds), BGP (Border Gateway Protocol), support for anycast service, load balancer, firewall, Quality of Service.</p>"},{"location":"level102/networking/introduction/#what-is-not-covered-under-this-course","title":"What is not covered under this course","text":"<p>Though these parameters play a role in designing an application, we will not go into the details of the design. Each of these topics are vast, hence the objective is to introduce the terms and relevance of the parameters in them, and not to provide extensive details about each one of them.</p>"},{"location":"level102/networking/introduction/#course-contents","title":"Course Contents","text":"<ol> <li>Security</li> <li>Scale</li> <li>RTT</li> <li>Infrastructure features</li> <li>Conclusion</li> </ol>"},{"location":"level102/networking/introduction/#terminology","title":"Terminology","text":"<p>Before discussing each of the topics, it is important to get familiar with few commonly used terms</p> <p>Cloud</p> <p>This refers to hosted solutions from different providers like Azure, AWS, GCP. Wherein enterprises can host their applications for either public or private usage.</p> <p>On-prem</p> <p>This term refers to physical Data Center(DC) infrastructure, built and managed by enterprises themselves. This can be used for private access as well as public (like users connecting over the Internet).</p> <p>Leaf switch (ToR)</p> <p>This refers to the switch, where the servers connect to, in a DC. They are called by many names, like access switch, Top of the Rack switch, Leaf switch.</p> <p>The term leaf switch comes from the Spine-leaf architecture, where the access switches are called leaf switches. Spine-leaf architecture is commonly used in large/hyper-scale data centres, which brings very high scalability options for the DC switching layer and is also more efficient in building and implementing these switches. Sometimes these are referred to as Clos architecture.</p> <p>Spine switch</p> <p>Spine switches are the aggregation point of several leaf switches, they provide the inter-leaf communication and also connect to the upper layer of DC infrastructure.</p> <p>DC fabric</p> <p>As the data centre grows, multiple Clos networks need to be interconnected, to support the scale, and fabric switches help to interconnect them.</p> <p>Cabinet</p> <p>This refers to the rack, where the servers and ToR are installed. One cabinet refers to the entire rack.</p> <p>BGP</p> <p>It is the Border Gateway Protocol, used to exchange routing information between routers and switches. This is one of the common protocols used in the Internet and as well Data Centers as well. Other protocols are also used in place of BGP, like OSPF.</p> <p>VPN</p> <p>A Virtual Private Network is a tunnel solution, where two private networks (like offices, datacentres, etc) can be interconnected over a public network (internet). These VPN tunnels encrypt the traffic before sending over the Internet, as a security measure.</p> <p>NIC</p> <p>Network Interface Card refers to the module in Servers, which consists of the Ethernet port and the interconnection to the system bus. It is used to connect to the switches (commonly ToR switches).</p> <p>Flow</p> <p>Flows refer to a traffic exchange between two nodes (could be servers, switches, routers, etc), which has common parameters like source/destination IP address, source/destination port number, IP Protocol number. This helps in traffic a particular traffic exchange session, between two nodes (like a file copy session, or an HTTP connection, etc).</p> <p>ECMP</p> <p>Equal Cost Multi-Path means, a switch/router can distribute the traffic to a destination, among multiple exit interfaces. The flow information is used to build a hash value and based on that, exit interfaces are selected. Once a flow is mapped to a particular exit interface, all the packets of that flow exit via the same interface only. This helps in preventing out of order delivery of packets.</p> <p>RTT</p> <p>This is a measure of the time it takes for a packet from the source to reach the destination and return to the source. This is most commonly used in measuring network performance and also troubleshooting.</p> <p>TCP throughput</p> <p>This is the measure of the data transfer rate achieved between two nodes. This is impacted by many parameters like RTT, packet size, window size, etc.</p> <p>Unicast</p> <p>This refers to the traffic flow between a single source to a single destination (i.e.) like ssh sessions, where there is one to one communication.</p> <p>Anycast</p> <p>This refers to one-to-one traffic flow as above, but endpoints could be multiple (i.e.) a single source can send traffic to any one of the destination hosts in that group. This is achieved by having the same IP address configured in multiple servers and every new traffic flow is mapped to one of the servers.</p> <p>Multicast</p> <p>This refers to one-to-many traffic flow (i.e.) a single source can send traffic to multiple destinations. To make it feasible, the network routers replicate the traffic to different hosts (which register as members of that particular multicast group).</p>"},{"location":"level102/networking/rtt/","title":"RTT","text":"<p>Latency plays a key role in determining the overall performance of the distributed service/application, where calls are made between hosts to serve the users.</p> <p>RTT is a measure of time, it takes for a packet to reach B from A, and return to A. It is measured in milliseconds. This measure plays a role in determining the performance of the services. Its impact is seen in calls made between different servers/services, to serve the user, as well as the TCP throughput that can be achieved.</p> <p>It is fairly common that service makes multiple calls to servers within its cluster or to different services like authentication, logging, database, etc, to respond to each user/client request. These servers can be spread across different cabinets, at times even between different data centres in the same region. Such cases are quite possible in cloud solutions, where the deployment spreads across different sites within a region. As the RTT increases, the response time for each of the calls gets longer and thereby has a cascading effect on the end response being sent to the user.</p>"},{"location":"level102/networking/rtt/#relation-of-rtt-and-throughput","title":"Relation of RTT and throughput","text":"<p>RTT is inversely proportional to the TCP throughput. As RTT increases, it reduces the TCP throughput, just like packet loss. Below is a formula to estimate the TCP throughput, based on TCP mss, RTT and packet loss.</p> <p></p> <p>As within a data centre, these calculations are also, important for communication over the internet, where a client can connect to the DC hosted services, over different telco networks and the RTT is not very stable, due to the unpredictability of the Internet routing policies.</p>"},{"location":"level102/networking/scale/","title":"Scale","text":"<p>Deploying large scale applications, require a better understanding of infrastructure capabilities, in terms of resource availability, failure domains, scaling options like using anycast, layer 4/7 load balancer, DNS based load balancing.</p> <p>Building large scale applications is a complex activity, which should cover many aspects in design, development and as well as operationalisation. This section will talk about the considerations to look for while deploying them.</p>"},{"location":"level102/networking/scale/#failure-domains","title":"Failure domains","text":"<p>In any infrastructure, failures due to hardware or software issues are common. Though these may be a pain from a service availability perspective, these failures do happen and a pragmatic goal would be to, try to keep these failures to the minimum. Hence while deploying any service, failures/non-availability of some of the nodes to be factored in.</p>"},{"location":"level102/networking/scale/#server-failures","title":"Server failures","text":"<p>A server could fail, due to power or NIC or software bug. And at times it may not be a complete failure but could be an error in the NIC, which causes some packet loss. This is a very common scenario and will impact the stateful services more. While designing such services, it is important to accommodate some level of tolerance to such failures.</p>"},{"location":"level102/networking/scale/#tor-failures","title":"ToR failures","text":"<p>This is one of the common scenarios, where the leaf switch connecting the servers goes down, along with it taking down the entire cabinet. There could be more than one server of the same service that can go down in this case. It requires planning to decide how much server loss can be handled without overloading other servers. Based on this, the service can be distributed across many cabinets. These calculations may vary, depending upon the resiliency in the ToR design, which will be covered in ToR connectivity section.</p>"},{"location":"level102/networking/scale/#site-failures","title":"Site failures","text":"<p>Here site failure is a generic term, which could mean, a particular service is down in a site, maybe due to new version rollout, or failures of devices like firewall, load balancer, if the service depends on them, or loss of connectivity to remote sites (which might have limited options for resiliency) or issues with critical services like DNS, etc. Though these events may not be common, they can have a significant impact.</p> <p>In summary, handling these failure scenarios has to be thought about while designing the application itself. That will provide the tolerance required within the application to recover from unexpected failures. This will help not only for failures, even for planned maintenance work, as it will be easier to take part of the infrastructure, out of service.</p>"},{"location":"level102/networking/scale/#resource-availability","title":"Resource availability","text":"<p>The other aspect to consider while deploying applications at scale is the availability of the required infrastructure and the features the service is dependent upon. For example, for the resiliency of a cabinet, if one decides to distribute the service to 5 cabinets, but the service needs a load balancer (to distribute incoming connections to different servers), it may become challenging if load balancers are not supported in all cabinets. Or there could be a case that there are not enough cabinets available (that meet the minimum required specification for service to be set up). The best approach in these cases is to identify the requirements and gaps and then work with the Infrastructure team to best solve them.</p>"},{"location":"level102/networking/scale/#scaling-options","title":"Scaling options","text":"<p>While distributing the application to different cabinets, the incoming traffic to these services has to be distributed across these servers. To achieve this, the following may be considered</p>"},{"location":"level102/networking/scale/#anycast","title":"Anycast","text":"<p>This is one of the quickest ways to roll out traffic distribution across multiple cabinets. In this, each server, part of the cluster (where the service is set up), advertises a loopback address (/32 IPv4 or /128 IPv6 address), to the DC switch fabric (most commonly BGP is used for this purpose). The service has to be set up to be listening to this loopback address. When the clients try to connect to the service, get resolved to this virtual address and forward their queries. The DC switch fabric distributes each flow into different available next hops (eventually to all the servers in that service cluster).</p> <p>Note: The DC switch computes a hash, based on the IP packet header, this could include any combination of source and destination addresses, source and destination port, mac address and IP protocol number. Based on this hash value, a particular next-hop is picked up. Since all the packets in a traffic flow, carry the same values for these headers, all the packets in that flow will be mapped to the same path.</p> <p></p> <p>Fig 1: Anycast setup</p> <p>To achieve a proportionate distribution of flows across these servers, it is important to maintain uniformity in each of the cabinets and pods. But remember, the distribution happens only based on flows, and if there are any elephant (large) flows, some servers might receive a higher volume of traffic.</p> <p>If there are any server or ToR failures, the advertisement of loopback address to the switches will stop, and thereby the new packets will be forwarded to the remaining available servers.</p>"},{"location":"level102/networking/scale/#load-balancer","title":"Load balancer","text":"<p>Another common approach is to use a load balancer. A Virtual IP is set up in the load balancers, to which the client connects while trying to access the service. The load balancer, in turn, redirects these connections to, one of the actual servers, where the service is running. In order to, verify the server is in the serviceable state, the load balancer does periodic health checks, and if it fails, the LB stops redirecting the connection to these servers.</p> <p>The load balancer can be deployed in single-arm mode, where the traffic to the VIP is redirected by the LB, and the return traffic from the server to the client is sent directly. The other option is the two-arm mode, where the return traffic is also passed through the LB.</p> <p></p> <p>Fig 2: Single-arm mode</p> <p></p> <p>Fig 3: Two-arm mode</p> <p>One of the cons of this approach is, at a higher scale, the load balancer can become the bottleneck, to support higher traffic volumes or concurrent connections per second.</p>"},{"location":"level102/networking/scale/#dns-based-load-balancing","title":"DNS based load balancing","text":"<p>This is similar to the above approach, with the only difference is instead of an appliance, the load balancing is done at the DNS. The clients get different IP's to connect when they query for the DNS records of the service. The DNS server has to do a health check, to know which servers are in a good state.</p> <p>This approach alleviates the bottleneck of the load balancer solution. But require shorter TTL for the DNS records, so that problematic servers can be taken out of rotation quickly, which means, there will be far more DNS queries.</p>"},{"location":"level102/networking/security/","title":"Security","text":"<p>This section will cover threat vectors faced by services facing external/internal clients. Potential mitigation options to consider while deploying them. This will touch upon perimeter security, DDoS protection, Network demarcation and operational practices.</p>"},{"location":"level102/networking/security/#security-threat","title":"Security Threat","text":"<p>Security is one of the major considerations in any infrastructure. There are various security threats, which could amount to data theft, loss of service, fraudulent activity, etc. An attacker can use techniques like phishing, spamming, malware, Dos/DDoS, exploiting vulnerabilities, man-in-the-middle attack, and many more. In this section, we will cover some of these threats and possible mitigation. As there are numerous means to attack and secure the infrastructure, we will only focus on some of the most common ones.</p> <p>Phishing is mostly done via email (and other mass communication methods), where an attacker provides links to fake websites/URLs. Upon accessing that, victim's sensitive information like login credentials or personal data is collected and can be misused.</p> <p>Spamming is also similar to phishing, but the attacker doesn't collect data from users but tries to spam a particular website and probably overwhelm them (to cause slowness) and well use that opportunity to, compromise the security of the attacked website.</p> <p>Malware is like a trojan horse, where an attacker manages to install a piece of code on the secured systems in the infrastructure. Using this, the hacker can collect sensitive data and as well infect the critical services of the target company.</p> <p>Exploiting vulnerabilities is another method an attacker can gain access to the systems. These could be bugs or misconfiguration in web servers, internet-facing routers/switches/firewalls, etc.</p> <p>DoS/DDoS is one of the common attacks seen on internet-based services/solutions, especially those businesses based on eyeball traffic. Here the attacker tries to overwhelm the resources of the victim by generating spurious traffic to the external-facing services. By this, primarily the services turn slow or non-responsive, during this time, the attacker could try to hack into the network, if some of the security mechanism fails to filter through the attack traffic due to overload.</p>"},{"location":"level102/networking/security/#securing-the-infrastructure","title":"Securing the infrastructure","text":"<p>The first and foremost aspect for any infrastructure administration is to identify the various security threats that could affect the business running over this infrastructure. Once different threats are known, the security defence mechanism has to be designed and implemented. Some of the common means to securing the infrastructure are</p>"},{"location":"level102/networking/security/#perimeter-security","title":"Perimeter security","text":"<p>This is the first line of defence in any infrastructure, where unwanted/unexpected traffic flows into the infrastructure are filtered/blocked. These could be filters in the edge routers, that allow expected services (like port 443 traffic for web service running on HTTPS), or this filter can be set up to block unwanted traffic, like blocking UDP ports, if the services are not dependent on UDP.</p> <p>Similar to the application traffic entering the network, there could be other traffic like BGP messages for Internet peers, VPN tunnels traffic, as well other services like email/DNS, etc. There are means to protect every one of these, like using authentication mechanisms (password or key-based) for peers of BGP, VPN, and whitelisting these specific peers to make inbound connections (in perimeter filters). Along with these, the amount of messages/traffic can be rate-limited to known scale or expected load, so the resources are not overwhelmed.</p>"},{"location":"level102/networking/security/#ddos-mitigation","title":"DDoS mitigation","text":"<p>Protecting against a DDoS attack is another important aspect. The attack traffic will look similar to the genuine users/client request, but with the intention to flood the externally exposed app, which could be a web server, DNS, etc. Therefore it is essential to differentiate between the attack traffic and genuine traffic, for this, there are different methods to do at the application level, one such example using Captcha on a web service, to catch traffic originating from bots.</p> <p>For these methods to be useful, the nodes should be capable of handling both the attack traffic and genuine traffic. It may be possible in cloud-based infrastructure to dynamically add more virtual machines/resources, to handle the sudden spike in volume of traffic, but on-prem, the option to add additional resources might be challenging.</p> <p>To handle a large volume of attack traffic, there are solutions available, which can inspect the packets/traffic flows and identify anomalies (i.e.) traffic patterns that don't resemble a genuine connection, like client initiating TCP connection, but fail to complete the handshake, or set of sources, which have abnormally huge traffic flow. Once this unwanted traffic is identified, these are dropped at the edge of the network itself, thereby protecting the resources of app nodes. This topic alone can be discussed more in detail, but that will be beyond the scope of this section.</p>"},{"location":"level102/networking/security/#network-demarcation","title":"Network Demarcation","text":"<p>Network demarcation is another common strategy deployed in different networks when applications are grouped based on their security needs and vulnerability to an attack. Some common demarcations are, the external/internet facing nodes are grouped into a separate zone, whereas those nodes having sensitive data are segregated into a separate zone. And any communication between these zones is restricted with the help of security tools to limit exposure to unwanted hosts/ports. These inter-zone communication filters are sometimes called ring-fencing. The number of zones to be created, varies for different deployments, for example, there could be a host which should be able to communicate to the external world as well as internal servers, like proxy, email, in this case, these can be grouped under one zone, say De-Militarized Zones (DMZ). The main advantage of creating zones is that, even if there is a compromised host, that doesn't act as a back door entry for the rest of the infrastructure.</p>"},{"location":"level102/networking/security/#node-protection","title":"Node protection","text":"<p>Be it server, router, switches, load balancers, firewall, etc, each of these devices come with certain capabilities to secure themselves, like support for filters (e.g. Access-list, Iptables) to control what traffic to process and what to drop, anti-virus software can be used in servers to check on the software installed in them.</p>"},{"location":"level102/networking/security/#operational-practices","title":"Operational practices","text":"<p>There are numerous security threats for infrastructure, and there are different solutions to defend them. The key part to the defence, is not only identifying the right solution and the tools for it but also making sure there are robust operational procedures in place, to respond promptly, decisively and with clarity, for any security incident.</p>"},{"location":"level102/networking/security/#standard-operating-procedures-sop","title":"Standard Operating Procedures (SOP)","text":"<p>SOP need to be well defined and act as a reference for on-call to follow during a security incident. This SoP should cover things like,</p> <ul> <li> <p>When a security incident happens, how it will be alerted, to whom it will be alerted.</p> </li> <li> <p>Identify the scale and severity of the security incident.</p> </li> <li> <p>Who are the points of escalation and the threshold/time to intimate them, there could be other concerned teams or to the management or even to the security operations in-charge.</p> </li> <li> <p>Which solutions to use (and the procedure to follow in them) to mitigate the security incident.</p> </li> <li> <p>Also the data about the security incident has to be collated for further analysis.</p> </li> </ul> <p>Many organisations have a dedicated team focused on security, and they drive most of the activities, during an attack and even before, to come up with best practices, guidelines and compliance audits. It is the responsibility of respective technical teams, to ensure the infrastructure meets these recommendations and gaps are fixed.</p>"},{"location":"level102/networking/security/#periodic-review","title":"Periodic review","text":"<p>Along with defining SoP's, the entire security of the infrastructure has to be reviewed periodically. This review should include,</p> <ul> <li> <p>Identifying any new/improved security threat that could potentially target the infrastructure.</p> </li> <li> <p>The SoP's have to be reviewed periodically, depending upon new security threats or changes in the procedure (to implement the solutions)</p> </li> <li> <p>Ensuring software upgrades/patches are done in a timely manner.</p> </li> <li> <p>Audit the infrastructure for any non-compliance of the security standards.</p> </li> <li> <p>Review of recent security incidents and find means to improvise the defence mechanisms.</p> </li> </ul>"},{"location":"level102/system_calls_and_signals/conclusion/","title":"Conclusion","text":"<p>One of the main goals of a SRE is to improve the reliability of high scale systems. Inorder to achieve this, a basic understanding of the internal workings of a system is necessary. </p> <p>Getting to know about how signals work is important since they play a big role in the lifecycle of processes. We see the use of signals in a range of operations on processes : from creating a process to killing a process. Knowledge of signals is important especially when handling them in programs. If you anticipate an event that causes signals, you can define a handler function and tell the operating system to run it when that particular type of signal arrives.</p> <p>Understanding system calls is especially useful to SRE's while debugging any Linux process. System calls provide precise knowledge of the internal functionalities of an operating system. It gives an in-depth understanding for programmers about C library functions which implement system calls at a lower level. With the use of strace command, one may easily debug slow or hung processes.</p>"},{"location":"level102/system_calls_and_signals/conclusion/#further-reading","title":"Further Reading","text":"<p>https://www.oreilly.com/library/view/understanding-the-linux/0596002130/ch01s06.html</p> <p>https://jvns.ca/blog/2021/04/03/what-problems-do-people-solve-with-strace/</p> <p>https://medium.com/@akhandmishra/important-system-calls-every-programmer-should-know-8884381ceadb</p> <p>https://www.brendangregg.com/blog/2014-05-11/strace-wow-much-syscall.html</p>"},{"location":"level102/system_calls_and_signals/intro/","title":"System Calls and Signals","text":""},{"location":"level102/system_calls_and_signals/intro/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux Basics</li> <li>Python Basics</li> </ul>"},{"location":"level102/system_calls_and_signals/intro/#what-to-expect-from-this-course","title":"What to expect from this course","text":"<p>The course covers a fundamental understanding of signals and system calls. It sheds light on how the knowledge of signals and system calls can be helpful for an SRE. </p>"},{"location":"level102/system_calls_and_signals/intro/#what-is-not-covered-under-this-course","title":"What is not covered under this course","text":"<p>The course does not discuss any other interrupts or interrupt handling apart from signals. The course will not deep dive into signal handler and GNU C library. </p>"},{"location":"level102/system_calls_and_signals/intro/#course-contents","title":"Course Contents","text":"<ul> <li>Signals<ul> <li>Introduction to interrupts and signals</li> <li>Types of signals</li> <li>Sending signals to process</li> <li>Handling signals</li> <li>Role of signals in system calls with the example of wait()</li> </ul> </li> <li>System calls<ul> <li>Introduction</li> <li>Types of system calls</li> <li>User mode,kernel mode and their transitions</li> <li>Working of write() system call</li> <li>Debugging in Linux with strace</li> </ul> </li> </ul>"},{"location":"level102/system_calls_and_signals/signals/","title":"Signals","text":""},{"location":"level102/system_calls_and_signals/signals/#introduction-to-interrupts-and-signals","title":"Introduction to interrupts and signals","text":"<p>An interrupt is an event that alters the normal execution flow of a program and can be generated by hardware devices or even by the CPU itself. When an interrupt occurs the current flow of execution is suspended and the interrupt handler runs. After the interrupt handler runs the previous execution flow is resumed. There are three types of events that can cause the CPU to interrupt: hardware interrupts, software interrupts, and exceptions.</p> <p>Signals are nothing but software interrupts that notifies a process that an event has occurred. These events might be requests from users or indications that a system problem (such as a memory access error) has occurred. Every signal has a signal number and a default action defined. A process can react to them in any of the following ways:</p> <ul> <li>a default (OS-provided) way</li> <li>catch the signal and handle them in a program-defined way</li> <li>ignore the signal entirely</li> </ul>"},{"location":"level102/system_calls_and_signals/signals/#signal-groups","title":"Signal Groups","text":"<p>Signals fall into two broad categories. The first set constitutes the traditional or standard signals, which are used by the kernel to notify processes of events. On Linux, the standard signals are numbered from 1 to 31. The other set of signals consists of the realtime signals. Linux supports both POSIX reliable signals (hereinafter \"standard signals\") and POSIX real-time signals.</p>"},{"location":"level102/system_calls_and_signals/signals/#realtime-signals","title":"Realtime Signals","text":"<p>Realtime signals were defined in POSIX.1b to remedy a number of limitations of standard signals. They have the following advantages over standard signals:</p> <ul> <li>Realtime signals provide an increased range of signals that can be used for application-defined purposes. Only two standard signals are freely available for application-defined purposes: SIGUSR1 and SIGUSR2.</li> <li>Realtime signals are queued. If multiple instances of a realtime signal are sent to a process, then the signal is delivered multiple times. By contrast, if we send further instances of a standard signal that is already pending for a process, that signal is delivered only once.</li> <li>When sending a realtime signal, it is possible to specify data (an integer or pointer value) that accompanies the signal. The signal handler in the receiving process can retrieve this data.</li> <li>The order of delivery of different realtime signals is guaranteed. If multiple different realtime signals are pending, then the lowest-numbered signal is delivered first. In other words, signals are prioritized, with lower-numbered signals having higher priority. When multiple signals of the same type are queued, they are delivered\u2014along with their accompanying data\u2014in the order in which they were sent.</li> </ul>"},{"location":"level102/system_calls_and_signals/signals/#standard-signals","title":"Standard Signals","text":"<p>The standard signals are the classical signals that have been there since the early days of Unix. Further here, we will be discussing about standard signals.</p>"},{"location":"level102/system_calls_and_signals/signals/#signal-overview","title":"Signal Overview","text":"<p>A signal is said to be generated by some event. Once generated, a signal is later delivered to a process, which then takes some action in response to the signal. Between the time it is generated and the time it is delivered, a signal is said to be pending.</p> <p>Normally, a pending signal is delivered to a process as soon as it is next scheduled to run, or immediately if the process is already running (e.g., if the process sent a signal to itself). Sometimes, however, we need to ensure that a segment of code is not interrupted by the delivery of a signal. To do this, we can add a signal to the process\u2019s signal mask - a set of signals whose delivery is currently blocked. If a signal is generated while it is blocked, it remains pending until it is later unblocked (removed from the signal mask). Various system calls allow a process to add and remove signals from its signal mask.</p> <p>Upon delivery of a signal, a process carries out one of the following default actions, depending on the signal:</p> <ul> <li>The signal is ignored; that is, it is discarded by the kernel and has no effect on the process. (The process never even knows that it occurred.)</li> <li>The process is terminated (killed). This is sometimes referred to as abnormal process termination, as opposed to the normal process termination that occurs when a process terminates using exit().</li> <li>A core dump file is generated, and the process is terminated. A core dump file contains an image of the virtual memory of the process, which can be loaded into a debugger in order to inspect the state of the process at the time that it terminated.</li> <li>The process is stopped\u2014execution of the process is suspended.</li> <li>Execution of the process is resumed after previously being stopped. </li> </ul> <p>Instead of accepting the default for a particular signal, a program can change the action that occurs when the signal is delivered. This is known as setting the disposition of the signal. To read more about disposition, refer here. A program can set one of the following dispositions for a signal:</p> <ul> <li>The default action should occur. This is useful to undo an earlier change of the disposition of the signal to something other than its default.</li> <li>The signal is ignored. This is useful for a signal whose default action would be to terminate the process.</li> <li>A signal handler is executed.</li> </ul> <p>A signal handler is a function, written by the programmer, that performs appropriate tasks in response to the delivery of a signal. For example, the shell has a handler for the SIGINT signal (generated by the interrupt character, Control-C) that causes it to stop what it is currently doing and return control to the main input loop, so that the user is once more presented with the shell prompt. Notifying the kernel that a handler function should be invoked is usually referred to as installing or establishing a signal handler. When a signal handler is invoked in response to the delivery of a signal, we say that the signal has been handled or, synonymously, caught.</p> <p>Note that it isn\u2019t possible to set the disposition of a signal to terminate or dump core (unless one of these is the default disposition of the signal). The nearest we can get to this is to install a handler for the signal that then calls either exit() or abort(). The abort() function generates a SIGABRT signal for the process, which causes it to dump core and terminate.</p>"},{"location":"level102/system_calls_and_signals/signals/#types-of-signals","title":"Types of signals","text":"<p>To list available signals in a Linux system, you can use the command <code>kill -l</code> .  The table below lists the signals 1 to 20. To get a full list of signals, you can refer here.</p> Signal name Signal number Default Action Meaning SIGHUP 1 Terminate Hangup detected on controlling terminal or death of controlling process SIGINT 2 Terminate Interrupt from keyboard SIGQUIT 3 Core dump Quit from keyboard SIGILL 4 Core dump Illegal instruction SIGTRAP 5 Core dump Trace/breakpoint trap for debugging SIGABRT , SIGIOT 6 Core dump Abnormal termination SIGBUS 7 Core dump Bus error SIGFPE 8 Core dump Floating point exception SIGKILL 9 Terminate Kill signal(cannot be caught or ignored) SIGUSR1 10 Terminate User-defined signal 1 SIGSEGV 11 Core dump Invalid memory reference SIGUSR2 12 Terminate User-defined signal 2 SIGPIPE 13 Terminate Broken pipe;write pipe with no readers SIGALRM 14 Terminate Timer signal from alarm SIGTERM 15 Terminate Process termination SIGSTKFLT 16 Terminate Stack fault on math co-processor SIGCHLD 17 Ignore Child stopped or terminated SIGCONT 18 Continue Continue if stopped SIGSTOP 19 Stop Stop process (can not be caught or ignore) SIGTSTP 20 Stop Stop types at tty"},{"location":"level102/system_calls_and_signals/signals/#sending-signals-to-process","title":"Sending signals to process","text":"<p>There are three different ways to send signals to processes:</p> <ul> <li>Sending signal to process using kill</li> </ul> <p>Kill command can be used to send signals to process. By default a SIGTERM signal is sent but a different type of signal can be sent to the process by defining the signal number(or signal name). For example, the command <code>kill -9 367</code> sends SIGKILL to the process with PID 367</p> <ul> <li>Sending signal to process via keyboard </li> </ul> <p>Signals can be sent to a running process by pressing some specific keys. For example, holding Ctrl+C sends SIGINT to the process which terminates it.</p> <ul> <li>Sending signal to process via another process </li> </ul> <p>A process can send a signal to another process via the kill() system call. In this use, signals can be employed as a synchronization technique, or even as a primitive form of interprocess communication (IPC). It is also possible for a process to send a signal to itself. <code>int  kill(pid_t pid, int sig)</code> system call takes 2 arguments, pid of the process you wish to send the signal to and the signal number of the desired signal.</p>"},{"location":"level102/system_calls_and_signals/signals/#handling-signals","title":"Handling signals","text":"<p>Referring to the table of signals in the previous section, you can see that there are default handlers attached to all signals when the program is started. When we invoke signal to attach our own handler, we are over-riding the default behaviour of the program in response to that signal. Specifically, if we attach a handler to SIGINT, the program will no longer terminate when you press +C (or send the program a SIGINT by any other means); rather, the function specified as the handler will be invoked instead which will define the behaviour of the program in response to that signal. <p>Let\u2019s take an example of handling SIGINT signal and terminating a program. We will use Python\u2019s signal library to achieve this. </p> <p>When we press Ctrl+C, SIGINT signal is sent. From the signals table, we see that the default action for SIGINT is to terminate the process. To illustrate how the process reacts to the default action and a signal handler, let us consider the below example. </p> <p>Default Action of SIGINT:</p> <p>Let us first run the below lines in a python environment:</p> <pre><code>while 1:\n        continue\n</code></pre> <p>Now let us press \"Ctrl+C\". </p> <p>On pressing \"Ctrl+C\" , a SIGINT interrupt is sent to the process and the default action for SIGINT as per the table we saw in the previous section is to terminate the process.  We see that the while loop is terminated and we get the below on our console:</p> <pre><code>^CTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 2, in &lt;module&gt;\n  KeyboardInterrupt\n</code></pre> <p>The process terminated(default action) since it received a SIGINT(Keyboard Interrupt) when we pressed Ctrl+C.</p> <p>Signal Handler for SIGINT:</p> <p>Let us run the below lines of code in the Python environment. </p> <pre><code>import signal\nimport sys\n\n#Start of signal_handler function\n\ndef signal_handler(signal, frame):\n        print ('You pressed Ctrl+C!')\n\n# End of signal_handler function\n\nsignal.signal(signal.SIGINT, signal_handler)\n\n</code></pre> <p>This is an example of a program that defines its own signal handler for SIGINT , overriding the default action.</p> <p>Now let us run the while and continue statement as we did previously. </p> <pre><code>while 1:\n        continue\n</code></pre> <p>Do we see any changes when Ctrl+C is pressed? Does the program terminate?  We see the below output:</p> <pre><code>^CYou pressed Ctrl+C!\n</code></pre> <p>Everytime we press Ctrl+C, we just the see the above message and the program does not terminate. Inorder to terminate the program, you can press Ctrl+Z which sends the SIGSTOP signal whose default action is to stop the process. </p> <p>In the case of the signal handler, we define a function signal_handler() which prints \u201cYou pressed Ctrl+C!\u201d and does not terminate the program. The handler is called with two arguments, the signal number and the current stack frame (None or a frame object). signal.signal() allows defining custom handlers to be executed when a signal is received. Its two arguments are the signal number(name) you want to trap and the name of the signal handler.</p>"},{"location":"level102/system_calls_and_signals/signals/#role-of-signals-in-system-calls-with-the-example-of-wait","title":"Role of signals in system calls with the example of wait()","text":"<p>The wait() system call waits for one of the children of the calling process to terminate and returns the termination status of that child in the buffer pointed to by statusPtr.</p> <ul> <li>If the parent process calls the wait() system call, then the execution of the parent is suspended until the child is terminated.</li> <li>At the termination of the child, a SIGCHLD signal is generated which is delivered to the parent by the kernel. SIGCHLD signal indicates to the parent that there is some information on the child that needs to be collected.</li> <li>Parent, on receipt of SIGCHLD , reaps the status of the child from the process table. Even though the child is terminated, there is an entry in the process table corresponding to the child where the process entry and PID is stored.</li> <li>When the parent collects the status, this entry is deleted. Thus, all the traces of the child process are removed from the system.</li> </ul>"},{"location":"level102/system_calls_and_signals/signals/#zombie-and-orphane-states","title":"Zombie and Orphane States","text":"<p>If the parent decides not to wait for the child\u2019s termination and it executes its subsequent task, or fails to read the exit status of the child, there remains an entry in the process table even after the termination of the child. This state of the child process is known as the Zombie state. In order to avoid long-lasting zombies, we need to have code that calls wait() after the child process is created. It is generally good to create a signal handler for the SIGCHLD signal, calling one of the wait-family functions in a loop, until no uncollected child data remains.</p> <p>A child process becomes orphaned, if its parent process terminates before the child .The orphaned child is adopted by init/systemd, the ancestor of all processes, whose process ID is 1. Further calls to fetch the parent pid of this process returns 1.</p>"},{"location":"level102/system_calls_and_signals/system_calls/","title":"System Calls","text":""},{"location":"level102/system_calls_and_signals/system_calls/#introduction","title":"Introduction","text":"<p>A system call is a controlled entry point into the kernel, allowing a process to request the kernel to perform some action on the process\u2019s behalf. The kernel makes a range of services accessible to programs via the system call application programming interface (API). Application developers often do not have direct access to the system calls, but can access them through this API. These services include, for example, creating a new process, performing I/O, and creating a pipe for interprocess communication. The set of system calls is fixed. Each system call is identified by a unique number. The list of different system calls can be found here.</p> <p>A system call changes the processor state from user mode to kernel mode, so that the CPU can access protected kernel memory. Each system call may have a set of arguments that specify information to be transferred from user space (i.e., the process\u2019s virtual address space) to kernel space and vice versa. From a programming point of view, invoking a system call looks much like calling a C function.</p>"},{"location":"level102/system_calls_and_signals/system_calls/#types-of-system-calls","title":"Types of system calls","text":"<p>There are mainly 5 types of different system calls. They are :</p> <ul> <li>Process Control: These system calls are used to handle tasks related to a process such as process creation, termination,etc.</li> <li>File Management: These system calls are used for operations on files such as reading/writing a file.</li> <li>Device Management: These system calls are used to deal with devices such as reading/writing into device buffers.</li> <li>Information Maintenance: These system calls handle information and its transfer between the operating system and the user program.</li> <li>Communication: These system calls are useful for inter-process communication. They are also used for creating and deleting a communication connection.</li> </ul> Types Of System Calls Examples in Linux Process Control fork(),exit(),wait() File Management open(), read(),write() Device Management ioctl(),read(),write() Information Maintenance getpid(),alarm(),sleep() Communication pipe(),shmget(),mmap()"},{"location":"level102/system_calls_and_signals/system_calls/#user-mode-kernel-mode-and-their-transitions","title":"User mode, kernel mode and their transitions","text":"<p>Modern processor architectures typically allow the CPU to operate in at least two different modes: user mode and kernel mode . Correspondingly, areas of virtual memory can be marked as being part of user space or kernel space. When running in user mode, the CPU can access only memory that is marked as being in user space; attempts to access memory in kernel space result in a hardware exception.</p> <p>At any given time, a process may be executing in either user mode or kernel mode. The type of instructions that can be executed depends on the mode and this is enforced at the hardware level. CPU modes (also called processor modes, CPU states, CPU privilege levels) are operating modes for the central processing unit of some computer architectures that place restrictions on the type and scope of operations that can be performed by certain processes being run by the CPU. The kernel itself is not a process but a process manager. The kernel model assumes that processes that require a kernel service use specific programming constructs called system calls.</p> <p>When a program is executed in user mode, it cannot directly access the kernel data structures or the kernel programs. When an application executes in kernel mode, however, these restrictions no longer apply.  A program usually executes in user mode and switches to kernel mode only when requesting a service provided by the kernel. If an application needs access to hardware resources on the system(like peripherals,memory,disks), it must issue a system call, which causes a context switch from user mode to kernel mode. This procedure is followed when reading/writing from/to files, etc. It is only the system call itself which runs in kernel mode, not the application code. When the system call is complete, the process returns to the user mode with the return value using an inverse context switch. Apart from system calls, kernel routines can be activated in the below ways as well:</p> <ul> <li>The CPU executing the process signals an exception , which is an unusual condition such as an invalid instruction. The kernel handles the exception on behalf of the process that caused it.</li> <li>A peripheral device issues an interrupt signal to the CPU to notify it of an event such as a request for attention, a status change, or the completion of an I/O operation. Each interrupt signal is dealt by a kernel program called an interrupt handler . Since peripheral devices operate asynchronously with respect to the CPU, interrupts occur at unpredictable times.</li> <li>A kernel thread is executed. Since it runs in kernel Mode, the corresponding program must be considered part of the kernel.</li> </ul> <p></p> <p>In the above diagram, Process 1 in User Mode issues a system call, after which the process switches to Kernel Mode and the system call is serviced. Process 1 then resumes execution in User Mode until a timer interrupt occurs and the scheduler is activated in Kernel Mode. A process switch takes place and Process 2 starts its execution in User Mode until a hardware device raises an interrupt. As a consequence of the interrupt, Process 2 switches to Kernel Mode and services the interrupt.</p>"},{"location":"level102/system_calls_and_signals/system_calls/#working-of-write-system-call","title":"Working of write() system call","text":"<p>The write() system call writes data to an open file.</p> <pre><code># include &lt;unistd.h&gt;\n\nssize_t write(int fd, void *buffer, size_t count);\n</code></pre> <p>buffer is the address of the data to be written; count is the number of bytes to write from buffer; and fd is a file descriptor referring to the file to which data is to be written.</p> <p>write() call writes up to count bytes from buffer to the open file referred to by fd.  On success, write() call returns the number of bytes actually written, which may be less than count and returns -1 on error. When performing I/O on a disk file, a successful return from write() doesn\u2019t guarantee that the data has been transferred to disk, because the kernel performs buffering of disk I/O in order to reduce disk activity and expedite write() calls. It simply copies data between a user-space buffer and a buffer in the kernel buffer cache. At some later point, the kernel writes (flushes) its buffer to the disk.</p> <p>If, in the interim, another process attempts to read these bytes of the file, then the kernel automatically supplies the data from the buffer cache, rather than from (the outdated contents of) the file. The aim of this design is to allow write() to be fast, since they don\u2019t need to wait on a (slow) disk operation. This design is also efficient, since it reduces the number of disk transfers that the kernel must perform.</p>"},{"location":"level102/system_calls_and_signals/system_calls/#debugging-in-linux-with-strace","title":"Debugging in Linux with strace","text":"<p>strace is a tool used to trace the transition between user processes and the Linux kernel. Inorder to use the tool, we need ensure that it is installed in the system by running the command:</p> <pre><code>$ rpm -qa | grep -i strace\n\nstrace-4.12-9.el7.x86_64\n</code></pre> <p>If the above command does not give any output, you can install the tool via:</p> <p><code>$ yum install strace</code></p> <p>The functions which are a part of standard C library are known as library functions. The purposes of these functions are very diverse, including such tasks as opening a file, converting a time to a human-readable format, and comparing two character strings. Some library functions are layered on top of system calls. Often, library functions are designed to provide a more caller-friendly interface than the underlying system call. For example, the printf() function provides output formatting and data buffering, whereas the write() system call just outputs a block of bytes.The most commonly used implementation of the standard C library on Linux is the GNU C library glibc.</p> <p>The C programming language gives printf() that lets the user write data in many different formats. So printf() as a function converts your data into a formatted sequence of bytes and that calls write() to write those bytes onto the output. Let us examine what happens when a printf() statement is executed with the use of strace command : <code>strace printf %s \u201cHello world\u201d</code></p> <pre><code> ~]$ strace printf %s \"Hello world\"\nexecve(\"/usr/bin/printf\", [\"printf\", \"%s\", \"Hello world\"], [/* 47 vars */]) = 0\nbrk(NULL)                               = 0x90d000\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f8fc672f000\naccess(\"/etc/ld.so.preload\", R_OK)      = -1 ENOENT (No such file or directory)\nopen(\"/etc/ld.so.cache\", O_RDONLY|O_CLOEXEC) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=98854, ...}) = 0\nmmap(NULL, 98854, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f8fc6716000\nclose(3)                                = 0\nopen(\"/lib64/libc.so.6\", O_RDONLY|O_CLOEXEC) = 3\nread(3, \"\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0&gt;\\0\\1\\0\\0\\0\\20&amp;\\2\\0\\0\\0\\0\\0\"..., 832) = 832\nfstat(3, {st_mode=S_IFREG|0755, st_size=2156160, ...}) = 0\nmmap(NULL, 3985888, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f8fc6141000\nmprotect(0x7f8fc6304000, 2097152, PROT_NONE) = 0\nmmap(0x7f8fc6504000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1c3000) = 0x7f8fc6504000\nmmap(0x7f8fc650a000, 16864, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f8fc650a000\nclose(3)                                = 0\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f8fc6715000\nmmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f8fc6713000\narch_prctl(ARCH_SET_FS, 0x7f8fc6713740) = 0\nmprotect(0x7f8fc6504000, 16384, PROT_READ) = 0\nmprotect(0x60a000, 4096, PROT_READ)     = 0\nmprotect(0x7f8fc6730000, 4096, PROT_READ) = 0\nmunmap(0x7f8fc6716000, 98854)           = 0\nbrk(NULL)                               = 0x90d000\nbrk(0x92e000)                           = 0x92e000\nbrk(NULL)                               = 0x92e000\nopen(\"/usr/lib/locale/locale-archive\", O_RDONLY|O_CLOEXEC) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=106075056, ...}) = 0\nmmap(NULL, 106075056, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f8fbfc17000\nclose(3)                                = 0\nopen(\"/usr/share/locale/locale.alias\", O_RDONLY|O_CLOEXEC) = 3\nfstat(3, {st_mode=S_IFREG|0644, st_size=2502, ...}) = 0\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f8fc672e000\nread(3, \"# Locale name alias data base.\\n#\"..., 4096) = 2502\nread(3, \"\", 4096)                       = 0\nclose(3)                                = 0\nmunmap(0x7f8fc672e000, 4096)            = 0\nopen(\"/usr/lib/locale/UTF-8/LC_CTYPE\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\nfstat(1, {st_mode=S_IFCHR|0620, st_rdev=makedev(136, 1), ...}) = 0\nmmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f8fc672e000\nwrite(1, \"Hello world\", 11Hello world)             = 11\nclose(1)                                = 0\nmunmap(0x7f8fc672e000, 4096)            = 0\nclose(2)                                = 0\nexit_group(0)                           = ?\n+++ exited with 0 +++\n</code></pre> <p>execve(\"/usr/bin/printf\", [\"printf\", \"%s\", \"Hello world\"], [/ 47 vars /]) = 0</p> <p>The first system call made is execve() and does three things:</p> <ul> <li>The operating system (OS) stops the duplicated process (of the parent).</li> <li>OS loads up the new program (in this case: printf()), and starts the new program. </li> <li>execve() replaces defining parts of the current process's memory stack with the new stuff loaded from the printf executable file.</li> </ul> <p>The first word of the line, execve, is the name of the system call being executed. The first parameter must be the path of a binary executable or a script. The second is an array of argument strings passed to the new program. By convention, the first of these strings should contain the filename associated with the file being executed. The third parameter must be an environment variable. The number after the = sign (which is 0 in this case) is a value returned by the execve system call which indicates that the call was successful. </p> <p>open(\"/usr/lib/locale/UTF-8/LC_CTYPE\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)</p> <p>In this line, the program tried to open() file /usr/lib/locale/UTF-8/LC_CTYPE. However the system call failed (with -1 status) with the descriptive error message No such file or directory, as the file wasn\u2019t found (ENOENT).</p> <p>brk(NULL)                               = 0x90d000</p> <p>brk(0x92e000)                           = 0x92e000</p> <p>brk(NULL)                               = 0x92e000</p> <p>The system call brk() is used to increase or decrease the process\u2019s data segment. It returns the new address where the data segment of the process is to end.</p> <p>open(\"/lib64/libc.so.6\", O_RDONLY|O_CLOEXEC) = 3</p> <p>read(3, \"\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0&gt;\\0\\1\\0\\0\\0\\20&amp;\\2\\0\\0\\0\\0\\0\"..., 832) = 832</p> <p>In the above lines of the console output, we see that a successful open() call is made, followed by read() system call.</p> <p>In open(), the first parameter is the path to file which you want to use and the second parameter defines the permissions. In this example, O_RDONLY which means the file is read only and O_CLOEXEC which enables the close-on-exec flag for the opened file. This is useful to avoid race conditions in multithreaded  programs where one thread opens a file descriptor at the same time as another thread. 3 indicates the file descriptor used to open the file. Since fd 0, 1, 2 are already taken by stdin, stdout and stderr. So first unused file descriptor is 3 in file descriptor table.</p> <p>If open() </p> <p>In read(), the first parameter is the file descriptor which is 3(the file was opened using this file descriptor by open(). The second parameter is the buffer to read data from and the third parameter is the length of the buffer. The return value is 832 which is the number of bytes read.</p> <p>close(3)                                = 0</p> <p>A close system call is used to close a file descriptor by the kernel. For most file systems, a program terminates access to a file in a filesystem using the close system call. 0 after the = sign indicates that the system call was successful.</p> <p>write(1, \"Hello world\", 11Hello world)             = 11</p> <p>In the previous section, we described the write() system call and the arguments that it takes. Whenever we see any output to the video screen, it\u2019s from the file named /dev/tty and written to stdout on screen through fd 1. The first parameter is the file descriptor , second parameter is the buffer containing the information to be written and the last parameter contains the count of characters. On success, the number of bytes written are returned (zero indicates nothing was written) which is 11 in this example.</p> <p>+++ exited with 0 +++</p> <p>This indicates that the program exited successfully with exit code 0. An exit code of 0 generally indicates successful execution and termination in Linux programs.</p> <p>You don't need to memorize all the system calls or what they do, because you can refer to documentation when you need to. Ensure the following package is installed before running the man command:</p> <pre><code>$ rpm -qa | grep -i man-pages\n\nman-pages-3.53-5.el7.noarch\n</code></pre> <p>Run the following <code>man</code> command with the system call name to see the documentation for that system call(for eg, execve):</p> <p><code>man 2 execve</code></p> <p>Apart from system calls, strace can be used to detect the files that are being accessed by the program. In the above trace, we have a system call open(\"/lib64/libc.so.6\", O_RDONLY|O_CLOEXEC) = 3   which is opening the libc shared object /lib64/libc.so.6  which is the C implementation of various standard functions. It is the file where we see the printf() definition needed for printing Hello World.</p> <p>Strace can also be used to check if a program is hanging or stuck. When we have the trace, we can observe at which operation the program is stuck as well. Furthermore, as we go through the trace, we can also find errors(if there are any) to point out why the program is hung/stuck. Strace can be very helpful in finding the reason behind slow performance of a program.</p> <p>Alhough strace has the aforementioned uses to it, if you're running a trace in a production environment, strace is not a good choice. It introduces a substantial amount of overhead. According to a performance test conducted by Arnaldo Carvalho de Melo, a senior software engineer at Red Hat, the process traced using strace ran 173 times slower, which can be disastrous for a production environment.</p>"},{"location":"level102/system_design/conclusion/","title":"Conclusion","text":"<p>We have looked at designing a sytem from the scratch, scaling it up from a single server to multiple datacenters and hundreds of thousands of users. However, you might have (rightly!) guessed that there is a lot more to system design than what we have covered so far. This course should give you a sweeping glance at the things that are fundamental to any system design process. Specific solutions implemented, frameworks and orchestration systems used evolve rapidly. However, the guiding principles remain the same. We hope you this course helped in getting you started along the right direction and that you have fun designing systems and solving interesting problems.</p>"},{"location":"level102/system_design/intro/","title":"System Design","text":""},{"location":"level102/system_design/intro/#prerequisites","title":"Prerequisites","text":"<ul> <li>School of SRE - System Design - Phase I</li> </ul>"},{"location":"level102/system_design/intro/#what-to-expect-from-this-course","title":"What to expect from this course","text":"<p>The aim is to empower the reader to understand the building blocks of a well-designed system, evaluate existing systems, understand the trade-offs, come up with their own design, and to explore the various tools available to implement such a system. In phase one of this module, we talked about the fundamentals of system design including concepts like scalability, availability and reliability. We continue to build on those fundamentals in this phase.</p>   Throughout the course, there are callout sections that appear like  this, and talk about things that are closely related to the system  design process, but don\u2019t form a part of the system itself. They also have information about some common issues that crop up in system design. Watch out for them."},{"location":"level102/system_design/intro/#what-is-not-covered-under-this-course","title":"What is not covered under this course","text":"<p>While this course covers many aspects of system design, it does not cover the most fundamental concepts. For such topics, it is advised to go through the prerequisites.</p> <p>In general, this module will not go into actually implementing the architecture - we will not talk about choosing a hosting/cloud provider or an orchestration setup or a CI/CD system. Instead, we try to focus on the fundamental considerations that need to go into system design.</p>"},{"location":"level102/system_design/intro/#course-contents","title":"Course Contents","text":"<ul> <li>Introduction</li> <li>Large system Design</li> <li>Scaling</li> <li>Scaling beyond the datacentre</li> <li>Design patterns for resiliency</li> <li>Conclusion</li> </ul>"},{"location":"level102/system_design/intro/#introduction","title":"Introduction","text":"<p>We talked about building a basic photo sharing application in the previous phase of this course. Our basic requirements for the application were that</p> <ol> <li>It should work for a reasonably large number of users</li> <li>Avoid service failures/cluster crash in case of any issues</li> </ol> <p>In other words, we wanted to build a system that was available, scalable and fault tolerant. We will continue designing that application, and cover additional concepts in the course of doing so.</p> <p>The photo sharing application is a web application that will handle everything from user sign up, log in, uploads, feed generation, user interaction and interaction with uploaded content. Also a database to store this information. In the simplest design, both the web app and the database can run on the same server. Recall this initial design from Phase 1.</p> <p></p> <p>Building on that, we will talk about performance elements in system design - setting the right performance measurement metrics and using them to drive our design decisions, improving performance using caching, Content Delivery Networks (CDNs), etc. We will also talk about how to design for resilience by looking at some system design patterns - graceful degradation, time-outs and circuit breakers.</p> Cost System design considerations like availability, scalability cannot exist in isolation. When operating outside the lab, we have other considerations / the existing considerations take on a different hue. One such consideration is cost. Real world systems almost always have budget constraints. System design, implementation and continued operation needs to have predictable costs per unit output. The output is usually the business problem you are trying to solve. Striking a balance between the two is very important.   Understanding the capabilities of your system  A well designed system requires understanding the building blocks intimately in terms of their capabilities. Not all components are created equal, and understanding what a single component can do is very important - for e.g., in the photo upload application it is important to know what a single database instance is capable of, in terms of read or write transactions per second and what would be a reasonable expectation be. This helps in building systems that are appropriately weighted - and will eliminate obvious sources of bottlenecks.   On a lower level, even understanding the capabilities of the underlying hardware (or a VM instance if you are on cloud) is important. For eg., all disks don\u2019t perform the same, and all disks don\u2019t perform the same per dollar. If we are planning to have an API that is expected to return a response in 100ms under normal circumstances, then it is important to know how much of it will be spent in which parts of the system. The following link will help in getting a sense of each component\u2019s performance, all the way from the CPU cache to the network link to our end user.  Numbers every programmer should know"},{"location":"level102/system_design/large-system-design/","title":"Large System Design","text":"<p>Designing a system usually starts out to be abstract - we have large functional blocks that need to work together and are abstracted away into frontend, backend and database layers. However, when it is time to implement the system, especially as an SRE we have no other choice but to think in specific terms. Servers have a fixed amount of memory, storage capacity and processing power. So we need to think about the realistic expectations from our system, assess the requirements, translate them into specific requirements from each component of the system like network, storage and compute. This is typically how almost all large scale systems are built. The folks over at Google have formalized this approach to designing systems as \u2018Non abstract large system design\u2019 (NALSD). According to the Google site reliability workbook,</p> <p>\u201cPractically, NALSD combines elements of capacity planning, component isolation, and graceful system degradation that are crucial to highly available production systems.\u201d </p> <p>We will be using an approach similar to this to build our system.</p>"},{"location":"level102/system_design/large-system-design/#application-requirements","title":"Application requirements","text":"<p>Let us define our application requirements in more concrete terms i.e., specific functions:</p> <p>Our photo sharing application must let the user</p> <ul> <li> <p>Sign up to become a member, and login to the application</p> </li> <li> <p>Upload photographs, and optionally add a description and tag location and/or people</p> </li> <li> <p>Follow other users on the platform</p> </li> <li> <p>See a feed comprising of photos from other users that they follow</p> </li> <li> <p>View their own profile page, and manage who they follow</p> </li> </ul> <p>Let us define expectations for the application\u2019s performance for a better user experience. We also need to define the health of the system. SLIs and SLOs help us do just that.</p>"},{"location":"level102/system_design/large-system-design/#slis-and-slos","title":"SLIs and SLOs","text":"<p>The Google SRE book defines service level indicator(SLI) as \u201ca carefully defined quantitative measure of some aspect of the level of service that is provided.\u201d For our application, we can define multiple SLIs. One indicator can be the response time for loading the feed for our photo sharing application. Picking the right set of SLIs is very important since they essentially help us define the health of the system as a whole using concrete data. SLIs for an application are defined by the owners of the service, in consultation with the SREs.</p> <p>Service level objective (SLO) is defined as \u201ca target value or range of values for a service level that is measured by an SLI\u201d. SLO is a way for us to anchor ourselves to an optimal user experience by defining SLI boundaries. If our application takes a long time to load the feed, users might not open it very often. As a result, an example of SLO can be that at least 99% of the users should see their feed loaded within 1 second.</p> <p>Now that we have defined SLIs and SLOs, let us define the application\u2019s scalability, reliability and performance characteristics in terms of specific SLI and SLO levels.</p>"},{"location":"level102/system_design/large-system-design/#defining-application-requirements-in-terms-of-slis-and-slos","title":"Defining application requirements in terms of SLIs and SLOs","text":"<p>The following can be some of the expectations for our application:</p> <ul> <li> <p>Once the user successfully uploads the image, it should be accessible to the user and their followers 100% of the time, barring user elected deletion.</p> </li> <li> <p>At least 50000 unique visitors should be able to visit the site at any given time and view their feed.</p> </li> <li> <p>99% of the users should be able to view their feeds in less than 1 second.</p> </li> <li> <p>Upon uploading a new image, it should show up in the feed of the user\u2019s followers within 15 minutes.</p> </li> <li> <p>Users should be able to upload potentially thousands of images. (as long as they are not abusing the service)</p> </li> </ul> <p>Since our ultimate aim is to learn system design, we will arbitrarily limit the functionalities of the system. This will help us keep sight of our aim, and keep us focussed.</p> <p>Having defined the functionalities and expectations for our system, let us quickly sketch an initial design.</p> <p></p> <p>As of now, all the functionalities are residing on a single server, which has endpoints for all of these functions. We will attempt to build a system that satisfies our SLOs, is able to serve 50k concurrent users, and about a million total users. In the course of this attempt, we will discuss a string of concepts, some of which we have already seen in Phase 1 of this course.</p> Caution Note that the numbers we have picked in the following sections are completely arbitrary. They have been chosen to demonstrate thinking about system design in a non-abstract manner. They have not been benchmarked, and bear no real world resemblance. Do not use them in any real world systems that you may be designing. You should come up with your own numbers, using the guiding principles we have relied upon here."},{"location":"level102/system_design/large-system-design/#estimating-resource-requirements","title":"Estimating resource requirements","text":"<p>Single Computer</p> <p>If we wished to run the application on a single server, we would need to perform all the above functionalities from the diagram on this server itself. Let us perform some calculations to figure out what kind of resources we will need.</p> <p>Before anything else, we need to store the data about users, their uploads, follower information and any other metadata. We will choose a relational DB to store this information, like MySQL. Do note that we can also choose to use a NOSQL solution here. That would require a similar approach to calculate the requirements. Let us represent the users like so:</p> <pre><code>UserID(int)\nUserName(varchar)\nDisplayName(varchar)\nYearOfBirth(year)\nEmail(varchar)\n</code></pre> <p>Photos can be represented like this:</p> <pre><code>PhotoID(int)\nPhotoHash(varchar)\nUploadtime(datetime)\nLocation(varchar)\nOptionalFlag(varchar)\n</code></pre> <p>Followers can be represented like this:</p> <pre><code>Follower(int)\nFollowee(int)\n</code></pre> <p>Let us quickly estimate the storage needed for a hundred million total users. A single user would need 4B + 32B + 32B + 4B + 32B = 104 bytes. A hundred million users would need 10.4 GB storage. A single photo would need about 4B + 20B + 4B + 32B + 4B = 64 bytes of storage to store the metadata related to the photo. Assuming a million photos uploaded in one day, we would need about 64 MB of storage per day, just for the metadata. For the photo storage itself, we will need about 300GB per day, assuming 300KB average photo size.</p> <p>A single visitor opening our application simply hits our /get_feed endpoint upon logging in to the application. Let us quickly calculate the resources needed to serve this request. Assuming the initial feed loads 5 images (of 300 KB size on an average) and then does lazy loading to infinitely scroll, we will need to send about 1.5 megabytes of images to the user for his initial call. With a 1000 Mbps* network link to the server, we can send only about (1000/8)/1.5 or about 83 users all loading the feed at the same time, before we saturate the network link. If we needed to serve 50k concurrent users every second, we would need 1.5*50000*8 = 600000 Mbps network throughput needed for every 5 images sent, assuming we send out all 5 images in a single second. If we are reading all of it from disk, we would likely hit disk throughput limits far before approaching anywhere near this amount of traffic.</p> <p>So in order to meet our application requirements, we would need a server that has ~310GB storage for the database and the images of one day, and about 600 Gbps link to serve 50k users concurrently, along with CPU required to perform all this. Clearly not the task for a single server.</p> <p>And do note that we have severely limited the information we are storing in the database. We would likely need an order of magnitude more information to be stored.</p> <p>While we clearly do not have any real world server that has the resources we calculated above, this exercise provides us some valuable data points about what the resource cost is. Armed with this information, let us work on scaling our system through system design to get us as close as possible to our goals for the application.</p> <p>* Modern servers even have multi-gigabit links, but it is highly unlikely that such a huge server will be serving our application alone. Modern cloud providers have VMs that also boast several gigabits of bandwidth, but they usually end up being throttled after certain limits.</p>"},{"location":"level102/system_design/large-system-design/#references","title":"References:","text":"<ol> <li>SQL vs NoSQL databases </li> <li>Introducing Non-Abstract Large System Design</li> </ol>"},{"location":"level102/system_design/resiliency/","title":"Resiliency","text":"<p>A resilient system is one that can keep functioning in the face of adversity. With our application, there can be numerous failures that act as adversities. There can be network level failures that take out entire data centres, there might be issues at the rack level or at the server level, or there might be something wrong with the cloud provider. We may also run out of capacity, or there might be a wrong code push that breaks the system. We will talk about a couple of such issues, and understand how we might design a system to work around such things. In some cases, a workaround might not be possible. However it is still valuable to know potential vulnerabilities to the system stability.</p> <p>Resilient architectures leverage system design patterns such as graceful degradation, quotas, timeouts and circuit breakers. Let us look at some of them in this section.</p>"},{"location":"level102/system_design/resiliency/#quotas","title":"Quotas","text":"<p>A system may have a component or an endpoint that is consumed by multiple components and endpoints. It is important to have something in place that will prevent one consumer or client from overwhelming such a system. Quotas are one way to do this - we simply assign a specific quota for each component - by way of specifying requests per unit time. Anyone who breaches the quota is either warned or dropped, depending on the implementation. This way, one of our own systems misbehaving cannot result in denial of service to others. Quotas also help us prevent cascading failures.</p>"},{"location":"level102/system_design/resiliency/#graceful-degradation","title":"Graceful Degradation","text":"<p>When a system with multiple dependencies encounters failure in one of the dependencies, gracefully degrading to minimum viable functionality would be a lot better than grinding the entire system to a halt. For example, let us assume there is an endpoint (an URL for a service or a specific function) in our application whose responsibility is to parse the location information in an user uploaded image from the image's metadata and provide suggestions for location tagging to the user. Rather than failing the entire upload, it is much better to skip over this functionality and still give the user an option to manually tag a location. Gracefully degrading is always better compared to total failures.</p>"},{"location":"level102/system_design/resiliency/#timeouts","title":"Timeouts","text":"<p>We sometimes call other services or resources like databases or API endpoints in our application. When calling such a resource from our application, it is important to always have a reasonable timeout. It doesn\u2019t necessarily even have to be that the resource will fail for all requests. It just might be that a specific request falls in the high tail latency category. A reasonable time out is helpful to keep the user experience consistent - it is better to fail rather than to have frustratingly long delays, in some cases.</p>"},{"location":"level102/system_design/resiliency/#exponential-back-offs","title":"Exponential back-offs","text":"<p>When a service endpoint fails, retries are one way to see if it was a momentary failure. However, if the retry is also going to fail, there is no point in endlessly retrying. At large enough scale, the retries can compete with the new requests (which might very well be served as expected) and saturate the system. To avoid this, we can look at exponential back-off for retries. This essentially decreases the rate at which the clients retry, upon encountering consecutive failures on retries.</p>"},{"location":"level102/system_design/resiliency/#circuit-breakers","title":"Circuit breakers","text":"<p>While exponential back off is one way to deal with retry storms, circuit breakers can be another. Circuit breakers can help failures from percolating the entire system. Else, an unmitigated failure that flows through the system may result in false alerts, worsening the mean time to detection(MTTD) and mean time to resolution(MTTR). For example, in case one of the in-memory cache nodes fails resulting in requests reaching the database post the initial timeouts for cache, it might end up overloading the database. If the initial connection between cache node failure and DB node failure is not made, then it might result in increased MTTD of the actual cause and consequently the MTTR.</p>"},{"location":"level102/system_design/resiliency/#self-healing-systems","title":"Self healing systems","text":"<p>A traditionally load-balanced application with multiple instances might fail when more than a threshold of instances stop responding to requests - either because they are down, or suddenly there is a huge influx of requests, resulting in degraded performance. A self-healing system adds more instances in this scenario to replace the failed instances. Auto-scaling like this can also help when there is a sudden spike in query. If our application runs on a public cloud, it might simply be a matter of spinning up more virtual machines. If we are running on-premise out of our data center, then we will want to think about capacity planning much more carefully. Regardless of how we handle adding additional capacity - simply addition may not be enough. We should also think about additional potential failure modes that might be encountered. For example, the load balancing layer itself might need scaling up, to handle the influx of new backends.</p>"},{"location":"level102/system_design/resiliency/#continuous-deployment-and-integration","title":"Continuous Deployment and Integration","text":"<p>A well designed system also needs to take into account the need for a proper staging setup that can mimic the production environment as closely as possible. There should also be a way for us to replay production traffic in the staging environment to test changes to production thoroughly.</p>"},{"location":"level102/system_design/scaling-beyond-the-datacenter/","title":"Scaling Beyond the Data Center","text":""},{"location":"level102/system_design/scaling-beyond-the-datacenter/#caching-static-assets","title":"Caching static assets","text":"<p>Extending the existing caching solution a bit, we arrive at Content Delivery Networks(CDNs). CDNs are the caching layer that is closest to the user. A significant chunk of resources served in a webpage, may not be changing on an hourly or even a daily basis. In those cases, we would want to cache these at the CDN level, reducing our load. CDNs not only help reduce the load on our servers by removing the burden of serving static / bandwidth intensive resources, they also let us be present closer to our users, by way of points of presence(POPs). CDNs also let us do geo-load balancing, in case we have multiple data centres around the world, and would want to serve from the closest data center (DC) possible.</p> <p>Taking it a step further</p> <p>With the addition of caching and distributing our application into simpler services, we have solved the problem of scaling to 50000 users. However, our users may be geographically distributed locations and may not be at the same distance from our data centre or our cloud region. Consistency in user experience is important, else we are excluding users who are far away from our location, potentially eliminating a significant chunk of potential users. However, it is not impractical to have data centers all over the world, or even in more than a couple of locations in the world. This is where CDNs and POPs come into picture.</p>"},{"location":"level102/system_design/scaling-beyond-the-datacenter/#points-of-presence","title":"Points of Presence","text":"<p>CDN POPs are geographically distributed data centers aimed at being close to users. POPs reduce the round trip time by delivering content from a location that is nearest to the user. POPs typically may not have all the content, but have caching servers that cache the static assets, and fetch the rest of the content from the origin server where the application actually resides. Their main function is to reduce round trip time by bringing the content closer to the website\u2019s visitor. POPs can also route traffic to one of the multiple origin DCs possible. This way, POPs can be leveraged to add resiliency as well as load-balancing.</p> <p>Now, with our image sharing application becoming more popular by the day, let us assume that we have hit 100,000 concurrent users. And we have built another data center, predicting this increase in traffic. Now we need to be able to route the service to both of these data centers in a reliable manner, while also retaining the ability to fall back to a single data center in case there is an issue with one of the two DCs. This is where sticky routing comes into play.</p>"},{"location":"level102/system_design/scaling-beyond-the-datacenter/#sticky-routing","title":"Sticky Routing","text":"<p>When an user sends a request, there are cases in which we might want to serve a specific user\u2019s requests from a DC if we have multiple DCs, or a specific server inside a DC. We may also wish to serve all requests from a specific POP by a single data center. Sticky routing helps us do exactly that. It might be simply pinning all users to a specific DC or pinning specific users to specific servers. This is typically done from the POP, so that as soon as the user enters reaches our servers, we can route them to the nearest DC possible.</p>"},{"location":"level102/system_design/scaling-beyond-the-datacenter/#geo-dns","title":"Geo DNS","text":"<p>When a user opens the application, the user can be directed to one of the multiple globally distributed POPs. This can be done using GeoDNS, which simply put, gives out a different IP address(which are distributed geographically), depending on the location of the user making the DNS request. GeoDNS is the first step in distributing users to different locations - it is not 100% accurate, and typically makes use of IP address allotment information for guessing the location of the user. However, it works well enough for &gt;90% of the users. After this, we can have a sticky routing service that assigns each user to a specific DC, which we can use to assign a DC to this user, and set a cookie. When the user next visits, the cookie can be read at the POP to decide which data center the user\u2019s traffic must be directed to.</p> <p>Having multiple DCs and leveraging sticky routing has not only scaling benefits, but also adds to the resiliency of the service, albeit at the cost of additional complexity.</p> <p>Let us consider another use case in which an user uploads a new profile picture for themselves. If we have multiple data centres or POPs which are not synced in real time - not all of them might have the newer picture. In such a case, it would make sense to tie that user to a specific DC/region until the update has propagated to all regions. Sticky routing would enable us to do this.</p>"},{"location":"level102/system_design/scaling-beyond-the-datacenter/#references","title":"References","text":"<ol> <li>CDNs</li> <li>LinkedIn's TrafficShift blog talks about sticky routing</li> </ol>"},{"location":"level102/system_design/scaling/","title":"Scaling","text":"<p>In the Phase 1 of this course, we had seen AKF scale cube and how it can help in segmenting services, defining microservices and scaling the overall application. We will use a similar strategy to scale our application - while using the estimates from the previous section, so that we can have a data driven design rather than arbitrarily choosing scaling patterns.</p>"},{"location":"level102/system_design/scaling/#splitting-the-application","title":"Splitting the application","text":"<p>Considering the huge volume of traffic that might be generated by our application, and the related resource requirements in terms of memory and CPU, let us split the application into smaller chunks. One of the simplest ways to do this would be to simply divide the application along the endpoints, and spin them up as separate instances. In reality, this decision would probably be a little more complicated, and you might end up having multiple endpoints running from the same instance.</p> <p>The images can be stored in an object store that can be scaled independently, rather than locating it on the servers where the application or the database resides. This would reduce the resource requirements for the servers.</p>"},{"location":"level102/system_design/scaling/#stateful-vs-stateless-services","title":"Stateful vs Stateless services","text":"A stateless process or service doesn\u2019t rely on stored data of it\u2019s past invocations. A stateful service on the other hand stores its state in a datastore, and typically uses the state on every call or transaction. In some cases, there are options for us to design services in such a way that certain components can be made stateless and this helps in multiple ways. Applications can be containerized easily if they are stateless. Containerized applications are also easier to scale. Stateful services require you to scale the datastore with the state as well. However, containerizing databases or scaling databases is out of the scope of this module.  <p>The resulting design after such distribution of workloads might look something like this.</p> <p></p> <p>You might notice that the diagram also has multiple databases. We will see more about this in the following sharding section.</p> <p>Now that we have split the application into smaller services, we need to look at scaling up the capacity of each of these endpoints. The popular Pareto principle states that \u201c80% of consequences come from 20% of the causes\u201d. Modifying it slightly, we can say that 80% of the traffic will be for 20% of images. The no. of images uploaded vs the no. of images seen by the user is going to be similarly skewed. An user is much more likely to view images on a daily basis than they are to upload new ones.</p> <p>In our simple design, generating the feed page with initial 5 images will be a matter of choosing 5 recently uploaded images from fellow users whom this user follows. While we can dynamically fetch the images from the database and generate the page on the fly once the user logs on, we might soon overwhelm the database in case a large number of users choose to login at the same time and load their feeds. There are two things we can do here, one is caching, and the other one is ahead of time generation of user feeds.</p> <p>An user with a million followers can potentially lead to hundreds of thousands of calls to the DB, simply to fetch the latest photoID that the user has uploaded. This can quickly overwhelm any DB, and can potentially bring down the DB itself.</p>"},{"location":"level102/system_design/scaling/#sharding","title":"Sharding","text":"<p>One way to solve the problem of DB limitation is scaling up the DB write and reads. Sharding is one way to scale the DB writes, where the DB would be split into parts that reside in different instances of the DB running on separate machines. DB reads can be scaled up similarly by using read replicas as we had seen in Phase 1 of this module.</p> <p>Compared to the number of images the popular user uploads, the number of views generated would be massive. In that case, we should cache the photoIDs of the user\u2019s uploads, to be returned without having to perform a potentially expensive call to the DB.</p> <p>Let us consider another endpoint in our application named <code>/get_user_details</code>. It simply returns the page an user would see upon clicking another user\u2019s name. This endpoint will return a list of posts that the user has created. Normally, a call to that endpoint will involve the application talking to the DB, fetching a list of all the posts by the user and returning the result. If someone\u2019s profile is viewed thousands of times that means there are thousands of calls to the DB - which may result in issues like hot keys and hot partitions. As with all other systems, an increase in load may result in worsening response times, resulting in inconsistent and potentially bad user experience. A simple solution here would be a cache layer - one that would return the user\u2019s profile with posts without having to call the DB everytime.</p>"},{"location":"level102/system_design/scaling/#caching","title":"Caching","text":"<p>A cache is used for the temporary storage of data that is likely to be accessed again, often repetitively. When the data requested is found in the cache, it is termed as a `cache hit\u2019. A \u2018cache miss\u2019 is the obvious complement. A well positioned cache can greatly reduce the query response time as well as improve the scalability of a system. Caches can be placed at multiple levels between the user and the application. In Phase 1, we saw how we could use caches / CDNs to service static resources of the application, resulting in quicker response times as well as lesser burden on the application servers. Let us look at more situations where caching can play a role.</p>"},{"location":"level102/system_design/scaling/#in-memory-caching","title":"In-memory caching:","text":"<p>In memory caching is when the information to be cached is kept in the main memory of the server, allowing it to be retrieved much faster than a DB residing on a disk. We cache arbitrary text (which can be HTML fragments or may be JSON objects) and fetch it back really fast. An in memory cache is the quickest way to add a layer of fast cache that can optionally be persisted to disk as well.</p>  While caching can aid significantly in scaling up and improving performance, there are situations where cache is suddenly not in place. It might be that the cache was accidentally wiped, leading to all the queries falling through to the DB layer, often multiple calls for the same piece of information. It is important to be aware of this potential \u2018thundering herd\u2019 problem and design your system accordingly.  <p>Caching proxies:</p> <p>There are cases where you may want to cache entire webpages / responses of other upstream resources that you need to respond to requests. There are also cases where you want to let your upstream tell you what to cache and how long to cache it for. In such cases, it might be a good idea to have a caching solution that understands Cache related HTTP headers. One example for our usecase can be when users search for a specific term in our application - if there is a frequent enough search for a user or a term, it might be more efficient to cache the responses for some duration rather than performing the search anew everytime.  </p> <p>Let\u2019s recap one of the goals - Atleast 50000 unique visitors should be able to visit the site at any given time and view their feed. With the implementation of caching, we have removed one potential bottleneck - the DB. We also decomposed the monolith into smaller chunks that provide individual services. Another step closer to our goal is to simply horizontally scale the services needed for feed viewing and putting them behind a load balancer. Please recall the scaling concepts discussed in Phase 1 of this module.</p>"},{"location":"level102/system_design/scaling/#cache-managment","title":"Cache managment","text":"While caching sounds like a simple, easy solution for a hard problem, an even harder problem is to manage the cache efficiently. Like most things in your system, the cache layer is not infinite. Effective cache management means removing things from the cache at the right time, to ensure the cache hit rate remains high. There are many strategies to invalidate cache after a certain time period or below certain usage thresholds. It is important to keep an eye on cache-hit rate and fine tune your caching strategy accordingly."},{"location":"level102/system_design/scaling/#references","title":"References","text":"<ol> <li>There are many object storage solutions available.  Minio is one self hosted solution. There are also vendor-specific solutions for the cloud like Azure Blob storage and Amazon S3.</li> <li>Microservices architecture style - Azure architecture guide</li> <li>There are many in-memory caching solutions. Some of the most popular ones include redis and memcached. Cloud vendors also have their managed cache solutions. </li> <li>Some of the most popular proxies include squid and Apache Traffic Server</li> <li>Thundering herd problem - how instagram tackled it.</li> </ol>"},{"location":"level102/system_troubleshooting_and_performance/conclusion/","title":"Conclusion","text":"<p>Complex systems have many factors which can go wrong. It can be a bad design &amp; architecture, poorly managed code, poor policies around different caches, bad DB queries or architecture, improper use of resources, or bad OS version, poorly monitored system, datacenter issues, network faults, and many more, Any of these can go wrong.</p> <p>As an SRE, Knowing important tools/commands, best practices, profiling, benchmarking and scaling can help you with faster troubleshooting and performance improvement of the overall system.</p>"},{"location":"level102/system_troubleshooting_and_performance/conclusion/#further-readings","title":"Further readings","text":"<p>Here are some links from the LinkedIn Engineering Blog, as written by LinkedIn engineers, about firefighting they did, ensuring site up 24x7x365.</p> <ul> <li>Taming memory fragmentation in Venice with Jemalloc</li> <li>Intro: Every Day Is Monday in Operations</li> <li>Fixing Linux filesystem performance regressions</li> <li>The impact of slow NFS on data systems</li> </ul>"},{"location":"level102/system_troubleshooting_and_performance/important-tools/","title":"Important Tools","text":""},{"location":"level102/system_troubleshooting_and_performance/important-tools/#important-linux-commands","title":"Important linux commands","text":"<p>Having knowledge of following commands will help find issues faster. Elaborating each command in detail is out of scope, please look for man pages or online for more information and examples around the same.</p> <ul> <li>For logs parsing -: grep, sed, awk, cut, tail, head</li> <li>For network checks -: nc, netstat, traceroute/6, mtr, ping/6, route, tcpdump, ss, ip</li> <li>For DNS -: dig, host, nslookup</li> <li>For tracing system call -: strace</li> <li>For parallel executions over ssh -: gnu parallel, xargs + ssh.</li> <li>For http/s checks -: curl, wget</li> <li>For list of open files -: lsof</li> <li>For modifying attributes of the system kernel -: sysctl</li> </ul> <p>In case of distributed systems, some good third party tools can help to execute commands/instructions on many hosts at once, like:</p> <ul> <li>SSH based tools<ul> <li>ClusterSSH: Cluster ssh can help you run a command in parallel on many hosts at once.</li> <li>Ansible: It allows you to write ansible playbooks which you can run on hundreds/thousands of hosts at the same time.</li> </ul> </li> <li>Agent Based tools<ul> <li>Saltstack: Is a configuration, state and remote execution framework, provides a wide variety of flexibility to users to execute modules on large numbers of hosts at once.</li> <li>Puppet: Is an automated administrative engine for your Linux, Unix, and Windows systems, performs administrative tasks.</li> </ul> </li> </ul>"},{"location":"level102/system_troubleshooting_and_performance/important-tools/#log-analysis-tools","title":"Log analysis tools","text":"<p>These can help in writing SQL type queries for parsing, analysing logs and provide an easy UI interface to create dashboards which can render various types of charts based on defined queries.</p> <ul> <li>ELK: Elasticsearch, Logstash and Kibana, provide package of tools and services to allow, parse logs, index logs and analyse logs easily and quickly. Once logs/data is parsed/filtered through logstash and indexed in elasticsearch, one can create dynamic dashboards in Kibana in a matter of minutes. Such provides easy analysis and correlation on application errors/exceptions/warnings.</li> <li>Azure kusto: Azure kusto is a cloud based service similar to Elasticsearch and Kibana, it allows easy indexing of heavy logs, provides SQL type interface for writing queries, and an interface to create dynamic dashboards.</li> </ul>"},{"location":"level102/system_troubleshooting_and_performance/introduction/","title":"System troubleshooting and performance improvements","text":""},{"location":"level102/system_troubleshooting_and_performance/introduction/#prerequisites","title":"Prerequisites","text":"<ul> <li>Linux Basics</li> <li>System design</li> <li>Basic Networking</li> <li>Metrics and Monitoring</li> </ul>"},{"location":"level102/system_troubleshooting_and_performance/introduction/#what-to-expect-from-this-course","title":"What to expect from this course","text":"<p>This brief course tries to provide a general introduction on how to troubleshoot system issues, like analysing api failures, resource utilization, network issues, hardware and OS issues. Course also briefs on profiling and benchmarking to measure overall system performance.</p>"},{"location":"level102/system_troubleshooting_and_performance/introduction/#what-is-not-covered-under-this-course","title":"What is not covered under this course","text":"<p>This course does not cover following -:</p> <ul> <li>System Design and Architecture.</li> <li>Programming practices.</li> <li>Metrics and Monitoring.</li> <li>OS basics.</li> </ul>"},{"location":"level102/system_troubleshooting_and_performance/introduction/#course-contents","title":"Course Contents","text":"<ul> <li>Introduction</li> <li>Troubleshooting<ul> <li>Troubleshooting Flowchart</li> <li>General Practices</li> <li>General Host issues</li> </ul> </li> <li>Important tools to know<ul> <li>Important linux commands</li> <li>Log analysis tools</li> </ul> </li> <li>Performance improvements<ul> <li>Performance analysis commands</li> <li>Profiling tools</li> <li>Benchmarking</li> <li>Scaling</li> </ul> </li> <li>Troubleshooting Example</li> <li>Conclusion<ul> <li>Further readings</li> </ul> </li> </ul>"},{"location":"level102/system_troubleshooting_and_performance/introduction/#introduction","title":"Introduction","text":"<p>Troubleshooting is an important part of operations &amp; development. It can\u2019t be learned by just reading one article or completing a course online,  Its a continuous learning process, one learns it during :-</p> <ul> <li>Daily operations and development.</li> <li>Finding &amp; Fixing application bugs.</li> <li>Finding &amp; Fixing system &amp; network issues.</li> <li>Performance analysis and improvements.</li> <li>And more.</li> </ul> <p>From an SRE\u2019s perspective, It is expected that they are aware of certain topics upfront to be able to troubleshoot problems around single or distributed systems.</p> <ul> <li>Know your resources well, understand host specifications, liks CPU, Memory, Network, Disk etc.</li> <li>Understand system design and architecture.</li> <li>Ensure important metrics are being collected/rendered properly.</li> </ul> <p>There was a famous quote by HP founders - \u201cWhat gets measured gets fixed\u201d</p> <p>If system components and performance metrics are captured thoroughly then there is a high chance of success in troubleshooting an issue, at its earliest.</p>"},{"location":"level102/system_troubleshooting_and_performance/introduction/#scope","title":"Scope","text":"<p>There is no common approach to troubleshoot different types of applications or services, the failure can occur at any layer of it. We will keep the scope of this work to a web api service type only.</p> <p>Note -: Linux ecosystem is wide, there are hundreds of tools and utilities which can help with system troubleshooting, each comes with its own set of benefits and functionalities. We will cover some of the known tools, either already available with Linux or are available in the open source world. Detailed explanation of mentioned tools in this doc is out of scope, please explore the internet or man pages for more examples and documentation around the same.</p>"},{"location":"level102/system_troubleshooting_and_performance/performance-improvements/","title":"Performance Improvements","text":"<p>Performance tools are an important part of development/operations lifecycle, Its highly important for understanding application behavior. SRE generally uses such tools to evaluate how well service will perform and make/suggest improvements accordingly.</p>"},{"location":"level102/system_troubleshooting_and_performance/performance-improvements/#performance-analysis-commands","title":"Performance analysis commands","text":"<p>Most of these commands are a must to know for doing performance analysis of a system or service.</p> <ul> <li>top -: shows real-time view of running system, processes, threads etc.</li> <li>htop -: Similar to top command, but a bit more interactive then it.</li> <li>iotop -: An interactive disk I/O monitoring tool.</li> <li>vmstat -: Virtual memory statistics explorer.</li> <li>iostat -: Monitoring tool for input/output statistics for devices and partitions.</li> <li>free -: Tell info about physical memory and swap memory. </li> <li>sar -: System activity report, reports diff metrics such as cpu, disk, mem, network, etc.</li> <li>mpstat -: Display info about CPU utilization and performance.</li> <li>lsof -: Provides info about the list of open files, opened by which processes.</li> <li>perf -: Performance analysing tool.</li> </ul>"},{"location":"level102/system_troubleshooting_and_performance/performance-improvements/#profiling-tools","title":"Profiling tools","text":"<p>Profiling is an important part of performance analysis of the service. There are various profiler tools available, which can help figure most frequent code-paths, debugging, memory profiling, etc. These can generate the heatmap to understand the code performance when under load.</p> <ul> <li>FlameGraph: Flame graphs are a visualization of profiled software, allowing the most frequent code-paths to be identified quickly and accurately.</li> <li>Valgrind: It is a programming tool for memory debugging, memory leak detection, and profiling.</li> <li>Gprof: GNU profiler tool uses a hybrid of instrumentation and sampling. Instrumentation is used to collect function call information, and sampling is used to gather runtime profiling information.</li> </ul> <p>To know how LinkedIn performs On-Demand Profiling on its services, Read LinkedIn blog ODP: An Infrastructure for On-Demand Service Profiling</p>"},{"location":"level102/system_troubleshooting_and_performance/performance-improvements/#benchmarking","title":"Benchmarking","text":"<p>It is a process of measuring the best performance of the service. Like how much QPS service can handle, its latency when load is increasing, host resource utilization, loadavg etc etc. The regression testing (i.e load testing) is a must before deploying the service to production.</p> <p>Some of known tools -:</p> <ul> <li>Apache Benchmark Tool, ab:, It simulate a high load on webapp and gather data for analysis</li> <li>Httperf: It sends requests to the web server at a specified rate and gathers stats. Increase till one finds the saturation point.</li> <li>Apache JMeter: It is a popular open-source tool to measure web application performance. JMeter is a java based application and not only a web server, but you can use it against PHP, Java, REST, etc.</li> <li>Wrk: It is another modern performance measurement tool to put a load on your web server and give you latency, request per second, transfer per second, etc. details.</li> <li>Locust: Easy to use, scriptable and scalable performance testing tool.</li> </ul> <p>Limitation -:</p> <p>Above tools help in synthetic load or stress testing, but such does not measure actual end user experience, It can\u2019t see how end user resources will affect application performance, it is due to lack of memory, CPU, or poor connectivity to the internet.</p> <p>To know how LinkedIn performs load testing across its fleet. Read : Eliminating toil with fully automated load testing</p> <p>And to know how LinkedIn makes use of Real Time Monitoring (RUM) data to overcome the limitations of load testing, and help improve overall experience for end users. Read : Monitor and Improve Web Performance Using RUM Data Visualization</p>"},{"location":"level102/system_troubleshooting_and_performance/performance-improvements/#scaling","title":"Scaling","text":"<p>System designed optimally can perform up to a certain limit only, based on availability of resources. Continuous optimization is always needed to ensure optimum use of resources at its peak. With increasing QPS, Systems need to scale up. We can either scale vertically or horizontally. Vertical scalability has its limits as one can increase cpu, memory, disk, GPU and other specifications to certain limit only, whereas horizontal scalability can grow easily and infinitely given limitations imposed by application design and environment attributes.</p> <p>Scaling a web application will require some or all of the following -:</p> <ul> <li>Ease the server load by adding more hosts.</li> <li>Distributing the traffic across servers by using Load Balancers.</li> <li>Scale up DB by sharding the data and increasing read replicas.</li> </ul> <p>Here\u2019s a good read how LinkedIn scaled its application stack A Brief History of Scaling LinkedIn</p>"},{"location":"level102/system_troubleshooting_and_performance/troubleshooting-example/","title":"Troubleshooting Example","text":"<p>In this section we will see an example of an issue and try to troubleshoot it, and at the end a few famous troubleshooting stories are shared, which were shared by LinkedIn engineers earlier.</p>"},{"location":"level102/system_troubleshooting_and_performance/troubleshooting-example/#example-memory-leak","title":"Example - Memory leak :","text":"<p>Often memory leak issues go unnoticed until the service becomes unresponsive after running for some time (days, week or even month) until service is restarted or bug is fixed, In such cases, service memory usage will reflect in increasing order in the metric graph, something like this graph.</p> <p></p> <p>Memory leak is mismanagement of memory allocations by application, where unneeded memory is not released, over the period of time objects continue to pile up in memory resulting in service crash. Generally such non-released objects get sorted by garbage collector automatically, but sometimes due to a bug it fails. Debugging helps in figuring where much of the application storage memory is being applied. Then, you start tracking and filter everything based on usage. In case, you find objects that aren\u2019t in use, but are referenced, you can get rid of them by deleting them to avoid memory leaks. In the case of python applications, it comes with inbuilt features like tracemalloc. This module can help pinpoint where an object was allocated first. Almost every language comes with a set of tools/libraries (inbuilt or external) which helps find memory issues. Similarly for Java there is a famous memory leak detection tool called Java VisualVM.</p> <p>Let\u2019s see how a dummy flask based web app with a memory leak bug, with every request its memory usage keeps increasing, and how we can use tracemalloc to capture the leak.</p> <p>Assumption -: A python virtual environment is created, and flask is installed in it.</p> <p>A bare minimum flask code with bug, read comments for more info </p> <p>Starting flask app </p> <p>On start, Its memory usage is around 26576 kb, i.e approx 26MB </p> <p>Now with every subsequent GET request, We can notice that process memory usage continues to increase slowly. </p> <p>Now lets try 10000 requests, to see if memory usage increases heavily. To hit a high number of requests, we use an Apache benchmarking tool called \u201cab\u201d. After 10000 hits, we can notice memory usage of flask app is jumped almost 15 times, i.e from initial 26576 KB to 419316 KB, i.e from roughly 26 MB to 419 MB, That\u2019s a huge jump for such a small webapp. </p> <p>Lets try the python tracemalloc module to try to understand the application memory allocations. Tracemalloc takes memory snapshots at a particular point, performing various statistics on the same. </p> <p>Adding a bare minimum code to our app.py file, no change in fetchuserdata.py file, it will allow us to capture tracemalloc snapshots whenever we will hit /capture uri. </p> <p>After restart of app.py (flask run), we will - First hit http://127.0.0.1:5000/capture - Then hit http://127.0.0.1:5000/ 10000 times, for memory leak/s to take place. - Finally hit http://127.0.0.1:5000/capture again to take a snapshot to know which line has the most allocation. </p> <p>In the final snapshot, we noticed the exact module and lineno where most allocation happened. I.e fetchuserdata.py, line no 6, after 10000 hits, it is holding 419 MB of memory. </p> <p>Summary</p> <p>Above example shows how a bug can lead to memory leak, and how we can use tracemalloc to understand where it is. In real world applications are way more complex than the above dummy example, you must understand that using tracemalloc might degrade application performance somebit, due to tracemalloc own overheads. Be mindful about its use in production environments.</p> <p>If you are interested in digging deeper into Python Object Memory Allocation Internals and debugging memory leak, have a look at an Interesting talk by Sanket Patel in PyCon India 2019, Debug Memory Leak In Python Flask | Python Object Memory Allocation Internals</p>"},{"location":"level102/system_troubleshooting_and_performance/troubleshooting/","title":"Troubleshooting","text":"<p>Troubleshooting system failures can be tricky or tedious at times. In this practice we need to examine the end-to-end flow of a service, all its downstreams, analysing logs, memory leak, CPU usage, disk IO, network failures, hosts issues, etc. Knowing certain practices and tools can help figure &amp; mitigate failures faster. Here\u2019s the high level troubleshooting flowchart -:</p>"},{"location":"level102/system_troubleshooting_and_performance/troubleshooting/#troubleshooting-flowchart","title":"Troubleshooting Flowchart","text":""},{"location":"level102/system_troubleshooting_and_performance/troubleshooting/#general-practices","title":"General Practices","text":"<p>Different systems require different approaches for finding issues. Scope of this is limited and given a problem, there can be many more points which can be looked into. Following points will look at some high level practices towards finding webapp failures and finding fixes for the same.</p> <p>Reproduce problem</p> <ul> <li>Try the broken request to reproduce the issue, Like try Hit http/s request which fails.</li> <li>Check the end to end flow of request and look for return codes, mostly 3xx, 4xx or 5xx. 3xx are mostly about redirections, 4xx are about unauthorized, bad request, forbidden, etc, And 5xx is mostly about server side issues. Based on the return code you can look for the next step.</li> <li>Client side issues are mainly about missing or buggy static contents, like javascript issues, bad image, broken json from an async call etc, such can result in incorrect page rendering on browsers.</li> </ul> <p>Gather Information</p> <ul> <li>Look for errors/exceptions in application logs, Like \"Can\u2019t Allocate Memory\" or OutOfMemoryError, Or Something like \"disk I/O error\", Or a DNS resolution error.</li> <li>Check application and host metrics, Look for anomalies in service and hosts graphs. Since when CPU usage has increased, since when memory usage increased, since when disk space is reduced Or Disk I/O is increased, when load average start shooting up etc. Please read the School of SRE link for more detail around metrics and monitoring.</li> <li>Look for recent code or config changes which possibly are breaking the system.</li> </ul> <p>Understand the problem</p> <ul> <li>Try correlating gathered data with recent actions, like an exception showing up in logs after config/code deployment.</li> <li>Is it due to the QPS increase? Is it bad SQL queries? Do recent code changes demand better or more hardware?</li> </ul> <p>Find a solution and apply a fix</p> <ul> <li>Based on the above findings, look for a quick fix if possible, For example like rolling back changes if errors/exceptions correlate.</li> <li>Try patching or hotfixing the code, probably in staging setup if you want to fix forward.</li> <li>Try to scale up the system, if high QPS is the reason for system failure, then try adding resources (compute, storage, memory, etc) as necessary.</li> <li>Optimize SQL queries if needed.</li> </ul> <p>Verify complete request flow</p> <ul> <li>Hit requests again and ensure returns are successful (return code 2xx).</li> <li>Check Logs ensure no more exceptions/errors, as found earlier.</li> <li>Ensure metrics are back to normal.</li> </ul>"},{"location":"level102/system_troubleshooting_and_performance/troubleshooting/#general-host-issues","title":"General Host issues","text":"<p>To Know if host health is fine or not, look for any hardware failures or its performance issues, one can try following -:</p> <ul> <li>Dmesg -: Shows recent errors / failures thrown by kernel. This help with knowing  hardware failures if any</li> <li>ls commands -: lspci, lsblk, lscpu, lsscsi, These commands list out pci, disk, cpu information.</li> <li>/var/log/messages -: Shows system app/service related errors/warnings, also shows kernel issues.</li> <li>Smartd -: check disk health.</li> </ul>"}]}